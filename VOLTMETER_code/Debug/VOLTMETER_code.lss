
VOLTMETER_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003864  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00003864  000038f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001a8  008001a8  00003a40  2**0
                  ALLOC
  3 .stab         0000267c  00000000  00000000  00003a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e86  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000070c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00007295  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000092a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000a414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b418  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000b879  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c127  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatunsisf+0xba>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e4 e6       	ldi	r30, 0x64	; 100
     162:	f8 e3       	ldi	r31, 0x38	; 56
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a8 3a       	cpi	r26, 0xA8	; 168
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a8 ea       	ldi	r26, 0xA8	; 168
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a3 3b       	cpi	r26, 0xB3	; 179
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <main>
     184:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 c6 03 	call	0x78c	; 0x78c <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a0 ea       	ldi	r26, 0xA0	; 160
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 42 05 	call	0xa84	; 0xa84 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	80 ea       	ldi	r24, 0xA0	; 160
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 42 05 	call	0xa84	; 0xa84 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__epilogue_restores__>

0000072c <__gtsf2>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <__prologue_saves__+0x18>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	89 e0       	ldi	r24, 0x09	; 9
     74a:	e8 2e       	mov	r14, r24
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     76c:	89 85       	ldd	r24, Y+9	; 0x09
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	40 f0       	brcs	.+16     	; 0x782 <__gtsf2+0x56>
     772:	89 89       	ldd	r24, Y+17	; 0x11
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	28 f0       	brcs	.+10     	; 0x782 <__gtsf2+0x56>
     778:	c7 01       	movw	r24, r14
     77a:	b8 01       	movw	r22, r16
     77c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fpcmp_parts_f>
     780:	01 c0       	rjmp	.+2      	; 0x784 <__gtsf2+0x58>
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	68 96       	adiw	r28, 0x18	; 24
     786:	e6 e0       	ldi	r30, 0x06	; 6
     788:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__epilogue_restores__+0x18>

0000078c <__gesf2>:
     78c:	a8 e1       	ldi	r26, 0x18	; 24
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	ec ec       	ldi	r30, 0xCC	; 204
     792:	f3 e0       	ldi	r31, 0x03	; 3
     794:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <__prologue_saves__+0x18>
     798:	69 83       	std	Y+1, r22	; 0x01
     79a:	7a 83       	std	Y+2, r23	; 0x02
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	9c 83       	std	Y+4, r25	; 0x04
     7a0:	2d 83       	std	Y+5, r18	; 0x05
     7a2:	3e 83       	std	Y+6, r19	; 0x06
     7a4:	4f 83       	std	Y+7, r20	; 0x07
     7a6:	58 87       	std	Y+8, r21	; 0x08
     7a8:	89 e0       	ldi	r24, 0x09	; 9
     7aa:	e8 2e       	mov	r14, r24
     7ac:	f1 2c       	mov	r15, r1
     7ae:	ec 0e       	add	r14, r28
     7b0:	fd 1e       	adc	r15, r29
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	b7 01       	movw	r22, r14
     7b8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     7bc:	8e 01       	movw	r16, r28
     7be:	0f 5e       	subi	r16, 0xEF	; 239
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	ce 01       	movw	r24, r28
     7c4:	05 96       	adiw	r24, 0x05	; 5
     7c6:	b8 01       	movw	r22, r16
     7c8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     7cc:	89 85       	ldd	r24, Y+9	; 0x09
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	40 f0       	brcs	.+16     	; 0x7e2 <__gesf2+0x56>
     7d2:	89 89       	ldd	r24, Y+17	; 0x11
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	28 f0       	brcs	.+10     	; 0x7e2 <__gesf2+0x56>
     7d8:	c7 01       	movw	r24, r14
     7da:	b8 01       	movw	r22, r16
     7dc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fpcmp_parts_f>
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <__gesf2+0x58>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	68 96       	adiw	r28, 0x18	; 24
     7e6:	e6 e0       	ldi	r30, 0x06	; 6
     7e8:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__epilogue_restores__+0x18>

000007ec <__ltsf2>:
     7ec:	a8 e1       	ldi	r26, 0x18	; 24
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	ec ef       	ldi	r30, 0xFC	; 252
     7f2:	f3 e0       	ldi	r31, 0x03	; 3
     7f4:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <__prologue_saves__+0x18>
     7f8:	69 83       	std	Y+1, r22	; 0x01
     7fa:	7a 83       	std	Y+2, r23	; 0x02
     7fc:	8b 83       	std	Y+3, r24	; 0x03
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	2d 83       	std	Y+5, r18	; 0x05
     802:	3e 83       	std	Y+6, r19	; 0x06
     804:	4f 83       	std	Y+7, r20	; 0x07
     806:	58 87       	std	Y+8, r21	; 0x08
     808:	89 e0       	ldi	r24, 0x09	; 9
     80a:	e8 2e       	mov	r14, r24
     80c:	f1 2c       	mov	r15, r1
     80e:	ec 0e       	add	r14, r28
     810:	fd 1e       	adc	r15, r29
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	b7 01       	movw	r22, r14
     818:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     81c:	8e 01       	movw	r16, r28
     81e:	0f 5e       	subi	r16, 0xEF	; 239
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	ce 01       	movw	r24, r28
     824:	05 96       	adiw	r24, 0x05	; 5
     826:	b8 01       	movw	r22, r16
     828:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	40 f0       	brcs	.+16     	; 0x842 <__ltsf2+0x56>
     832:	89 89       	ldd	r24, Y+17	; 0x11
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	28 f0       	brcs	.+10     	; 0x842 <__ltsf2+0x56>
     838:	c7 01       	movw	r24, r14
     83a:	b8 01       	movw	r22, r16
     83c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fpcmp_parts_f>
     840:	01 c0       	rjmp	.+2      	; 0x844 <__ltsf2+0x58>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	68 96       	adiw	r28, 0x18	; 24
     846:	e6 e0       	ldi	r30, 0x06	; 6
     848:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__epilogue_restores__+0x18>

0000084c <__fixsfsi>:
     84c:	ac e0       	ldi	r26, 0x0C	; 12
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ec e2       	ldi	r30, 0x2C	; 44
     852:	f4 e0       	ldi	r31, 0x04	; 4
     854:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__prologue_saves__+0x20>
     858:	69 83       	std	Y+1, r22	; 0x01
     85a:	7a 83       	std	Y+2, r23	; 0x02
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	be 01       	movw	r22, r28
     866:	6b 5f       	subi	r22, 0xFB	; 251
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	61 f1       	breq	.+88     	; 0x8cc <__stack+0x6d>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	50 f1       	brcs	.+84     	; 0x8cc <__stack+0x6d>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	21 f4       	brne	.+8      	; 0x884 <__stack+0x25>
     87c:	8e 81       	ldd	r24, Y+6	; 0x06
     87e:	88 23       	and	r24, r24
     880:	51 f1       	breq	.+84     	; 0x8d6 <__stack+0x77>
     882:	2e c0       	rjmp	.+92     	; 0x8e0 <__stack+0x81>
     884:	2f 81       	ldd	r18, Y+7	; 0x07
     886:	38 85       	ldd	r19, Y+8	; 0x08
     888:	37 fd       	sbrc	r19, 7
     88a:	20 c0       	rjmp	.+64     	; 0x8cc <__stack+0x6d>
     88c:	6e 81       	ldd	r22, Y+6	; 0x06
     88e:	2f 31       	cpi	r18, 0x1F	; 31
     890:	31 05       	cpc	r19, r1
     892:	1c f0       	brlt	.+6      	; 0x89a <__stack+0x3b>
     894:	66 23       	and	r22, r22
     896:	f9 f0       	breq	.+62     	; 0x8d6 <__stack+0x77>
     898:	23 c0       	rjmp	.+70     	; 0x8e0 <__stack+0x81>
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	82 1b       	sub	r24, r18
     8a0:	93 0b       	sbc	r25, r19
     8a2:	29 85       	ldd	r18, Y+9	; 0x09
     8a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a6:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a8:	5c 85       	ldd	r21, Y+12	; 0x0c
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	56 95       	lsr	r21
     8ae:	47 95       	ror	r20
     8b0:	37 95       	ror	r19
     8b2:	27 95       	ror	r18
     8b4:	8a 95       	dec	r24
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	66 23       	and	r22, r22
     8ba:	b1 f0       	breq	.+44     	; 0x8e8 <__stack+0x89>
     8bc:	50 95       	com	r21
     8be:	40 95       	com	r20
     8c0:	30 95       	com	r19
     8c2:	21 95       	neg	r18
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	4f 4f       	sbci	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <__stack+0x89>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__stack+0x89>
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	3f ef       	ldi	r19, 0xFF	; 255
     8da:	4f ef       	ldi	r20, 0xFF	; 255
     8dc:	5f e7       	ldi	r21, 0x7F	; 127
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__stack+0x89>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e8       	ldi	r21, 0x80	; 128
     8e8:	b9 01       	movw	r22, r18
     8ea:	ca 01       	movw	r24, r20
     8ec:	2c 96       	adiw	r28, 0x0c	; 12
     8ee:	e2 e0       	ldi	r30, 0x02	; 2
     8f0:	0c 94 85 19 	jmp	0x330a	; 0x330a <__epilogue_restores__+0x20>

000008f4 <__floatunsisf>:
     8f4:	a8 e0       	ldi	r26, 0x08	; 8
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	e0 e8       	ldi	r30, 0x80	; 128
     8fa:	f4 e0       	ldi	r31, 0x04	; 4
     8fc:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__prologue_saves__+0x10>
     900:	7b 01       	movw	r14, r22
     902:	8c 01       	movw	r16, r24
     904:	61 15       	cp	r22, r1
     906:	71 05       	cpc	r23, r1
     908:	81 05       	cpc	r24, r1
     90a:	91 05       	cpc	r25, r1
     90c:	19 f4       	brne	.+6      	; 0x914 <__floatunsisf+0x20>
     90e:	82 e0       	ldi	r24, 0x02	; 2
     910:	89 83       	std	Y+1, r24	; 0x01
     912:	60 c0       	rjmp	.+192    	; 0x9d4 <__floatunsisf+0xe0>
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	89 83       	std	Y+1, r24	; 0x01
     918:	8e e1       	ldi	r24, 0x1E	; 30
     91a:	c8 2e       	mov	r12, r24
     91c:	d1 2c       	mov	r13, r1
     91e:	dc 82       	std	Y+4, r13	; 0x04
     920:	cb 82       	std	Y+3, r12	; 0x03
     922:	ed 82       	std	Y+5, r14	; 0x05
     924:	fe 82       	std	Y+6, r15	; 0x06
     926:	0f 83       	std	Y+7, r16	; 0x07
     928:	18 87       	std	Y+8, r17	; 0x08
     92a:	c8 01       	movw	r24, r16
     92c:	b7 01       	movw	r22, r14
     92e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__clzsi2>
     932:	fc 01       	movw	r30, r24
     934:	31 97       	sbiw	r30, 0x01	; 1
     936:	f7 ff       	sbrs	r31, 7
     938:	3b c0       	rjmp	.+118    	; 0x9b0 <__floatunsisf+0xbc>
     93a:	22 27       	eor	r18, r18
     93c:	33 27       	eor	r19, r19
     93e:	2e 1b       	sub	r18, r30
     940:	3f 0b       	sbc	r19, r31
     942:	57 01       	movw	r10, r14
     944:	68 01       	movw	r12, r16
     946:	02 2e       	mov	r0, r18
     948:	04 c0       	rjmp	.+8      	; 0x952 <__floatunsisf+0x5e>
     94a:	d6 94       	lsr	r13
     94c:	c7 94       	ror	r12
     94e:	b7 94       	ror	r11
     950:	a7 94       	ror	r10
     952:	0a 94       	dec	r0
     954:	d2 f7       	brpl	.-12     	; 0x94a <__floatunsisf+0x56>
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e0       	ldi	r26, 0x00	; 0
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	04 c0       	rjmp	.+8      	; 0x970 <__floatunsisf+0x7c>
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	aa 1f       	adc	r26, r26
     96e:	bb 1f       	adc	r27, r27
     970:	2a 95       	dec	r18
     972:	d2 f7       	brpl	.-12     	; 0x968 <__floatunsisf+0x74>
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	a1 09       	sbc	r26, r1
     978:	b1 09       	sbc	r27, r1
     97a:	8e 21       	and	r24, r14
     97c:	9f 21       	and	r25, r15
     97e:	a0 23       	and	r26, r16
     980:	b1 23       	and	r27, r17
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	a1 05       	cpc	r26, r1
     986:	b1 05       	cpc	r27, r1
     988:	21 f0       	breq	.+8      	; 0x992 <__floatunsisf+0x9e>
     98a:	41 e0       	ldi	r20, 0x01	; 1
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	4a 29       	or	r20, r10
     994:	5b 29       	or	r21, r11
     996:	6c 29       	or	r22, r12
     998:	7d 29       	or	r23, r13
     99a:	4d 83       	std	Y+5, r20	; 0x05
     99c:	5e 83       	std	Y+6, r21	; 0x06
     99e:	6f 83       	std	Y+7, r22	; 0x07
     9a0:	78 87       	std	Y+8, r23	; 0x08
     9a2:	8e e1       	ldi	r24, 0x1E	; 30
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	8e 1b       	sub	r24, r30
     9a8:	9f 0b       	sbc	r25, r31
     9aa:	9c 83       	std	Y+4, r25	; 0x04
     9ac:	8b 83       	std	Y+3, r24	; 0x03
     9ae:	12 c0       	rjmp	.+36     	; 0x9d4 <__floatunsisf+0xe0>
     9b0:	30 97       	sbiw	r30, 0x00	; 0
     9b2:	81 f0       	breq	.+32     	; 0x9d4 <__floatunsisf+0xe0>
     9b4:	0e 2e       	mov	r0, r30
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__floatunsisf+0xcc>
     9b8:	ee 0c       	add	r14, r14
     9ba:	ff 1c       	adc	r15, r15
     9bc:	00 1f       	adc	r16, r16
     9be:	11 1f       	adc	r17, r17
     9c0:	0a 94       	dec	r0
     9c2:	d2 f7       	brpl	.-12     	; 0x9b8 <__floatunsisf+0xc4>
     9c4:	ed 82       	std	Y+5, r14	; 0x05
     9c6:	fe 82       	std	Y+6, r15	; 0x06
     9c8:	0f 83       	std	Y+7, r16	; 0x07
     9ca:	18 87       	std	Y+8, r17	; 0x08
     9cc:	ce 1a       	sub	r12, r30
     9ce:	df 0a       	sbc	r13, r31
     9d0:	dc 82       	std	Y+4, r13	; 0x04
     9d2:	cb 82       	std	Y+3, r12	; 0x03
     9d4:	1a 82       	std	Y+2, r1	; 0x02
     9d6:	ce 01       	movw	r24, r28
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	0e 94 42 05 	call	0xa84	; 0xa84 <__pack_f>
     9de:	28 96       	adiw	r28, 0x08	; 8
     9e0:	ea e0       	ldi	r30, 0x0A	; 10
     9e2:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__epilogue_restores__+0x10>

000009e6 <__clzsi2>:
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	7b 01       	movw	r14, r22
     9f0:	8c 01       	movw	r16, r24
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	e8 16       	cp	r14, r24
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	f8 06       	cpc	r15, r24
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	08 07       	cpc	r16, r24
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	18 07       	cpc	r17, r24
     a02:	88 f4       	brcc	.+34     	; 0xa26 <__clzsi2+0x40>
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	e8 16       	cp	r14, r24
     a08:	f1 04       	cpc	r15, r1
     a0a:	01 05       	cpc	r16, r1
     a0c:	11 05       	cpc	r17, r1
     a0e:	31 f0       	breq	.+12     	; 0xa1c <__clzsi2+0x36>
     a10:	28 f0       	brcs	.+10     	; 0xa1c <__clzsi2+0x36>
     a12:	88 e0       	ldi	r24, 0x08	; 8
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	a0 e0       	ldi	r26, 0x00	; 0
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	17 c0       	rjmp	.+46     	; 0xa4a <__clzsi2+0x64>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	12 c0       	rjmp	.+36     	; 0xa4a <__clzsi2+0x64>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	e8 16       	cp	r14, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	f8 06       	cpc	r15, r24
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	08 07       	cpc	r16, r24
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	18 07       	cpc	r17, r24
     a36:	28 f0       	brcs	.+10     	; 0xa42 <__clzsi2+0x5c>
     a38:	88 e1       	ldi	r24, 0x18	; 24
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	a0 e0       	ldi	r26, 0x00	; 0
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__clzsi2+0x64>
     a42:	80 e1       	ldi	r24, 0x10	; 16
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a0 e0       	ldi	r26, 0x00	; 0
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	20 e2       	ldi	r18, 0x20	; 32
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	28 1b       	sub	r18, r24
     a54:	39 0b       	sbc	r19, r25
     a56:	4a 0b       	sbc	r20, r26
     a58:	5b 0b       	sbc	r21, r27
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__clzsi2+0x7e>
     a5c:	16 95       	lsr	r17
     a5e:	07 95       	ror	r16
     a60:	f7 94       	ror	r15
     a62:	e7 94       	ror	r14
     a64:	8a 95       	dec	r24
     a66:	d2 f7       	brpl	.-12     	; 0xa5c <__clzsi2+0x76>
     a68:	f7 01       	movw	r30, r14
     a6a:	e8 55       	subi	r30, 0x58	; 88
     a6c:	ff 4f       	sbci	r31, 0xFF	; 255
     a6e:	80 81       	ld	r24, Z
     a70:	28 1b       	sub	r18, r24
     a72:	31 09       	sbc	r19, r1
     a74:	41 09       	sbc	r20, r1
     a76:	51 09       	sbc	r21, r1
     a78:	c9 01       	movw	r24, r18
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	08 95       	ret

00000a84 <__pack_f>:
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	fc 01       	movw	r30, r24
     a90:	e4 80       	ldd	r14, Z+4	; 0x04
     a92:	f5 80       	ldd	r15, Z+5	; 0x05
     a94:	06 81       	ldd	r16, Z+6	; 0x06
     a96:	17 81       	ldd	r17, Z+7	; 0x07
     a98:	d1 80       	ldd	r13, Z+1	; 0x01
     a9a:	80 81       	ld	r24, Z
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	48 f4       	brcc	.+18     	; 0xab2 <__pack_f+0x2e>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e1       	ldi	r26, 0x10	; 16
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	e8 2a       	or	r14, r24
     aaa:	f9 2a       	or	r15, r25
     aac:	0a 2b       	or	r16, r26
     aae:	1b 2b       	or	r17, r27
     ab0:	a5 c0       	rjmp	.+330    	; 0xbfc <__pack_f+0x178>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	09 f4       	brne	.+2      	; 0xab8 <__pack_f+0x34>
     ab6:	9f c0       	rjmp	.+318    	; 0xbf6 <__pack_f+0x172>
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	21 f4       	brne	.+8      	; 0xac4 <__pack_f+0x40>
     abc:	ee 24       	eor	r14, r14
     abe:	ff 24       	eor	r15, r15
     ac0:	87 01       	movw	r16, r14
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x4a>
     ac4:	e1 14       	cp	r14, r1
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	19 f4       	brne	.+6      	; 0xad4 <__pack_f+0x50>
     ace:	e0 e0       	ldi	r30, 0x00	; 0
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	96 c0       	rjmp	.+300    	; 0xc00 <__pack_f+0x17c>
     ad4:	62 81       	ldd	r22, Z+2	; 0x02
     ad6:	73 81       	ldd	r23, Z+3	; 0x03
     ad8:	9f ef       	ldi	r25, 0xFF	; 255
     ada:	62 38       	cpi	r22, 0x82	; 130
     adc:	79 07       	cpc	r23, r25
     ade:	0c f0       	brlt	.+2      	; 0xae2 <__pack_f+0x5e>
     ae0:	5b c0       	rjmp	.+182    	; 0xb98 <__pack_f+0x114>
     ae2:	22 e8       	ldi	r18, 0x82	; 130
     ae4:	3f ef       	ldi	r19, 0xFF	; 255
     ae6:	26 1b       	sub	r18, r22
     ae8:	37 0b       	sbc	r19, r23
     aea:	2a 31       	cpi	r18, 0x1A	; 26
     aec:	31 05       	cpc	r19, r1
     aee:	2c f0       	brlt	.+10     	; 0xafa <__pack_f+0x76>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	2a c0       	rjmp	.+84     	; 0xb4e <__pack_f+0xca>
     afa:	b8 01       	movw	r22, r16
     afc:	a7 01       	movw	r20, r14
     afe:	02 2e       	mov	r0, r18
     b00:	04 c0       	rjmp	.+8      	; 0xb0a <__pack_f+0x86>
     b02:	76 95       	lsr	r23
     b04:	67 95       	ror	r22
     b06:	57 95       	ror	r21
     b08:	47 95       	ror	r20
     b0a:	0a 94       	dec	r0
     b0c:	d2 f7       	brpl	.-12     	; 0xb02 <__pack_f+0x7e>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	a0 e0       	ldi	r26, 0x00	; 0
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__pack_f+0x9c>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	2a 95       	dec	r18
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__pack_f+0x94>
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	a1 09       	sbc	r26, r1
     b28:	b1 09       	sbc	r27, r1
     b2a:	8e 21       	and	r24, r14
     b2c:	9f 21       	and	r25, r15
     b2e:	a0 23       	and	r26, r16
     b30:	b1 23       	and	r27, r17
     b32:	00 97       	sbiw	r24, 0x00	; 0
     b34:	a1 05       	cpc	r26, r1
     b36:	b1 05       	cpc	r27, r1
     b38:	21 f0       	breq	.+8      	; 0xb42 <__pack_f+0xbe>
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	9a 01       	movw	r18, r20
     b44:	ab 01       	movw	r20, r22
     b46:	28 2b       	or	r18, r24
     b48:	39 2b       	or	r19, r25
     b4a:	4a 2b       	or	r20, r26
     b4c:	5b 2b       	or	r21, r27
     b4e:	da 01       	movw	r26, r20
     b50:	c9 01       	movw	r24, r18
     b52:	8f 77       	andi	r24, 0x7F	; 127
     b54:	90 70       	andi	r25, 0x00	; 0
     b56:	a0 70       	andi	r26, 0x00	; 0
     b58:	b0 70       	andi	r27, 0x00	; 0
     b5a:	80 34       	cpi	r24, 0x40	; 64
     b5c:	91 05       	cpc	r25, r1
     b5e:	a1 05       	cpc	r26, r1
     b60:	b1 05       	cpc	r27, r1
     b62:	39 f4       	brne	.+14     	; 0xb72 <__pack_f+0xee>
     b64:	27 ff       	sbrs	r18, 7
     b66:	09 c0       	rjmp	.+18     	; 0xb7a <__pack_f+0xf6>
     b68:	20 5c       	subi	r18, 0xC0	; 192
     b6a:	3f 4f       	sbci	r19, 0xFF	; 255
     b6c:	4f 4f       	sbci	r20, 0xFF	; 255
     b6e:	5f 4f       	sbci	r21, 0xFF	; 255
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__pack_f+0xf6>
     b72:	21 5c       	subi	r18, 0xC1	; 193
     b74:	3f 4f       	sbci	r19, 0xFF	; 255
     b76:	4f 4f       	sbci	r20, 0xFF	; 255
     b78:	5f 4f       	sbci	r21, 0xFF	; 255
     b7a:	e0 e0       	ldi	r30, 0x00	; 0
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	a0 e0       	ldi	r26, 0x00	; 0
     b82:	3a 07       	cpc	r19, r26
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	4a 07       	cpc	r20, r26
     b88:	a0 e4       	ldi	r26, 0x40	; 64
     b8a:	5a 07       	cpc	r21, r26
     b8c:	10 f0       	brcs	.+4      	; 0xb92 <__pack_f+0x10e>
     b8e:	e1 e0       	ldi	r30, 0x01	; 1
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	79 01       	movw	r14, r18
     b94:	8a 01       	movw	r16, r20
     b96:	27 c0       	rjmp	.+78     	; 0xbe6 <__pack_f+0x162>
     b98:	60 38       	cpi	r22, 0x80	; 128
     b9a:	71 05       	cpc	r23, r1
     b9c:	64 f5       	brge	.+88     	; 0xbf6 <__pack_f+0x172>
     b9e:	fb 01       	movw	r30, r22
     ba0:	e1 58       	subi	r30, 0x81	; 129
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	d8 01       	movw	r26, r16
     ba6:	c7 01       	movw	r24, r14
     ba8:	8f 77       	andi	r24, 0x7F	; 127
     baa:	90 70       	andi	r25, 0x00	; 0
     bac:	a0 70       	andi	r26, 0x00	; 0
     bae:	b0 70       	andi	r27, 0x00	; 0
     bb0:	80 34       	cpi	r24, 0x40	; 64
     bb2:	91 05       	cpc	r25, r1
     bb4:	a1 05       	cpc	r26, r1
     bb6:	b1 05       	cpc	r27, r1
     bb8:	39 f4       	brne	.+14     	; 0xbc8 <__pack_f+0x144>
     bba:	e7 fe       	sbrs	r14, 7
     bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <__pack_f+0x154>
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e0       	ldi	r26, 0x00	; 0
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <__pack_f+0x14c>
     bc8:	8f e3       	ldi	r24, 0x3F	; 63
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e8 0e       	add	r14, r24
     bd2:	f9 1e       	adc	r15, r25
     bd4:	0a 1f       	adc	r16, r26
     bd6:	1b 1f       	adc	r17, r27
     bd8:	17 ff       	sbrs	r17, 7
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <__pack_f+0x162>
     bdc:	16 95       	lsr	r17
     bde:	07 95       	ror	r16
     be0:	f7 94       	ror	r15
     be2:	e7 94       	ror	r14
     be4:	31 96       	adiw	r30, 0x01	; 1
     be6:	87 e0       	ldi	r24, 0x07	; 7
     be8:	16 95       	lsr	r17
     bea:	07 95       	ror	r16
     bec:	f7 94       	ror	r15
     bee:	e7 94       	ror	r14
     bf0:	8a 95       	dec	r24
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__pack_f+0x164>
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <__pack_f+0x17c>
     bf6:	ee 24       	eor	r14, r14
     bf8:	ff 24       	eor	r15, r15
     bfa:	87 01       	movw	r16, r14
     bfc:	ef ef       	ldi	r30, 0xFF	; 255
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	6e 2f       	mov	r22, r30
     c02:	67 95       	ror	r22
     c04:	66 27       	eor	r22, r22
     c06:	67 95       	ror	r22
     c08:	90 2f       	mov	r25, r16
     c0a:	9f 77       	andi	r25, 0x7F	; 127
     c0c:	d7 94       	ror	r13
     c0e:	dd 24       	eor	r13, r13
     c10:	d7 94       	ror	r13
     c12:	8e 2f       	mov	r24, r30
     c14:	86 95       	lsr	r24
     c16:	49 2f       	mov	r20, r25
     c18:	46 2b       	or	r20, r22
     c1a:	58 2f       	mov	r21, r24
     c1c:	5d 29       	or	r21, r13
     c1e:	b7 01       	movw	r22, r14
     c20:	ca 01       	movw	r24, r20
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	08 95       	ret

00000c2e <__unpack_f>:
     c2e:	fc 01       	movw	r30, r24
     c30:	db 01       	movw	r26, r22
     c32:	40 81       	ld	r20, Z
     c34:	51 81       	ldd	r21, Z+1	; 0x01
     c36:	22 81       	ldd	r18, Z+2	; 0x02
     c38:	62 2f       	mov	r22, r18
     c3a:	6f 77       	andi	r22, 0x7F	; 127
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	22 1f       	adc	r18, r18
     c40:	22 27       	eor	r18, r18
     c42:	22 1f       	adc	r18, r18
     c44:	93 81       	ldd	r25, Z+3	; 0x03
     c46:	89 2f       	mov	r24, r25
     c48:	88 0f       	add	r24, r24
     c4a:	82 2b       	or	r24, r18
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	99 1f       	adc	r25, r25
     c52:	99 27       	eor	r25, r25
     c54:	99 1f       	adc	r25, r25
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	9c 93       	st	X, r25
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	21 15       	cp	r18, r1
     c5e:	31 05       	cpc	r19, r1
     c60:	a9 f5       	brne	.+106    	; 0xccc <__unpack_f+0x9e>
     c62:	41 15       	cp	r20, r1
     c64:	51 05       	cpc	r21, r1
     c66:	61 05       	cpc	r22, r1
     c68:	71 05       	cpc	r23, r1
     c6a:	11 f4       	brne	.+4      	; 0xc70 <__unpack_f+0x42>
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	37 c0       	rjmp	.+110    	; 0xcde <__unpack_f+0xb0>
     c70:	82 e8       	ldi	r24, 0x82	; 130
     c72:	9f ef       	ldi	r25, 0xFF	; 255
     c74:	13 96       	adiw	r26, 0x03	; 3
     c76:	9c 93       	st	X, r25
     c78:	8e 93       	st	-X, r24
     c7a:	12 97       	sbiw	r26, 0x02	; 2
     c7c:	9a 01       	movw	r18, r20
     c7e:	ab 01       	movw	r20, r22
     c80:	67 e0       	ldi	r22, 0x07	; 7
     c82:	22 0f       	add	r18, r18
     c84:	33 1f       	adc	r19, r19
     c86:	44 1f       	adc	r20, r20
     c88:	55 1f       	adc	r21, r21
     c8a:	6a 95       	dec	r22
     c8c:	d1 f7       	brne	.-12     	; 0xc82 <__unpack_f+0x54>
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	8c 93       	st	X, r24
     c92:	0d c0       	rjmp	.+26     	; 0xcae <__unpack_f+0x80>
     c94:	22 0f       	add	r18, r18
     c96:	33 1f       	adc	r19, r19
     c98:	44 1f       	adc	r20, r20
     c9a:	55 1f       	adc	r21, r21
     c9c:	12 96       	adiw	r26, 0x02	; 2
     c9e:	8d 91       	ld	r24, X+
     ca0:	9c 91       	ld	r25, X
     ca2:	13 97       	sbiw	r26, 0x03	; 3
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	13 96       	adiw	r26, 0x03	; 3
     ca8:	9c 93       	st	X, r25
     caa:	8e 93       	st	-X, r24
     cac:	12 97       	sbiw	r26, 0x02	; 2
     cae:	20 30       	cpi	r18, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	38 07       	cpc	r19, r24
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	48 07       	cpc	r20, r24
     cb8:	80 e4       	ldi	r24, 0x40	; 64
     cba:	58 07       	cpc	r21, r24
     cbc:	58 f3       	brcs	.-42     	; 0xc94 <__unpack_f+0x66>
     cbe:	14 96       	adiw	r26, 0x04	; 4
     cc0:	2d 93       	st	X+, r18
     cc2:	3d 93       	st	X+, r19
     cc4:	4d 93       	st	X+, r20
     cc6:	5c 93       	st	X, r21
     cc8:	17 97       	sbiw	r26, 0x07	; 7
     cca:	08 95       	ret
     ccc:	2f 3f       	cpi	r18, 0xFF	; 255
     cce:	31 05       	cpc	r19, r1
     cd0:	79 f4       	brne	.+30     	; 0xcf0 <__unpack_f+0xc2>
     cd2:	41 15       	cp	r20, r1
     cd4:	51 05       	cpc	r21, r1
     cd6:	61 05       	cpc	r22, r1
     cd8:	71 05       	cpc	r23, r1
     cda:	19 f4       	brne	.+6      	; 0xce2 <__unpack_f+0xb4>
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	8c 93       	st	X, r24
     ce0:	08 95       	ret
     ce2:	64 ff       	sbrs	r22, 4
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <__unpack_f+0xbe>
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	8c 93       	st	X, r24
     cea:	12 c0       	rjmp	.+36     	; 0xd10 <__unpack_f+0xe2>
     cec:	1c 92       	st	X, r1
     cee:	10 c0       	rjmp	.+32     	; 0xd10 <__unpack_f+0xe2>
     cf0:	2f 57       	subi	r18, 0x7F	; 127
     cf2:	30 40       	sbci	r19, 0x00	; 0
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	3c 93       	st	X, r19
     cf8:	2e 93       	st	-X, r18
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	83 e0       	ldi	r24, 0x03	; 3
     cfe:	8c 93       	st	X, r24
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	44 0f       	add	r20, r20
     d04:	55 1f       	adc	r21, r21
     d06:	66 1f       	adc	r22, r22
     d08:	77 1f       	adc	r23, r23
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__unpack_f+0xd4>
     d0e:	70 64       	ori	r23, 0x40	; 64
     d10:	14 96       	adiw	r26, 0x04	; 4
     d12:	4d 93       	st	X+, r20
     d14:	5d 93       	st	X+, r21
     d16:	6d 93       	st	X+, r22
     d18:	7c 93       	st	X, r23
     d1a:	17 97       	sbiw	r26, 0x07	; 7
     d1c:	08 95       	ret

00000d1e <__fpcmp_parts_f>:
     d1e:	1f 93       	push	r17
     d20:	dc 01       	movw	r26, r24
     d22:	fb 01       	movw	r30, r22
     d24:	9c 91       	ld	r25, X
     d26:	92 30       	cpi	r25, 0x02	; 2
     d28:	08 f4       	brcc	.+2      	; 0xd2c <__fpcmp_parts_f+0xe>
     d2a:	47 c0       	rjmp	.+142    	; 0xdba <__fpcmp_parts_f+0x9c>
     d2c:	80 81       	ld	r24, Z
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	08 f4       	brcc	.+2      	; 0xd34 <__fpcmp_parts_f+0x16>
     d32:	43 c0       	rjmp	.+134    	; 0xdba <__fpcmp_parts_f+0x9c>
     d34:	94 30       	cpi	r25, 0x04	; 4
     d36:	51 f4       	brne	.+20     	; 0xd4c <__fpcmp_parts_f+0x2e>
     d38:	11 96       	adiw	r26, 0x01	; 1
     d3a:	1c 91       	ld	r17, X
     d3c:	84 30       	cpi	r24, 0x04	; 4
     d3e:	99 f5       	brne	.+102    	; 0xda6 <__fpcmp_parts_f+0x88>
     d40:	81 81       	ldd	r24, Z+1	; 0x01
     d42:	68 2f       	mov	r22, r24
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	61 1b       	sub	r22, r17
     d48:	71 09       	sbc	r23, r1
     d4a:	3f c0       	rjmp	.+126    	; 0xdca <__fpcmp_parts_f+0xac>
     d4c:	84 30       	cpi	r24, 0x04	; 4
     d4e:	21 f0       	breq	.+8      	; 0xd58 <__fpcmp_parts_f+0x3a>
     d50:	92 30       	cpi	r25, 0x02	; 2
     d52:	31 f4       	brne	.+12     	; 0xd60 <__fpcmp_parts_f+0x42>
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	b9 f1       	breq	.+110    	; 0xdc6 <__fpcmp_parts_f+0xa8>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	88 23       	and	r24, r24
     d5c:	89 f1       	breq	.+98     	; 0xdc0 <__fpcmp_parts_f+0xa2>
     d5e:	2d c0       	rjmp	.+90     	; 0xdba <__fpcmp_parts_f+0x9c>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	f1 f0       	breq	.+60     	; 0xda6 <__fpcmp_parts_f+0x88>
     d6a:	81 81       	ldd	r24, Z+1	; 0x01
     d6c:	18 17       	cp	r17, r24
     d6e:	d9 f4       	brne	.+54     	; 0xda6 <__fpcmp_parts_f+0x88>
     d70:	12 96       	adiw	r26, 0x02	; 2
     d72:	2d 91       	ld	r18, X+
     d74:	3c 91       	ld	r19, X
     d76:	13 97       	sbiw	r26, 0x03	; 3
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	93 81       	ldd	r25, Z+3	; 0x03
     d7c:	82 17       	cp	r24, r18
     d7e:	93 07       	cpc	r25, r19
     d80:	94 f0       	brlt	.+36     	; 0xda6 <__fpcmp_parts_f+0x88>
     d82:	28 17       	cp	r18, r24
     d84:	39 07       	cpc	r19, r25
     d86:	bc f0       	brlt	.+46     	; 0xdb6 <__fpcmp_parts_f+0x98>
     d88:	14 96       	adiw	r26, 0x04	; 4
     d8a:	8d 91       	ld	r24, X+
     d8c:	9d 91       	ld	r25, X+
     d8e:	0d 90       	ld	r0, X+
     d90:	bc 91       	ld	r27, X
     d92:	a0 2d       	mov	r26, r0
     d94:	24 81       	ldd	r18, Z+4	; 0x04
     d96:	35 81       	ldd	r19, Z+5	; 0x05
     d98:	46 81       	ldd	r20, Z+6	; 0x06
     d9a:	57 81       	ldd	r21, Z+7	; 0x07
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	4a 07       	cpc	r20, r26
     da2:	5b 07       	cpc	r21, r27
     da4:	18 f4       	brcc	.+6      	; 0xdac <__fpcmp_parts_f+0x8e>
     da6:	11 23       	and	r17, r17
     da8:	41 f0       	breq	.+16     	; 0xdba <__fpcmp_parts_f+0x9c>
     daa:	0a c0       	rjmp	.+20     	; 0xdc0 <__fpcmp_parts_f+0xa2>
     dac:	82 17       	cp	r24, r18
     dae:	93 07       	cpc	r25, r19
     db0:	a4 07       	cpc	r26, r20
     db2:	b5 07       	cpc	r27, r21
     db4:	40 f4       	brcc	.+16     	; 0xdc6 <__fpcmp_parts_f+0xa8>
     db6:	11 23       	and	r17, r17
     db8:	19 f0       	breq	.+6      	; 0xdc0 <__fpcmp_parts_f+0xa2>
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <__fpcmp_parts_f+0xac>
     dc0:	6f ef       	ldi	r22, 0xFF	; 255
     dc2:	7f ef       	ldi	r23, 0xFF	; 255
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <__fpcmp_parts_f+0xac>
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	cb 01       	movw	r24, r22
     dcc:	1f 91       	pop	r17
     dce:	08 95       	ret

00000dd0 <ADC_init>:
 */
#include"common_macros.h"
#include "adc.h"
#include<avr/io.h>
void ADC_init(const ADC_ConfigType*Config_Ptr)
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <ADC_init+0x6>
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	9a 83       	std	Y+2, r25	; 0x02
     ddc:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=(ADMUX&0x3F)|((Config_Ptr->ref_volt)<<6);
     dde:	a7 e2       	ldi	r26, 0x27	; 39
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e7 e2       	ldi	r30, 0x27	; 39
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	28 2f       	mov	r18, r24
     dea:	2f 73       	andi	r18, 0x3F	; 63
     dec:	e9 81       	ldd	r30, Y+1	; 0x01
     dee:	fa 81       	ldd	r31, Y+2	; 0x02
     df0:	80 81       	ld	r24, Z
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	00 24       	eor	r0, r0
     df8:	96 95       	lsr	r25
     dfa:	87 95       	ror	r24
     dfc:	07 94       	ror	r0
     dfe:	96 95       	lsr	r25
     e00:	87 95       	ror	r24
     e02:	07 94       	ror	r0
     e04:	98 2f       	mov	r25, r24
     e06:	80 2d       	mov	r24, r0
     e08:	82 2b       	or	r24, r18
     e0a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN);
     e0c:	a6 e2       	ldi	r26, 0x26	; 38
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e6 e2       	ldi	r30, 0x26	; 38
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	80 68       	ori	r24, 0x80	; 128
     e18:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADIE);
     e1a:	a6 e2       	ldi	r26, 0x26	; 38
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e6 e2       	ldi	r30, 0x26	; 38
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	87 7f       	andi	r24, 0xF7	; 247
     e26:	8c 93       	st	X, r24
	ADCSRA=(ADCSRA&0xF8)|(Config_Ptr->prescaler);
     e28:	a6 e2       	ldi	r26, 0x26	; 38
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e6 e2       	ldi	r30, 0x26	; 38
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	98 2f       	mov	r25, r24
     e34:	98 7f       	andi	r25, 0xF8	; 248
     e36:	e9 81       	ldd	r30, Y+1	; 0x01
     e38:	fa 81       	ldd	r31, Y+2	; 0x02
     e3a:	81 81       	ldd	r24, Z+1	; 0x01
     e3c:	89 2b       	or	r24, r25
     e3e:	8c 93       	st	X, r24
}
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <ADC_readChannel>:
uint16 ADC_readChannel(uint8 ch_num)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	0f 92       	push	r0
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=(ADMUX&0xE0)|(ch_num&0x1F);
     e56:	a7 e2       	ldi	r26, 0x27	; 39
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e7 e2       	ldi	r30, 0x27	; 39
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	98 2f       	mov	r25, r24
     e62:	90 7e       	andi	r25, 0xE0	; 224
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	8f 71       	andi	r24, 0x1F	; 31
     e68:	89 2b       	or	r24, r25
     e6a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     e6c:	a6 e2       	ldi	r26, 0x26	; 38
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e6 e2       	ldi	r30, 0x26	; 38
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 64       	ori	r24, 0x40	; 64
     e78:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
     e7a:	e6 e2       	ldi	r30, 0x26	; 38
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	80 71       	andi	r24, 0x10	; 16
     e86:	90 70       	andi	r25, 0x00	; 0
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	b9 f3       	breq	.-18     	; 0xe7a <ADC_readChannel+0x30>
	CLEAR_BIT(ADCSRA,ADIF);
     e8c:	a6 e2       	ldi	r26, 0x26	; 38
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e6 e2       	ldi	r30, 0x26	; 38
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8f 7e       	andi	r24, 0xEF	; 239
     e98:	8c 93       	st	X, r24
	return ADC;
     e9a:	e4 e2       	ldi	r30, 0x24	; 36
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
}
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <GPIO_setupPinDirection+0x6>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <GPIO_setupPinDirection+0x8>
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	6a 83       	std	Y+2, r22	; 0x02
     ebc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	88 30       	cpi	r24, 0x08	; 8
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <GPIO_setupPinDirection+0x1c>
     ec4:	d5 c0       	rjmp	.+426    	; 0x1070 <GPIO_setupPinDirection+0x1c6>
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	84 30       	cpi	r24, 0x04	; 4
     eca:	08 f0       	brcs	.+2      	; 0xece <GPIO_setupPinDirection+0x24>
     ecc:	d1 c0       	rjmp	.+418    	; 0x1070 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3d 83       	std	Y+5, r19	; 0x05
     ed6:	2c 83       	std	Y+4, r18	; 0x04
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	91 05       	cpc	r25, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <GPIO_setupPinDirection+0x3a>
     ee2:	43 c0       	rjmp	.+134    	; 0xf6a <GPIO_setupPinDirection+0xc0>
     ee4:	2c 81       	ldd	r18, Y+4	; 0x04
     ee6:	3d 81       	ldd	r19, Y+5	; 0x05
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	2c f4       	brge	.+10     	; 0xef8 <GPIO_setupPinDirection+0x4e>
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	71 f0       	breq	.+28     	; 0xf12 <GPIO_setupPinDirection+0x68>
     ef6:	bc c0       	rjmp	.+376    	; 0x1070 <GPIO_setupPinDirection+0x1c6>
     ef8:	2c 81       	ldd	r18, Y+4	; 0x04
     efa:	3d 81       	ldd	r19, Y+5	; 0x05
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <GPIO_setupPinDirection+0x5a>
     f02:	5f c0       	rjmp	.+190    	; 0xfc2 <GPIO_setupPinDirection+0x118>
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	9d 81       	ldd	r25, Y+5	; 0x05
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f4       	brne	.+2      	; 0xf10 <GPIO_setupPinDirection+0x66>
     f0e:	85 c0       	rjmp	.+266    	; 0x101a <GPIO_setupPinDirection+0x170>
     f10:	af c0       	rjmp	.+350    	; 0x1070 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	a1 f4       	brne	.+40     	; 0xf40 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f18:	aa e3       	ldi	r26, 0x3A	; 58
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	ea e3       	ldi	r30, 0x3A	; 58
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <GPIO_setupPinDirection+0x8c>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <GPIO_setupPinDirection+0x88>
     f3a:	84 2b       	or	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	98 c0       	rjmp	.+304    	; 0x1070 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f40:	aa e3       	ldi	r26, 0x3A	; 58
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e3       	ldi	r30, 0x3A	; 58
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <GPIO_setupPinDirection+0xb4>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <GPIO_setupPinDirection+0xb0>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	83 c0       	rjmp	.+262    	; 0x1070 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f70:	a7 e3       	ldi	r26, 0x37	; 55
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e7 e3       	ldi	r30, 0x37	; 55
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <GPIO_setupPinDirection+0xe4>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <GPIO_setupPinDirection+0xe0>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	6c c0       	rjmp	.+216    	; 0x1070 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f98:	a7 e3       	ldi	r26, 0x37	; 55
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e7 e3       	ldi	r30, 0x37	; 55
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <GPIO_setupPinDirection+0x10c>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <GPIO_setupPinDirection+0x108>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	57 c0       	rjmp	.+174    	; 0x1070 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	a1 f4       	brne	.+40     	; 0xff0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fc8:	a4 e3       	ldi	r26, 0x34	; 52
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e4 e3       	ldi	r30, 0x34	; 52
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <GPIO_setupPinDirection+0x13c>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <GPIO_setupPinDirection+0x138>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	40 c0       	rjmp	.+128    	; 0x1070 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ff0:	a4 e3       	ldi	r26, 0x34	; 52
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e4 e3       	ldi	r30, 0x34	; 52
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <GPIO_setupPinDirection+0x164>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <GPIO_setupPinDirection+0x160>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	2b c0       	rjmp	.+86     	; 0x1070 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	a1 f4       	brne	.+40     	; 0x1048 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1020:	a1 e3       	ldi	r26, 0x31	; 49
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e1 e3       	ldi	r30, 0x31	; 49
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <GPIO_setupPinDirection+0x194>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <GPIO_setupPinDirection+0x190>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	14 c0       	rjmp	.+40     	; 0x1070 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1048:	a1 e3       	ldi	r26, 0x31	; 49
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e1 e3       	ldi	r30, 0x31	; 49
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <GPIO_setupPinDirection+0x1bc>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <GPIO_setupPinDirection+0x1b8>
    106a:	80 95       	com	r24
    106c:	84 23       	and	r24, r20
    106e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <GPIO_writePin+0x6>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <GPIO_writePin+0x8>
    1088:	0f 92       	push	r0
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	6a 83       	std	Y+2, r22	; 0x02
    1092:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	88 30       	cpi	r24, 0x08	; 8
    1098:	08 f0       	brcs	.+2      	; 0x109c <GPIO_writePin+0x1c>
    109a:	d5 c0       	rjmp	.+426    	; 0x1246 <GPIO_writePin+0x1c6>
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <GPIO_writePin+0x24>
    10a2:	d1 c0       	rjmp	.+418    	; 0x1246 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3d 83       	std	Y+5, r19	; 0x05
    10ac:	2c 83       	std	Y+4, r18	; 0x04
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	91 05       	cpc	r25, r1
    10b6:	09 f4       	brne	.+2      	; 0x10ba <GPIO_writePin+0x3a>
    10b8:	43 c0       	rjmp	.+134    	; 0x1140 <GPIO_writePin+0xc0>
    10ba:	2c 81       	ldd	r18, Y+4	; 0x04
    10bc:	3d 81       	ldd	r19, Y+5	; 0x05
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	2c f4       	brge	.+10     	; 0x10ce <GPIO_writePin+0x4e>
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	71 f0       	breq	.+28     	; 0x10e8 <GPIO_writePin+0x68>
    10cc:	bc c0       	rjmp	.+376    	; 0x1246 <GPIO_writePin+0x1c6>
    10ce:	2c 81       	ldd	r18, Y+4	; 0x04
    10d0:	3d 81       	ldd	r19, Y+5	; 0x05
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	09 f4       	brne	.+2      	; 0x10da <GPIO_writePin+0x5a>
    10d8:	5f c0       	rjmp	.+190    	; 0x1198 <GPIO_writePin+0x118>
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	9d 81       	ldd	r25, Y+5	; 0x05
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	91 05       	cpc	r25, r1
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <GPIO_writePin+0x66>
    10e4:	85 c0       	rjmp	.+266    	; 0x11f0 <GPIO_writePin+0x170>
    10e6:	af c0       	rjmp	.+350    	; 0x1246 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	a1 f4       	brne	.+40     	; 0x1116 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10ee:	ab e3       	ldi	r26, 0x3B	; 59
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	eb e3       	ldi	r30, 0x3B	; 59
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <GPIO_writePin+0x8c>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <GPIO_writePin+0x88>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	98 c0       	rjmp	.+304    	; 0x1246 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1116:	ab e3       	ldi	r26, 0x3B	; 59
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	eb e3       	ldi	r30, 0x3B	; 59
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <GPIO_writePin+0xb4>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <GPIO_writePin+0xb0>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	83 c0       	rjmp	.+262    	; 0x1246 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	a1 f4       	brne	.+40     	; 0x116e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1146:	a8 e3       	ldi	r26, 0x38	; 56
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e8 e3       	ldi	r30, 0x38	; 56
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_writePin+0xe4>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_writePin+0xe0>
    1168:	84 2b       	or	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	6c c0       	rjmp	.+216    	; 0x1246 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    116e:	a8 e3       	ldi	r26, 0x38	; 56
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e8 e3       	ldi	r30, 0x38	; 56
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <GPIO_writePin+0x10c>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <GPIO_writePin+0x108>
    1190:	80 95       	com	r24
    1192:	84 23       	and	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	57 c0       	rjmp	.+174    	; 0x1246 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	a1 f4       	brne	.+40     	; 0x11c6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    119e:	a5 e3       	ldi	r26, 0x35	; 53
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e5 e3       	ldi	r30, 0x35	; 53
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <GPIO_writePin+0x13c>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <GPIO_writePin+0x138>
    11c0:	84 2b       	or	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	40 c0       	rjmp	.+128    	; 0x1246 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11c6:	a5 e3       	ldi	r26, 0x35	; 53
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e5 e3       	ldi	r30, 0x35	; 53
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <GPIO_writePin+0x164>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <GPIO_writePin+0x160>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	2b c0       	rjmp	.+86     	; 0x1246 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	a1 f4       	brne	.+40     	; 0x121e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11f6:	a2 e3       	ldi	r26, 0x32	; 50
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e2 e3       	ldi	r30, 0x32	; 50
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <GPIO_writePin+0x194>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <GPIO_writePin+0x190>
    1218:	84 2b       	or	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	14 c0       	rjmp	.+40     	; 0x1246 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    121e:	a2 e3       	ldi	r26, 0x32	; 50
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e2 e3       	ldi	r30, 0x32	; 50
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <GPIO_writePin+0x1bc>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <GPIO_writePin+0x1b8>
    1240:	80 95       	com	r24
    1242:	84 23       	and	r24, r20
    1244:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <GPIO_readPin+0x6>
    125c:	00 d0       	rcall	.+0      	; 0x125e <GPIO_readPin+0x8>
    125e:	0f 92       	push	r0
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	8a 83       	std	Y+2, r24	; 0x02
    1266:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1268:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	88 30       	cpi	r24, 0x08	; 8
    126e:	08 f0       	brcs	.+2      	; 0x1272 <GPIO_readPin+0x1c>
    1270:	84 c0       	rjmp	.+264    	; 0x137a <GPIO_readPin+0x124>
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	08 f0       	brcs	.+2      	; 0x127a <GPIO_readPin+0x24>
    1278:	80 c0       	rjmp	.+256    	; 0x137a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	3d 83       	std	Y+5, r19	; 0x05
    1282:	2c 83       	std	Y+4, r18	; 0x04
    1284:	4c 81       	ldd	r20, Y+4	; 0x04
    1286:	5d 81       	ldd	r21, Y+5	; 0x05
    1288:	41 30       	cpi	r20, 0x01	; 1
    128a:	51 05       	cpc	r21, r1
    128c:	79 f1       	breq	.+94     	; 0x12ec <GPIO_readPin+0x96>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	82 30       	cpi	r24, 0x02	; 2
    1294:	91 05       	cpc	r25, r1
    1296:	34 f4       	brge	.+12     	; 0x12a4 <GPIO_readPin+0x4e>
    1298:	2c 81       	ldd	r18, Y+4	; 0x04
    129a:	3d 81       	ldd	r19, Y+5	; 0x05
    129c:	21 15       	cp	r18, r1
    129e:	31 05       	cpc	r19, r1
    12a0:	69 f0       	breq	.+26     	; 0x12bc <GPIO_readPin+0x66>
    12a2:	6b c0       	rjmp	.+214    	; 0x137a <GPIO_readPin+0x124>
    12a4:	4c 81       	ldd	r20, Y+4	; 0x04
    12a6:	5d 81       	ldd	r21, Y+5	; 0x05
    12a8:	42 30       	cpi	r20, 0x02	; 2
    12aa:	51 05       	cpc	r21, r1
    12ac:	b9 f1       	breq	.+110    	; 0x131c <GPIO_readPin+0xc6>
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	9d 81       	ldd	r25, Y+5	; 0x05
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <GPIO_readPin+0x64>
    12b8:	49 c0       	rjmp	.+146    	; 0x134c <GPIO_readPin+0xf6>
    12ba:	5f c0       	rjmp	.+190    	; 0x137a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12bc:	e9 e3       	ldi	r30, 0x39	; 57
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <GPIO_readPin+0x7e>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <GPIO_readPin+0x7a>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	90 70       	andi	r25, 0x00	; 0
    12de:	88 23       	and	r24, r24
    12e0:	19 f0       	breq	.+6      	; 0x12e8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	49 c0       	rjmp	.+146    	; 0x137a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12e8:	19 82       	std	Y+1, r1	; 0x01
    12ea:	47 c0       	rjmp	.+142    	; 0x137a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12ec:	e6 e3       	ldi	r30, 0x36	; 54
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a9 01       	movw	r20, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <GPIO_readPin+0xae>
    1300:	55 95       	asr	r21
    1302:	47 95       	ror	r20
    1304:	8a 95       	dec	r24
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <GPIO_readPin+0xaa>
    1308:	ca 01       	movw	r24, r20
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	90 70       	andi	r25, 0x00	; 0
    130e:	88 23       	and	r24, r24
    1310:	19 f0       	breq	.+6      	; 0x1318 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	31 c0       	rjmp	.+98     	; 0x137a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1318:	19 82       	std	Y+1, r1	; 0x01
    131a:	2f c0       	rjmp	.+94     	; 0x137a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    131c:	e3 e3       	ldi	r30, 0x33	; 51
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <GPIO_readPin+0xde>
    1330:	55 95       	asr	r21
    1332:	47 95       	ror	r20
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <GPIO_readPin+0xda>
    1338:	ca 01       	movw	r24, r20
    133a:	81 70       	andi	r24, 0x01	; 1
    133c:	90 70       	andi	r25, 0x00	; 0
    133e:	88 23       	and	r24, r24
    1340:	19 f0       	breq	.+6      	; 0x1348 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	19 c0       	rjmp	.+50     	; 0x137a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1348:	19 82       	std	Y+1, r1	; 0x01
    134a:	17 c0       	rjmp	.+46     	; 0x137a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    134c:	e0 e3       	ldi	r30, 0x30	; 48
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a9 01       	movw	r20, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <GPIO_readPin+0x10e>
    1360:	55 95       	asr	r21
    1362:	47 95       	ror	r20
    1364:	8a 95       	dec	r24
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <GPIO_readPin+0x10a>
    1368:	ca 01       	movw	r24, r20
    136a:	81 70       	andi	r24, 0x01	; 1
    136c:	90 70       	andi	r25, 0x00	; 0
    136e:	88 23       	and	r24, r24
    1370:	19 f0       	breq	.+6      	; 0x1378 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	01 c0       	rjmp	.+2      	; 0x137a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1378:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <GPIO_setupPortDirection+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <GPIO_setupPortDirection+0x8>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	84 30       	cpi	r24, 0x04	; 4
    13a0:	90 f5       	brcc	.+100    	; 0x1406 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3c 83       	std	Y+4, r19	; 0x04
    13aa:	2b 83       	std	Y+3, r18	; 0x03
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	d1 f0       	breq	.+52     	; 0x13ea <GPIO_setupPortDirection+0x5e>
    13b6:	2b 81       	ldd	r18, Y+3	; 0x03
    13b8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <GPIO_setupPortDirection+0x3e>
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <GPIO_setupPortDirection+0x54>
    13c8:	1e c0       	rjmp	.+60     	; 0x1406 <GPIO_setupPortDirection+0x7a>
    13ca:	2b 81       	ldd	r18, Y+3	; 0x03
    13cc:	3c 81       	ldd	r19, Y+4	; 0x04
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	81 f0       	breq	.+32     	; 0x13f4 <GPIO_setupPortDirection+0x68>
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	81 f0       	breq	.+32     	; 0x13fe <GPIO_setupPortDirection+0x72>
    13de:	13 c0       	rjmp	.+38     	; 0x1406 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13e0:	ea e3       	ldi	r30, 0x3A	; 58
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	80 83       	st	Z, r24
    13e8:	0e c0       	rjmp	.+28     	; 0x1406 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13ea:	e7 e3       	ldi	r30, 0x37	; 55
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	80 83       	st	Z, r24
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13f4:	e4 e3       	ldi	r30, 0x34	; 52
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	80 83       	st	Z, r24
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13fe:	e1 e3       	ldi	r30, 0x31	; 49
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	80 83       	st	Z, r24
			break;
		}
	}
}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <GPIO_writePort+0x6>
    141a:	00 d0       	rcall	.+0      	; 0x141c <GPIO_writePort+0x8>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	90 f5       	brcc	.+100    	; 0x148e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3c 83       	std	Y+4, r19	; 0x04
    1432:	2b 83       	std	Y+3, r18	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	91 05       	cpc	r25, r1
    143c:	d1 f0       	breq	.+52     	; 0x1472 <GPIO_writePort+0x5e>
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	3c 81       	ldd	r19, Y+4	; 0x04
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	2c f4       	brge	.+10     	; 0x1452 <GPIO_writePort+0x3e>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	61 f0       	breq	.+24     	; 0x1468 <GPIO_writePort+0x54>
    1450:	1e c0       	rjmp	.+60     	; 0x148e <GPIO_writePort+0x7a>
    1452:	2b 81       	ldd	r18, Y+3	; 0x03
    1454:	3c 81       	ldd	r19, Y+4	; 0x04
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	81 f0       	breq	.+32     	; 0x147c <GPIO_writePort+0x68>
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	9c 81       	ldd	r25, Y+4	; 0x04
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	91 05       	cpc	r25, r1
    1464:	81 f0       	breq	.+32     	; 0x1486 <GPIO_writePort+0x72>
    1466:	13 c0       	rjmp	.+38     	; 0x148e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1468:	eb e3       	ldi	r30, 0x3B	; 59
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	80 83       	st	Z, r24
    1470:	0e c0       	rjmp	.+28     	; 0x148e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1472:	e8 e3       	ldi	r30, 0x38	; 56
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	80 83       	st	Z, r24
    147a:	09 c0       	rjmp	.+18     	; 0x148e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    147c:	e5 e3       	ldi	r30, 0x35	; 53
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	80 83       	st	Z, r24
    1484:	04 c0       	rjmp	.+8      	; 0x148e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1486:	e2 e3       	ldi	r30, 0x32	; 50
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	80 83       	st	Z, r24
			break;
		}
	}
}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <GPIO_readPort+0x6>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <GPIO_readPort+0x8>
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14aa:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	90 f5       	brcc	.+100    	; 0x1516 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	3c 83       	std	Y+4, r19	; 0x04
    14ba:	2b 83       	std	Y+3, r18	; 0x03
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	91 05       	cpc	r25, r1
    14c4:	d1 f0       	breq	.+52     	; 0x14fa <GPIO_readPort+0x5e>
    14c6:	2b 81       	ldd	r18, Y+3	; 0x03
    14c8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	2c f4       	brge	.+10     	; 0x14da <GPIO_readPort+0x3e>
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	61 f0       	breq	.+24     	; 0x14f0 <GPIO_readPort+0x54>
    14d8:	1e c0       	rjmp	.+60     	; 0x1516 <GPIO_readPort+0x7a>
    14da:	2b 81       	ldd	r18, Y+3	; 0x03
    14dc:	3c 81       	ldd	r19, Y+4	; 0x04
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	81 f0       	breq	.+32     	; 0x1504 <GPIO_readPort+0x68>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	83 30       	cpi	r24, 0x03	; 3
    14ea:	91 05       	cpc	r25, r1
    14ec:	81 f0       	breq	.+32     	; 0x150e <GPIO_readPort+0x72>
    14ee:	13 c0       	rjmp	.+38     	; 0x1516 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14f0:	e9 e3       	ldi	r30, 0x39	; 57
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	0e c0       	rjmp	.+28     	; 0x1516 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14fa:	e6 e3       	ldi	r30, 0x36	; 54
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1504:	e3 e3       	ldi	r30, 0x33	; 51
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    150e:	e0 e3       	ldi	r30, 0x30	; 48
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1516:	89 81       	ldd	r24, Y+1	; 0x01
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	61 97       	sbiw	r28, 0x11	; 17
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    153a:	83 e0       	ldi	r24, 0x03	; 3
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1544:	83 e0       	ldi	r24, 0x03	; 3
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    154e:	83 e0       	ldi	r24, 0x03	; 3
    1550:	62 e0       	ldi	r22, 0x02	; 2
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	63 e0       	ldi	r22, 0x03	; 3
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	64 e0       	ldi	r22, 0x04	; 4
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	65 e0       	ldi	r22, 0x05	; 5
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	66 e0       	ldi	r22, 0x06	; 6
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	67 e0       	ldi	r22, 0x07	; 7
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
#endif
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    158a:	1f 86       	std	Y+15, r1	; 0x0f
    158c:	a5 c0       	rjmp	.+330    	; 0x16d8 <KEYPAD_getPressedKey+0x1b2>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    158e:	83 e0       	ldi	r24, 0x03	; 3
    1590:	6f 85       	ldd	r22, Y+15	; 0x0f
    1592:	41 e0       	ldi	r20, 0x01	; 1
    1594:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	6f 85       	ldd	r22, Y+15	; 0x0f
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    15a2:	18 8a       	std	Y+16, r1	; 0x10
    15a4:	1c c0       	rjmp	.+56     	; 0x15de <KEYPAD_getPressedKey+0xb8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    15a6:	88 89       	ldd	r24, Y+16	; 0x10
    15a8:	98 2f       	mov	r25, r24
    15aa:	9c 5f       	subi	r25, 0xFC	; 252
    15ac:	83 e0       	ldi	r24, 0x03	; 3
    15ae:	69 2f       	mov	r22, r25
    15b0:	0e 94 2b 09 	call	0x1256	; 0x1256 <GPIO_readPin>
    15b4:	88 23       	and	r24, r24
    15b6:	81 f4       	brne	.+32     	; 0x15d8 <KEYPAD_getPressedKey+0xb2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    15b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	98 2f       	mov	r25, r24
    15c8:	88 89       	ldd	r24, Y+16	; 0x10
    15ca:	89 0f       	add	r24, r25
    15cc:	8f 5f       	subi	r24, 0xFF	; 255
    15ce:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <KEYPAD_4x4_adjustKeyNumber>
    15d2:	89 8b       	std	Y+17, r24	; 0x11
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
}
    15d4:	89 89       	ldd	r24, Y+17	; 0x11
    15d6:	84 c0       	rjmp	.+264    	; 0x16e0 <KEYPAD_getPressedKey+0x1ba>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    15d8:	88 89       	ldd	r24, Y+16	; 0x10
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	88 8b       	std	Y+16, r24	; 0x10
    15de:	88 89       	ldd	r24, Y+16	; 0x10
    15e0:	84 30       	cpi	r24, 0x04	; 4
    15e2:	08 f3       	brcs	.-62     	; 0x15a6 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    15e4:	83 e0       	ldi	r24, 0x03	; 3
    15e6:	6f 85       	ldd	r22, Y+15	; 0x0f
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 ea       	ldi	r26, 0xA0	; 160
    15f4:	b0 e4       	ldi	r27, 0x40	; 64
    15f6:	8b 87       	std	Y+11, r24	; 0x0b
    15f8:	9c 87       	std	Y+12, r25	; 0x0c
    15fa:	ad 87       	std	Y+13, r26	; 0x0d
    15fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1600:	7c 85       	ldd	r23, Y+12	; 0x0c
    1602:	8d 85       	ldd	r24, Y+13	; 0x0d
    1604:	9e 85       	ldd	r25, Y+14	; 0x0e
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4a e7       	ldi	r20, 0x7A	; 122
    160c:	53 e4       	ldi	r21, 0x43	; 67
    160e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	8f 83       	std	Y+7, r24	; 0x07
    1618:	98 87       	std	Y+8, r25	; 0x08
    161a:	a9 87       	std	Y+9, r26	; 0x09
    161c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    161e:	6f 81       	ldd	r22, Y+7	; 0x07
    1620:	78 85       	ldd	r23, Y+8	; 0x08
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	2c f4       	brge	.+10     	; 0x1640 <KEYPAD_getPressedKey+0x11a>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	3f c0       	rjmp	.+126    	; 0x16be <KEYPAD_getPressedKey+0x198>
	else if (__tmp > 65535)
    1640:	6f 81       	ldd	r22, Y+7	; 0x07
    1642:	78 85       	ldd	r23, Y+8	; 0x08
    1644:	89 85       	ldd	r24, Y+9	; 0x09
    1646:	9a 85       	ldd	r25, Y+10	; 0x0a
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	4c f5       	brge	.+82     	; 0x16aa <KEYPAD_getPressedKey+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	6b 85       	ldd	r22, Y+11	; 0x0b
    165a:	7c 85       	ldd	r23, Y+12	; 0x0c
    165c:	8d 85       	ldd	r24, Y+13	; 0x0d
    165e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e2       	ldi	r20, 0x20	; 32
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <KEYPAD_getPressedKey+0x17a>
    1682:	89 e1       	ldi	r24, 0x19	; 25
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9c 83       	std	Y+4, r25	; 0x04
    1688:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <KEYPAD_getPressedKey+0x168>
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f7       	brne	.-38     	; 0x1682 <KEYPAD_getPressedKey+0x15c>
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <KEYPAD_getPressedKey+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	6f 81       	ldd	r22, Y+7	; 0x07
    16ac:	78 85       	ldd	r23, Y+8	; 0x08
    16ae:	89 85       	ldd	r24, Y+9	; 0x09
    16b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <KEYPAD_getPressedKey+0x1a4>
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    16d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d4:	8f 5f       	subi	r24, 0xFF	; 255
    16d6:	8f 87       	std	Y+15, r24	; 0x0f
    16d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16da:	84 30       	cpi	r24, 0x04	; 4
    16dc:	08 f4       	brcc	.+2      	; 0x16e0 <KEYPAD_getPressedKey+0x1ba>
    16de:	57 cf       	rjmp	.-338    	; 0x158e <KEYPAD_getPressedKey+0x68>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
}
    16e0:	61 96       	adiw	r28, 0x11	; 17
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <KEYPAD_4x4_adjustKeyNumber+0x8>
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1700:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	3c 83       	std	Y+4, r19	; 0x04
    170a:	2b 83       	std	Y+3, r18	; 0x03
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	88 30       	cpi	r24, 0x08	; 8
    1712:	91 05       	cpc	r25, r1
    1714:	09 f4       	brne	.+2      	; 0x1718 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1716:	70 c0       	rjmp	.+224    	; 0x17f8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1718:	2b 81       	ldd	r18, Y+3	; 0x03
    171a:	3c 81       	ldd	r19, Y+4	; 0x04
    171c:	29 30       	cpi	r18, 0x09	; 9
    171e:	31 05       	cpc	r19, r1
    1720:	5c f5       	brge	.+86     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	84 30       	cpi	r24, 0x04	; 4
    1728:	91 05       	cpc	r25, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    172c:	59 c0       	rjmp	.+178    	; 0x17e0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    172e:	2b 81       	ldd	r18, Y+3	; 0x03
    1730:	3c 81       	ldd	r19, Y+4	; 0x04
    1732:	25 30       	cpi	r18, 0x05	; 5
    1734:	31 05       	cpc	r19, r1
    1736:	9c f4       	brge	.+38     	; 0x175e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	9c 81       	ldd	r25, Y+4	; 0x04
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	91 05       	cpc	r25, r1
    1740:	09 f4       	brne	.+2      	; 0x1744 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1742:	48 c0       	rjmp	.+144    	; 0x17d4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1744:	2b 81       	ldd	r18, Y+3	; 0x03
    1746:	3c 81       	ldd	r19, Y+4	; 0x04
    1748:	23 30       	cpi	r18, 0x03	; 3
    174a:	31 05       	cpc	r19, r1
    174c:	0c f0       	brlt	.+2      	; 0x1750 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    174e:	45 c0       	rjmp	.+138    	; 0x17da <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	91 05       	cpc	r25, r1
    1758:	09 f4       	brne	.+2      	; 0x175c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    175a:	39 c0       	rjmp	.+114    	; 0x17ce <KEYPAD_4x4_adjustKeyNumber+0xdc>
    175c:	67 c0       	rjmp	.+206    	; 0x182c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    175e:	2b 81       	ldd	r18, Y+3	; 0x03
    1760:	3c 81       	ldd	r19, Y+4	; 0x04
    1762:	26 30       	cpi	r18, 0x06	; 6
    1764:	31 05       	cpc	r19, r1
    1766:	09 f4       	brne	.+2      	; 0x176a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1768:	41 c0       	rjmp	.+130    	; 0x17ec <KEYPAD_4x4_adjustKeyNumber+0xfa>
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	87 30       	cpi	r24, 0x07	; 7
    1770:	91 05       	cpc	r25, r1
    1772:	0c f0       	brlt	.+2      	; 0x1776 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1774:	3e c0       	rjmp	.+124    	; 0x17f2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1776:	37 c0       	rjmp	.+110    	; 0x17e6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1778:	2b 81       	ldd	r18, Y+3	; 0x03
    177a:	3c 81       	ldd	r19, Y+4	; 0x04
    177c:	2c 30       	cpi	r18, 0x0C	; 12
    177e:	31 05       	cpc	r19, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1782:	46 c0       	rjmp	.+140    	; 0x1810 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	8d 30       	cpi	r24, 0x0D	; 13
    178a:	91 05       	cpc	r25, r1
    178c:	5c f4       	brge	.+22     	; 0x17a4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    178e:	2b 81       	ldd	r18, Y+3	; 0x03
    1790:	3c 81       	ldd	r19, Y+4	; 0x04
    1792:	2a 30       	cpi	r18, 0x0A	; 10
    1794:	31 05       	cpc	r19, r1
    1796:	b1 f1       	breq	.+108    	; 0x1804 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	8b 30       	cpi	r24, 0x0B	; 11
    179e:	91 05       	cpc	r25, r1
    17a0:	a4 f5       	brge	.+104    	; 0x180a <KEYPAD_4x4_adjustKeyNumber+0x118>
    17a2:	2d c0       	rjmp	.+90     	; 0x17fe <KEYPAD_4x4_adjustKeyNumber+0x10c>
    17a4:	2b 81       	ldd	r18, Y+3	; 0x03
    17a6:	3c 81       	ldd	r19, Y+4	; 0x04
    17a8:	2e 30       	cpi	r18, 0x0E	; 14
    17aa:	31 05       	cpc	r19, r1
    17ac:	b9 f1       	breq	.+110    	; 0x181c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	8e 30       	cpi	r24, 0x0E	; 14
    17b4:	91 05       	cpc	r25, r1
    17b6:	7c f1       	brlt	.+94     	; 0x1816 <KEYPAD_4x4_adjustKeyNumber+0x124>
    17b8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ba:	3c 81       	ldd	r19, Y+4	; 0x04
    17bc:	2f 30       	cpi	r18, 0x0F	; 15
    17be:	31 05       	cpc	r19, r1
    17c0:	79 f1       	breq	.+94     	; 0x1820 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	80 31       	cpi	r24, 0x10	; 16
    17c8:	91 05       	cpc	r25, r1
    17ca:	69 f1       	breq	.+90     	; 0x1826 <KEYPAD_4x4_adjustKeyNumber+0x134>
    17cc:	2f c0       	rjmp	.+94     	; 0x182c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	2e c0       	rjmp	.+92     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 2;
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	2b c0       	rjmp	.+86     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 3;
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	28 c0       	rjmp	.+80     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = 'A'; // ASCII Code of %
    17e0:	81 e4       	ldi	r24, 0x41	; 65
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	25 c0       	rjmp	.+74     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    17e6:	84 e0       	ldi	r24, 0x04	; 4
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	22 c0       	rjmp	.+68     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    17ec:	85 e0       	ldi	r24, 0x05	; 5
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	1f c0       	rjmp	.+62     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    17f2:	86 e0       	ldi	r24, 0x06	; 6
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	1c c0       	rjmp	.+56     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = 'B'; /* ASCII Code of '*' */
    17f8:	82 e4       	ldi	r24, 0x42	; 66
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	19 c0       	rjmp	.+50     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 7;
    17fe:	87 e0       	ldi	r24, 0x07	; 7
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	16 c0       	rjmp	.+44     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 8;
    1804:	88 e0       	ldi	r24, 0x08	; 8
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	13 c0       	rjmp	.+38     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 9;
    180a:	89 e0       	ldi	r24, 0x09	; 9
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	10 c0       	rjmp	.+32     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = 'C'; /* ASCII Code of '-' */
    1810:	83 e4       	ldi	r24, 0x43	; 67
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	0d c0       	rjmp	.+26     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = '*';  /* ASCII of Enter */
    1816:	8a e2       	ldi	r24, 0x2A	; 42
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	0a c0       	rjmp	.+20     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    181c:	19 82       	std	Y+1, r1	; 0x01
    181e:	08 c0       	rjmp	.+16     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '#'; /* ASCII Code of '=' */
    1820:	83 e2       	ldi	r24, 0x23	; 35
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = 'D'; /* ASCII Code of '+' */
    1826:	84 e4       	ldi	r24, 0x44	; 68
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1830:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	2e 97       	sbiw	r28, 0x0e	; 14
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 ea       	ldi	r26, 0xA0	; 160
    186e:	b1 e4       	ldi	r27, 0x41	; 65
    1870:	8b 87       	std	Y+11, r24	; 0x0b
    1872:	9c 87       	std	Y+12, r25	; 0x0c
    1874:	ad 87       	std	Y+13, r26	; 0x0d
    1876:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1878:	6b 85       	ldd	r22, Y+11	; 0x0b
    187a:	7c 85       	ldd	r23, Y+12	; 0x0c
    187c:	8d 85       	ldd	r24, Y+13	; 0x0d
    187e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a e7       	ldi	r20, 0x7A	; 122
    1886:	53 e4       	ldi	r21, 0x43	; 67
    1888:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	8f 83       	std	Y+7, r24	; 0x07
    1892:	98 87       	std	Y+8, r25	; 0x08
    1894:	a9 87       	std	Y+9, r26	; 0x09
    1896:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	5f e3       	ldi	r21, 0x3F	; 63
    18a8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    18ac:	88 23       	and	r24, r24
    18ae:	2c f4       	brge	.+10     	; 0x18ba <LCD_init+0x7a>
		__ticks = 1;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	3f c0       	rjmp	.+126    	; 0x1938 <LCD_init+0xf8>
	else if (__tmp > 65535)
    18ba:	6f 81       	ldd	r22, Y+7	; 0x07
    18bc:	78 85       	ldd	r23, Y+8	; 0x08
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	4c f5       	brge	.+82     	; 0x1924 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e2       	ldi	r20, 0x20	; 32
    18e0:	51 e4       	ldi	r21, 0x41	; 65
    18e2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9e 83       	std	Y+6, r25	; 0x06
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <LCD_init+0xda>
    18fc:	89 e1       	ldi	r24, 0x19	; 25
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9c 83       	std	Y+4, r25	; 0x04
    1902:	8b 83       	std	Y+3, r24	; 0x03
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_init+0xc8>
    190c:	9c 83       	std	Y+4, r25	; 0x04
    190e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	9e 83       	std	Y+6, r25	; 0x06
    1918:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	69 f7       	brne	.-38     	; 0x18fc <LCD_init+0xbc>
    1922:	14 c0       	rjmp	.+40     	; 0x194c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	6f 81       	ldd	r22, Y+7	; 0x07
    1926:	78 85       	ldd	r23, Y+8	; 0x08
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	9a 85       	ldd	r25, Y+10	; 0x0a
    192c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9e 83       	std	Y+6, r25	; 0x06
    1936:	8d 83       	std	Y+5, r24	; 0x05
    1938:	8d 81       	ldd	r24, Y+5	; 0x05
    193a:	9e 81       	ldd	r25, Y+6	; 0x06
    193c:	9a 83       	std	Y+2, r25	; 0x02
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_init+0x104>
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	41 e0       	ldi	r20, 0x01	; 1
    1952:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	61 e0       	ldi	r22, 0x01	; 1
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	62 e0       	ldi	r22, 0x02	; 2
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	63 e0       	ldi	r22, 0x03	; 3
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1974:	83 e3       	ldi	r24, 0x33	; 51
    1976:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    197a:	82 e3       	ldi	r24, 0x32	; 50
    197c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1980:	88 e2       	ldi	r24, 0x28	; 40
    1982:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1986:	8c e0       	ldi	r24, 0x0C	; 12
    1988:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_sendCommand>
}
    1992:	2e 96       	adiw	r28, 0x0e	; 14
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	c3 56       	subi	r28, 0x63	; 99
    19b2:	d0 40       	sbci	r29, 0x00	; 0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	fe 01       	movw	r30, r28
    19c0:	ed 59       	subi	r30, 0x9D	; 157
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    19d0:	fe 01       	movw	r30, r28
    19d2:	e1 5a       	subi	r30, 0xA1	; 161
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e8       	ldi	r26, 0x80	; 128
    19dc:	bf e3       	ldi	r27, 0x3F	; 63
    19de:	80 83       	st	Z, r24
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	a2 83       	std	Z+2, r26	; 0x02
    19e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	8e 01       	movw	r16, r28
    19e8:	05 5a       	subi	r16, 0xA5	; 165
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	fe 01       	movw	r30, r28
    19ee:	e1 5a       	subi	r30, 0xA1	; 161
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	60 81       	ld	r22, Z
    19f4:	71 81       	ldd	r23, Z+1	; 0x01
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a e7       	ldi	r20, 0x7A	; 122
    1a00:	53 e4       	ldi	r21, 0x43	; 67
    1a02:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	80 83       	st	Z, r24
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	a2 83       	std	Z+2, r26	; 0x02
    1a12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a14:	fe 01       	movw	r30, r28
    1a16:	e5 5a       	subi	r30, 0xA5	; 165
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	60 81       	ld	r22, Z
    1a1c:	71 81       	ldd	r23, Z+1	; 0x01
    1a1e:	82 81       	ldd	r24, Z+2	; 0x02
    1a20:	93 81       	ldd	r25, Z+3	; 0x03
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1a2e:	88 23       	and	r24, r24
    1a30:	44 f4       	brge	.+16     	; 0x1a42 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1a32:	fe 01       	movw	r30, r28
    1a34:	e7 5a       	subi	r30, 0xA7	; 167
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
    1a40:	64 c0       	rjmp	.+200    	; 0x1b0a <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1a42:	fe 01       	movw	r30, r28
    1a44:	e5 5a       	subi	r30, 0xA5	; 165
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	60 81       	ld	r22, Z
    1a4a:	71 81       	ldd	r23, Z+1	; 0x01
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	93 81       	ldd	r25, Z+3	; 0x03
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	3f ef       	ldi	r19, 0xFF	; 255
    1a54:	4f e7       	ldi	r20, 0x7F	; 127
    1a56:	57 e4       	ldi	r21, 0x47	; 71
    1a58:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	0c f0       	brlt	.+2      	; 0x1a62 <LCD_sendCommand+0xbe>
    1a60:	43 c0       	rjmp	.+134    	; 0x1ae8 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a62:	fe 01       	movw	r30, r28
    1a64:	e1 5a       	subi	r30, 0xA1	; 161
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e2       	ldi	r20, 0x20	; 32
    1a76:	51 e4       	ldi	r21, 0x41	; 65
    1a78:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	8e 01       	movw	r16, r28
    1a82:	07 5a       	subi	r16, 0xA7	; 167
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	f8 01       	movw	r30, r16
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
    1a98:	1f c0       	rjmp	.+62     	; 0x1ad8 <LCD_sendCommand+0x134>
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e9 5a       	subi	r30, 0xA9	; 169
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	89 e1       	ldi	r24, 0x19	; 25
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e9 5a       	subi	r30, 0xA9	; 169
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <LCD_sendCommand+0x10e>
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e9 5a       	subi	r30, 0xA9	; 169
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	91 83       	std	Z+1, r25	; 0x01
    1abe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac0:	de 01       	movw	r26, r28
    1ac2:	a7 5a       	subi	r26, 0xA7	; 167
    1ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e7 5a       	subi	r30, 0xA7	; 167
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 81       	ld	r24, Z
    1ace:	91 81       	ldd	r25, Z+1	; 0x01
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	11 96       	adiw	r26, 0x01	; 1
    1ad4:	9c 93       	st	X, r25
    1ad6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e7 5a       	subi	r30, 0xA7	; 167
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	d1 f6       	brne	.-76     	; 0x1a9a <LCD_sendCommand+0xf6>
    1ae6:	27 c0       	rjmp	.+78     	; 0x1b36 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae8:	8e 01       	movw	r16, r28
    1aea:	07 5a       	subi	r16, 0xA7	; 167
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	fe 01       	movw	r30, r28
    1af0:	e5 5a       	subi	r30, 0xA5	; 165
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	f8 01       	movw	r30, r16
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	80 83       	st	Z, r24
    1b0a:	de 01       	movw	r26, r28
    1b0c:	ab 5a       	subi	r26, 0xAB	; 171
    1b0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b10:	fe 01       	movw	r30, r28
    1b12:	e7 5a       	subi	r30, 0xA7	; 167
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
    1b1a:	8d 93       	st	X+, r24
    1b1c:	9c 93       	st	X, r25
    1b1e:	fe 01       	movw	r30, r28
    1b20:	eb 5a       	subi	r30, 0xAB	; 171
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <LCD_sendCommand+0x184>
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	eb 5a       	subi	r30, 0xAB	; 171
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    1b40:	fe 01       	movw	r30, r28
    1b42:	ef 5a       	subi	r30, 0xAF	; 175
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	a0 e8       	ldi	r26, 0x80	; 128
    1b4c:	bf e3       	ldi	r27, 0x3F	; 63
    1b4e:	80 83       	st	Z, r24
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	a2 83       	std	Z+2, r26	; 0x02
    1b54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b56:	8e 01       	movw	r16, r28
    1b58:	03 5b       	subi	r16, 0xB3	; 179
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ef 5a       	subi	r30, 0xAF	; 175
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a e7       	ldi	r20, 0x7A	; 122
    1b70:	53 e4       	ldi	r21, 0x43	; 67
    1b72:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	80 83       	st	Z, r24
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	a2 83       	std	Z+2, r26	; 0x02
    1b82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b84:	fe 01       	movw	r30, r28
    1b86:	e3 5b       	subi	r30, 0xB3	; 179
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	5f e3       	ldi	r21, 0x3F	; 63
    1b9a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	44 f4       	brge	.+16     	; 0x1bb2 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e5 5b       	subi	r30, 0xB5	; 181
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	80 83       	st	Z, r24
    1bb0:	64 c0       	rjmp	.+200    	; 0x1c7a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e3 5b       	subi	r30, 0xB3	; 179
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	0c f0       	brlt	.+2      	; 0x1bd2 <LCD_sendCommand+0x22e>
    1bd0:	43 c0       	rjmp	.+134    	; 0x1c58 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ef 5a       	subi	r30, 0xAF	; 175
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8e 01       	movw	r16, r28
    1bf2:	05 5b       	subi	r16, 0xB5	; 181
    1bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	f8 01       	movw	r30, r16
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
    1c08:	1f c0       	rjmp	.+62     	; 0x1c48 <LCD_sendCommand+0x2a4>
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e7 5b       	subi	r30, 0xB7	; 183
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	89 e1       	ldi	r24, 0x19	; 25
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e7 5b       	subi	r30, 0xB7	; 183
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <LCD_sendCommand+0x27e>
    1c26:	fe 01       	movw	r30, r28
    1c28:	e7 5b       	subi	r30, 0xB7	; 183
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c30:	de 01       	movw	r26, r28
    1c32:	a5 5b       	subi	r26, 0xB5	; 181
    1c34:	bf 4f       	sbci	r27, 0xFF	; 255
    1c36:	fe 01       	movw	r30, r28
    1c38:	e5 5b       	subi	r30, 0xB5	; 181
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	9c 93       	st	X, r25
    1c46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e5 5b       	subi	r30, 0xB5	; 181
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	d1 f6       	brne	.-76     	; 0x1c0a <LCD_sendCommand+0x266>
    1c56:	27 c0       	rjmp	.+78     	; 0x1ca6 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	8e 01       	movw	r16, r28
    1c5a:	05 5b       	subi	r16, 0xB5	; 181
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e3 5b       	subi	r30, 0xB3	; 179
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	f8 01       	movw	r30, r16
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	80 83       	st	Z, r24
    1c7a:	de 01       	movw	r26, r28
    1c7c:	a9 5b       	subi	r26, 0xB9	; 185
    1c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c80:	fe 01       	movw	r30, r28
    1c82:	e5 5b       	subi	r30, 0xB5	; 181
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	80 81       	ld	r24, Z
    1c88:	91 81       	ldd	r25, Z+1	; 0x01
    1c8a:	8d 93       	st	X+, r24
    1c8c:	9c 93       	st	X, r25
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e9 5b       	subi	r30, 0xB9	; 185
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_sendCommand+0x2f4>
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e9 5b       	subi	r30, 0xB9	; 185
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ed 59       	subi	r30, 0x9D	; 157
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	80 71       	andi	r24, 0x10	; 16
    1cb4:	90 70       	andi	r25, 0x00	; 0
    1cb6:	95 95       	asr	r25
    1cb8:	87 95       	ror	r24
    1cba:	95 95       	asr	r25
    1cbc:	87 95       	ror	r24
    1cbe:	95 95       	asr	r25
    1cc0:	87 95       	ror	r24
    1cc2:	95 95       	asr	r25
    1cc4:	87 95       	ror	r24
    1cc6:	98 2f       	mov	r25, r24
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	49 2f       	mov	r20, r25
    1cce:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	ed 59       	subi	r30, 0x9D	; 157
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 81       	ld	r24, Z
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	80 72       	andi	r24, 0x20	; 32
    1ce0:	90 70       	andi	r25, 0x00	; 0
    1ce2:	95 95       	asr	r25
    1ce4:	87 95       	ror	r24
    1ce6:	95 95       	asr	r25
    1ce8:	87 95       	ror	r24
    1cea:	95 95       	asr	r25
    1cec:	87 95       	ror	r24
    1cee:	95 95       	asr	r25
    1cf0:	87 95       	ror	r24
    1cf2:	95 95       	asr	r25
    1cf4:	87 95       	ror	r24
    1cf6:	98 2f       	mov	r25, r24
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	49 2f       	mov	r20, r25
    1cfe:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1d02:	fe 01       	movw	r30, r28
    1d04:	ed 59       	subi	r30, 0x9D	; 157
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	80 74       	andi	r24, 0x40	; 64
    1d10:	90 70       	andi	r25, 0x00	; 0
    1d12:	08 2e       	mov	r0, r24
    1d14:	89 2f       	mov	r24, r25
    1d16:	00 0c       	add	r0, r0
    1d18:	88 1f       	adc	r24, r24
    1d1a:	99 0b       	sbc	r25, r25
    1d1c:	00 0c       	add	r0, r0
    1d1e:	88 1f       	adc	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	98 2f       	mov	r25, r24
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	62 e0       	ldi	r22, 0x02	; 2
    1d28:	49 2f       	mov	r20, r25
    1d2a:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1d2e:	fe 01       	movw	r30, r28
    1d30:	ed 59       	subi	r30, 0x9D	; 157
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	98 2f       	mov	r25, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	99 27       	eor	r25, r25
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	63 e0       	ldi	r22, 0x03	; 3
    1d42:	49 2f       	mov	r20, r25
    1d44:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ed 5b       	subi	r30, 0xBD	; 189
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a0 e8       	ldi	r26, 0x80	; 128
    1d54:	bf e3       	ldi	r27, 0x3F	; 63
    1d56:	80 83       	st	Z, r24
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	a2 83       	std	Z+2, r26	; 0x02
    1d5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5e:	8e 01       	movw	r16, r28
    1d60:	01 5c       	subi	r16, 0xC1	; 193
    1d62:	1f 4f       	sbci	r17, 0xFF	; 255
    1d64:	fe 01       	movw	r30, r28
    1d66:	ed 5b       	subi	r30, 0xBD	; 189
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	4a e7       	ldi	r20, 0x7A	; 122
    1d78:	53 e4       	ldi	r21, 0x43	; 67
    1d7a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	f8 01       	movw	r30, r16
    1d84:	80 83       	st	Z, r24
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	a2 83       	std	Z+2, r26	; 0x02
    1d8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	ff 96       	adiw	r30, 0x3f	; 63
    1d90:	60 81       	ld	r22, Z
    1d92:	71 81       	ldd	r23, Z+1	; 0x01
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e8       	ldi	r20, 0x80	; 128
    1d9e:	5f e3       	ldi	r21, 0x3F	; 63
    1da0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1da4:	88 23       	and	r24, r24
    1da6:	2c f4       	brge	.+10     	; 0x1db2 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	9e af       	std	Y+62, r25	; 0x3e
    1dae:	8d af       	std	Y+61, r24	; 0x3d
    1db0:	46 c0       	rjmp	.+140    	; 0x1e3e <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1db2:	fe 01       	movw	r30, r28
    1db4:	ff 96       	adiw	r30, 0x3f	; 63
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	64 f5       	brge	.+88     	; 0x1e26 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	fe 01       	movw	r30, r28
    1dd0:	ed 5b       	subi	r30, 0xBD	; 189
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9e af       	std	Y+62, r25	; 0x3e
    1dfa:	8d af       	std	Y+61, r24	; 0x3d
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <LCD_sendCommand+0x478>
    1dfe:	89 e1       	ldi	r24, 0x19	; 25
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9c af       	std	Y+60, r25	; 0x3c
    1e04:	8b af       	std	Y+59, r24	; 0x3b
    1e06:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e08:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_sendCommand+0x466>
    1e0e:	9c af       	std	Y+60, r25	; 0x3c
    1e10:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9e af       	std	Y+62, r25	; 0x3e
    1e1a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <LCD_sendCommand+0x45a>
    1e24:	16 c0       	rjmp	.+44     	; 0x1e52 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	fe 01       	movw	r30, r28
    1e28:	ff 96       	adiw	r30, 0x3f	; 63
    1e2a:	60 81       	ld	r22, Z
    1e2c:	71 81       	ldd	r23, Z+1	; 0x01
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9e af       	std	Y+62, r25	; 0x3e
    1e3c:	8d af       	std	Y+61, r24	; 0x3d
    1e3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e40:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e42:	9a af       	std	Y+58, r25	; 0x3a
    1e44:	89 af       	std	Y+57, r24	; 0x39
    1e46:	89 ad       	ldd	r24, Y+57	; 0x39
    1e48:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_sendCommand+0x4a6>
    1e4e:	9a af       	std	Y+58, r25	; 0x3a
    1e50:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e52:	82 e0       	ldi	r24, 0x02	; 2
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a0 e8       	ldi	r26, 0x80	; 128
    1e62:	bf e3       	ldi	r27, 0x3F	; 63
    1e64:	8d ab       	std	Y+53, r24	; 0x35
    1e66:	9e ab       	std	Y+54, r25	; 0x36
    1e68:	af ab       	std	Y+55, r26	; 0x37
    1e6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e70:	8f a9       	ldd	r24, Y+55	; 0x37
    1e72:	98 ad       	ldd	r25, Y+56	; 0x38
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a e7       	ldi	r20, 0x7A	; 122
    1e7a:	53 e4       	ldi	r21, 0x43	; 67
    1e7c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	89 ab       	std	Y+49, r24	; 0x31
    1e86:	9a ab       	std	Y+50, r25	; 0x32
    1e88:	ab ab       	std	Y+51, r26	; 0x33
    1e8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e90:	8b a9       	ldd	r24, Y+51	; 0x33
    1e92:	9c a9       	ldd	r25, Y+52	; 0x34
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <LCD_sendCommand+0x50a>
		__ticks = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	98 ab       	std	Y+48, r25	; 0x30
    1eaa:	8f a7       	std	Y+47, r24	; 0x2f
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1eae:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	4c f5       	brge	.+82     	; 0x1f18 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec8:	7e a9       	ldd	r23, Y+54	; 0x36
    1eca:	8f a9       	ldd	r24, Y+55	; 0x37
    1ecc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	98 ab       	std	Y+48, r25	; 0x30
    1eec:	8f a7       	std	Y+47, r24	; 0x2f
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <LCD_sendCommand+0x56a>
    1ef0:	89 e1       	ldi	r24, 0x19	; 25
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9e a7       	std	Y+46, r25	; 0x2e
    1ef6:	8d a7       	std	Y+45, r24	; 0x2d
    1ef8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1efa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_sendCommand+0x558>
    1f00:	9e a7       	std	Y+46, r25	; 0x2e
    1f02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f06:	98 a9       	ldd	r25, Y+48	; 0x30
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	98 ab       	std	Y+48, r25	; 0x30
    1f0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f10:	98 a9       	ldd	r25, Y+48	; 0x30
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <LCD_sendCommand+0x54c>
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	69 a9       	ldd	r22, Y+49	; 0x31
    1f1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f20:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	98 ab       	std	Y+48, r25	; 0x30
    1f2a:	8f a7       	std	Y+47, r24	; 0x2f
    1f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f30:	9c a7       	std	Y+44, r25	; 0x2c
    1f32:	8b a7       	std	Y+43, r24	; 0x2b
    1f34:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f36:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_sendCommand+0x594>
    1f3c:	9c a7       	std	Y+44, r25	; 0x2c
    1f3e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	61 e0       	ldi	r22, 0x01	; 1
    1f44:	41 e0       	ldi	r20, 0x01	; 1
    1f46:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a0 e8       	ldi	r26, 0x80	; 128
    1f50:	bf e3       	ldi	r27, 0x3F	; 63
    1f52:	8f a3       	std	Y+39, r24	; 0x27
    1f54:	98 a7       	std	Y+40, r25	; 0x28
    1f56:	a9 a7       	std	Y+41, r26	; 0x29
    1f58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f5c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4a e7       	ldi	r20, 0x7A	; 122
    1f68:	53 e4       	ldi	r21, 0x43	; 67
    1f6a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	8b a3       	std	Y+35, r24	; 0x23
    1f74:	9c a3       	std	Y+36, r25	; 0x24
    1f76:	ad a3       	std	Y+37, r26	; 0x25
    1f78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f80:	9e a1       	ldd	r25, Y+38	; 0x26
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9a a3       	std	Y+34, r25	; 0x22
    1f98:	89 a3       	std	Y+33, r24	; 0x21
    1f9a:	3f c0       	rjmp	.+126    	; 0x201a <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1f9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	4c f5       	brge	.+82     	; 0x2006 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e2       	ldi	r20, 0x20	; 32
    1fc2:	51 e4       	ldi	r21, 0x41	; 65
    1fc4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	9a a3       	std	Y+34, r25	; 0x22
    1fda:	89 a3       	std	Y+33, r24	; 0x21
    1fdc:	0f c0       	rjmp	.+30     	; 0x1ffc <LCD_sendCommand+0x658>
    1fde:	89 e1       	ldi	r24, 0x19	; 25
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	98 a3       	std	Y+32, r25	; 0x20
    1fe4:	8f 8f       	std	Y+31, r24	; 0x1f
    1fe6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fe8:	98 a1       	ldd	r25, Y+32	; 0x20
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_sendCommand+0x646>
    1fee:	98 a3       	std	Y+32, r25	; 0x20
    1ff0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	9a a3       	std	Y+34, r25	; 0x22
    1ffa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	69 f7       	brne	.-38     	; 0x1fde <LCD_sendCommand+0x63a>
    2004:	14 c0       	rjmp	.+40     	; 0x202e <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2006:	6b a1       	ldd	r22, Y+35	; 0x23
    2008:	7c a1       	ldd	r23, Y+36	; 0x24
    200a:	8d a1       	ldd	r24, Y+37	; 0x25
    200c:	9e a1       	ldd	r25, Y+38	; 0x26
    200e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9a a3       	std	Y+34, r25	; 0x22
    2018:	89 a3       	std	Y+33, r24	; 0x21
    201a:	89 a1       	ldd	r24, Y+33	; 0x21
    201c:	9a a1       	ldd	r25, Y+34	; 0x22
    201e:	9e 8f       	std	Y+30, r25	; 0x1e
    2020:	8d 8f       	std	Y+29, r24	; 0x1d
    2022:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2024:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_sendCommand+0x682>
    202a:	9e 8f       	std	Y+30, r25	; 0x1e
    202c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    202e:	fe 01       	movw	r30, r28
    2030:	ed 59       	subi	r30, 0x9D	; 157
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 81       	ld	r24, Z
    2036:	98 2f       	mov	r25, r24
    2038:	91 70       	andi	r25, 0x01	; 1
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	49 2f       	mov	r20, r25
    2040:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2044:	fe 01       	movw	r30, r28
    2046:	ed 59       	subi	r30, 0x9D	; 157
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	88 2f       	mov	r24, r24
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	82 70       	andi	r24, 0x02	; 2
    2052:	90 70       	andi	r25, 0x00	; 0
    2054:	95 95       	asr	r25
    2056:	87 95       	ror	r24
    2058:	98 2f       	mov	r25, r24
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	61 e0       	ldi	r22, 0x01	; 1
    205e:	49 2f       	mov	r20, r25
    2060:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2064:	fe 01       	movw	r30, r28
    2066:	ed 59       	subi	r30, 0x9D	; 157
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	80 81       	ld	r24, Z
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	84 70       	andi	r24, 0x04	; 4
    2072:	90 70       	andi	r25, 0x00	; 0
    2074:	95 95       	asr	r25
    2076:	87 95       	ror	r24
    2078:	95 95       	asr	r25
    207a:	87 95       	ror	r24
    207c:	98 2f       	mov	r25, r24
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	62 e0       	ldi	r22, 0x02	; 2
    2082:	49 2f       	mov	r20, r25
    2084:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2088:	fe 01       	movw	r30, r28
    208a:	ed 59       	subi	r30, 0x9D	; 157
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 81       	ld	r24, Z
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	88 70       	andi	r24, 0x08	; 8
    2096:	90 70       	andi	r25, 0x00	; 0
    2098:	95 95       	asr	r25
    209a:	87 95       	ror	r24
    209c:	95 95       	asr	r25
    209e:	87 95       	ror	r24
    20a0:	95 95       	asr	r25
    20a2:	87 95       	ror	r24
    20a4:	98 2f       	mov	r25, r24
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	63 e0       	ldi	r22, 0x03	; 3
    20aa:	49 2f       	mov	r20, r25
    20ac:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	a0 e8       	ldi	r26, 0x80	; 128
    20b6:	bf e3       	ldi	r27, 0x3F	; 63
    20b8:	89 8f       	std	Y+25, r24	; 0x19
    20ba:	9a 8f       	std	Y+26, r25	; 0x1a
    20bc:	ab 8f       	std	Y+27, r26	; 0x1b
    20be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c0:	69 8d       	ldd	r22, Y+25	; 0x19
    20c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a e7       	ldi	r20, 0x7A	; 122
    20ce:	53 e4       	ldi	r21, 0x43	; 67
    20d0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8d 8b       	std	Y+21, r24	; 0x15
    20da:	9e 8b       	std	Y+22, r25	; 0x16
    20dc:	af 8b       	std	Y+23, r26	; 0x17
    20de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20e0:	6d 89       	ldd	r22, Y+21	; 0x15
    20e2:	7e 89       	ldd	r23, Y+22	; 0x16
    20e4:	8f 89       	ldd	r24, Y+23	; 0x17
    20e6:	98 8d       	ldd	r25, Y+24	; 0x18
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    20f4:	88 23       	and	r24, r24
    20f6:	2c f4       	brge	.+10     	; 0x2102 <LCD_sendCommand+0x75e>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9c 8b       	std	Y+20, r25	; 0x14
    20fe:	8b 8b       	std	Y+19, r24	; 0x13
    2100:	3f c0       	rjmp	.+126    	; 0x2180 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2102:	6d 89       	ldd	r22, Y+21	; 0x15
    2104:	7e 89       	ldd	r23, Y+22	; 0x16
    2106:	8f 89       	ldd	r24, Y+23	; 0x17
    2108:	98 8d       	ldd	r25, Y+24	; 0x18
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2116:	18 16       	cp	r1, r24
    2118:	4c f5       	brge	.+82     	; 0x216c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211a:	69 8d       	ldd	r22, Y+25	; 0x19
    211c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    211e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2120:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e2       	ldi	r20, 0x20	; 32
    2128:	51 e4       	ldi	r21, 0x41	; 65
    212a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9c 8b       	std	Y+20, r25	; 0x14
    2140:	8b 8b       	std	Y+19, r24	; 0x13
    2142:	0f c0       	rjmp	.+30     	; 0x2162 <LCD_sendCommand+0x7be>
    2144:	89 e1       	ldi	r24, 0x19	; 25
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9a 8b       	std	Y+18, r25	; 0x12
    214a:	89 8b       	std	Y+17, r24	; 0x11
    214c:	89 89       	ldd	r24, Y+17	; 0x11
    214e:	9a 89       	ldd	r25, Y+18	; 0x12
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <LCD_sendCommand+0x7ac>
    2154:	9a 8b       	std	Y+18, r25	; 0x12
    2156:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2158:	8b 89       	ldd	r24, Y+19	; 0x13
    215a:	9c 89       	ldd	r25, Y+20	; 0x14
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	9c 8b       	std	Y+20, r25	; 0x14
    2160:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2162:	8b 89       	ldd	r24, Y+19	; 0x13
    2164:	9c 89       	ldd	r25, Y+20	; 0x14
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	69 f7       	brne	.-38     	; 0x2144 <LCD_sendCommand+0x7a0>
    216a:	14 c0       	rjmp	.+40     	; 0x2194 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216c:	6d 89       	ldd	r22, Y+21	; 0x15
    216e:	7e 89       	ldd	r23, Y+22	; 0x16
    2170:	8f 89       	ldd	r24, Y+23	; 0x17
    2172:	98 8d       	ldd	r25, Y+24	; 0x18
    2174:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9c 8b       	std	Y+20, r25	; 0x14
    217e:	8b 8b       	std	Y+19, r24	; 0x13
    2180:	8b 89       	ldd	r24, Y+19	; 0x13
    2182:	9c 89       	ldd	r25, Y+20	; 0x14
    2184:	98 8b       	std	Y+16, r25	; 0x10
    2186:	8f 87       	std	Y+15, r24	; 0x0f
    2188:	8f 85       	ldd	r24, Y+15	; 0x0f
    218a:	98 89       	ldd	r25, Y+16	; 0x10
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <LCD_sendCommand+0x7e8>
    2190:	98 8b       	std	Y+16, r25	; 0x10
    2192:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	61 e0       	ldi	r22, 0x01	; 1
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 e8       	ldi	r26, 0x80	; 128
    21a4:	bf e3       	ldi	r27, 0x3F	; 63
    21a6:	8b 87       	std	Y+11, r24	; 0x0b
    21a8:	9c 87       	std	Y+12, r25	; 0x0c
    21aa:	ad 87       	std	Y+13, r26	; 0x0d
    21ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a e7       	ldi	r20, 0x7A	; 122
    21bc:	53 e4       	ldi	r21, 0x43	; 67
    21be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8f 83       	std	Y+7, r24	; 0x07
    21c8:	98 87       	std	Y+8, r25	; 0x08
    21ca:	a9 87       	std	Y+9, r26	; 0x09
    21cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <LCD_sendCommand+0x84c>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
    21ee:	3f c0       	rjmp	.+126    	; 0x226e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	3f ef       	ldi	r19, 0xFF	; 255
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	57 e4       	ldi	r21, 0x47	; 71
    2200:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2204:	18 16       	cp	r1, r24
    2206:	4c f5       	brge	.+82     	; 0x225a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2208:	6b 85       	ldd	r22, Y+11	; 0x0b
    220a:	7c 85       	ldd	r23, Y+12	; 0x0c
    220c:	8d 85       	ldd	r24, Y+13	; 0x0d
    220e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e2       	ldi	r20, 0x20	; 32
    2216:	51 e4       	ldi	r21, 0x41	; 65
    2218:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	8d 83       	std	Y+5, r24	; 0x05
    2230:	0f c0       	rjmp	.+30     	; 0x2250 <LCD_sendCommand+0x8ac>
    2232:	89 e1       	ldi	r24, 0x19	; 25
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9c 83       	std	Y+4, r25	; 0x04
    2238:	8b 83       	std	Y+3, r24	; 0x03
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <LCD_sendCommand+0x89a>
    2242:	9c 83       	std	Y+4, r25	; 0x04
    2244:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	9e 81       	ldd	r25, Y+6	; 0x06
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	69 f7       	brne	.-38     	; 0x2232 <LCD_sendCommand+0x88e>
    2258:	14 c0       	rjmp	.+40     	; 0x2282 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225a:	6f 81       	ldd	r22, Y+7	; 0x07
    225c:	78 85       	ldd	r23, Y+8	; 0x08
    225e:	89 85       	ldd	r24, Y+9	; 0x09
    2260:	9a 85       	ldd	r25, Y+10	; 0x0a
    2262:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_sendCommand+0x8d6>
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2282:	cd 59       	subi	r28, 0x9D	; 157
    2284:	df 4f       	sbci	r29, 0xFF	; 255
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	08 95       	ret

0000229a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	c3 56       	subi	r28, 0x63	; 99
    22a8:	d0 40       	sbci	r29, 0x00	; 0
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	fe 01       	movw	r30, r28
    22b6:	ed 59       	subi	r30, 0x9D	; 157
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    22c6:	fe 01       	movw	r30, r28
    22c8:	e1 5a       	subi	r30, 0xA1	; 161
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 e8       	ldi	r26, 0x80	; 128
    22d2:	bf e3       	ldi	r27, 0x3F	; 63
    22d4:	80 83       	st	Z, r24
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	a2 83       	std	Z+2, r26	; 0x02
    22da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	8e 01       	movw	r16, r28
    22de:	05 5a       	subi	r16, 0xA5	; 165
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	fe 01       	movw	r30, r28
    22e4:	e1 5a       	subi	r30, 0xA1	; 161
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a e7       	ldi	r20, 0x7A	; 122
    22f6:	53 e4       	ldi	r21, 0x43	; 67
    22f8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	f8 01       	movw	r30, r16
    2302:	80 83       	st	Z, r24
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	a2 83       	std	Z+2, r26	; 0x02
    2308:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    230a:	fe 01       	movw	r30, r28
    230c:	e5 5a       	subi	r30, 0xA5	; 165
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	60 81       	ld	r22, Z
    2312:	71 81       	ldd	r23, Z+1	; 0x01
    2314:	82 81       	ldd	r24, Z+2	; 0x02
    2316:	93 81       	ldd	r25, Z+3	; 0x03
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	44 f4       	brge	.+16     	; 0x2338 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2328:	fe 01       	movw	r30, r28
    232a:	e7 5a       	subi	r30, 0xA7	; 167
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
    2336:	64 c0       	rjmp	.+200    	; 0x2400 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2338:	fe 01       	movw	r30, r28
    233a:	e5 5a       	subi	r30, 0xA5	; 165
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	0c f0       	brlt	.+2      	; 0x2358 <LCD_displayCharacter+0xbe>
    2356:	43 c0       	rjmp	.+134    	; 0x23de <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2358:	fe 01       	movw	r30, r28
    235a:	e1 5a       	subi	r30, 0xA1	; 161
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e2       	ldi	r20, 0x20	; 32
    236c:	51 e4       	ldi	r21, 0x41	; 65
    236e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8e 01       	movw	r16, r28
    2378:	07 5a       	subi	r16, 0xA7	; 167
    237a:	1f 4f       	sbci	r17, 0xFF	; 255
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	f8 01       	movw	r30, r16
    238a:	91 83       	std	Z+1, r25	; 0x01
    238c:	80 83       	st	Z, r24
    238e:	1f c0       	rjmp	.+62     	; 0x23ce <LCD_displayCharacter+0x134>
    2390:	fe 01       	movw	r30, r28
    2392:	e9 5a       	subi	r30, 0xA9	; 169
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	89 e1       	ldi	r24, 0x19	; 25
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
    239e:	fe 01       	movw	r30, r28
    23a0:	e9 5a       	subi	r30, 0xA9	; 169
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_displayCharacter+0x10e>
    23ac:	fe 01       	movw	r30, r28
    23ae:	e9 5a       	subi	r30, 0xA9	; 169
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	de 01       	movw	r26, r28
    23b8:	a7 5a       	subi	r26, 0xA7	; 167
    23ba:	bf 4f       	sbci	r27, 0xFF	; 255
    23bc:	fe 01       	movw	r30, r28
    23be:	e7 5a       	subi	r30, 0xA7	; 167
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	11 96       	adiw	r26, 0x01	; 1
    23ca:	9c 93       	st	X, r25
    23cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	fe 01       	movw	r30, r28
    23d0:	e7 5a       	subi	r30, 0xA7	; 167
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	d1 f6       	brne	.-76     	; 0x2390 <LCD_displayCharacter+0xf6>
    23dc:	27 c0       	rjmp	.+78     	; 0x242c <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23de:	8e 01       	movw	r16, r28
    23e0:	07 5a       	subi	r16, 0xA7	; 167
    23e2:	1f 4f       	sbci	r17, 0xFF	; 255
    23e4:	fe 01       	movw	r30, r28
    23e6:	e5 5a       	subi	r30, 0xA5	; 165
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	f8 01       	movw	r30, r16
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	80 83       	st	Z, r24
    2400:	de 01       	movw	r26, r28
    2402:	ab 5a       	subi	r26, 0xAB	; 171
    2404:	bf 4f       	sbci	r27, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	e7 5a       	subi	r30, 0xA7	; 167
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	8d 93       	st	X+, r24
    2412:	9c 93       	st	X, r25
    2414:	fe 01       	movw	r30, r28
    2416:	eb 5a       	subi	r30, 0xAB	; 171
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_displayCharacter+0x184>
    2422:	fe 01       	movw	r30, r28
    2424:	eb 5a       	subi	r30, 0xAB	; 171
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	61 e0       	ldi	r22, 0x01	; 1
    2430:	41 e0       	ldi	r20, 0x01	; 1
    2432:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    2436:	fe 01       	movw	r30, r28
    2438:	ef 5a       	subi	r30, 0xAF	; 175
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	a0 e8       	ldi	r26, 0x80	; 128
    2442:	bf e3       	ldi	r27, 0x3F	; 63
    2444:	80 83       	st	Z, r24
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	a2 83       	std	Z+2, r26	; 0x02
    244a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244c:	8e 01       	movw	r16, r28
    244e:	03 5b       	subi	r16, 0xB3	; 179
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	fe 01       	movw	r30, r28
    2454:	ef 5a       	subi	r30, 0xAF	; 175
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	60 81       	ld	r22, Z
    245a:	71 81       	ldd	r23, Z+1	; 0x01
    245c:	82 81       	ldd	r24, Z+2	; 0x02
    245e:	93 81       	ldd	r25, Z+3	; 0x03
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	4a e7       	ldi	r20, 0x7A	; 122
    2466:	53 e4       	ldi	r21, 0x43	; 67
    2468:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	f8 01       	movw	r30, r16
    2472:	80 83       	st	Z, r24
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	a2 83       	std	Z+2, r26	; 0x02
    2478:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    247a:	fe 01       	movw	r30, r28
    247c:	e3 5b       	subi	r30, 0xB3	; 179
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2494:	88 23       	and	r24, r24
    2496:	44 f4       	brge	.+16     	; 0x24a8 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2498:	fe 01       	movw	r30, r28
    249a:	e5 5b       	subi	r30, 0xB5	; 181
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	91 83       	std	Z+1, r25	; 0x01
    24a4:	80 83       	st	Z, r24
    24a6:	64 c0       	rjmp	.+200    	; 0x2570 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    24a8:	fe 01       	movw	r30, r28
    24aa:	e3 5b       	subi	r30, 0xB3	; 179
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	60 81       	ld	r22, Z
    24b0:	71 81       	ldd	r23, Z+1	; 0x01
    24b2:	82 81       	ldd	r24, Z+2	; 0x02
    24b4:	93 81       	ldd	r25, Z+3	; 0x03
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	3f ef       	ldi	r19, 0xFF	; 255
    24ba:	4f e7       	ldi	r20, 0x7F	; 127
    24bc:	57 e4       	ldi	r21, 0x47	; 71
    24be:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    24c2:	18 16       	cp	r1, r24
    24c4:	0c f0       	brlt	.+2      	; 0x24c8 <LCD_displayCharacter+0x22e>
    24c6:	43 c0       	rjmp	.+134    	; 0x254e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c8:	fe 01       	movw	r30, r28
    24ca:	ef 5a       	subi	r30, 0xAF	; 175
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	60 81       	ld	r22, Z
    24d0:	71 81       	ldd	r23, Z+1	; 0x01
    24d2:	82 81       	ldd	r24, Z+2	; 0x02
    24d4:	93 81       	ldd	r25, Z+3	; 0x03
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e2       	ldi	r20, 0x20	; 32
    24dc:	51 e4       	ldi	r21, 0x41	; 65
    24de:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	8e 01       	movw	r16, r28
    24e8:	05 5b       	subi	r16, 0xB5	; 181
    24ea:	1f 4f       	sbci	r17, 0xFF	; 255
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	f8 01       	movw	r30, r16
    24fa:	91 83       	std	Z+1, r25	; 0x01
    24fc:	80 83       	st	Z, r24
    24fe:	1f c0       	rjmp	.+62     	; 0x253e <LCD_displayCharacter+0x2a4>
    2500:	fe 01       	movw	r30, r28
    2502:	e7 5b       	subi	r30, 0xB7	; 183
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	89 e1       	ldi	r24, 0x19	; 25
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	80 83       	st	Z, r24
    250e:	fe 01       	movw	r30, r28
    2510:	e7 5b       	subi	r30, 0xB7	; 183
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	80 81       	ld	r24, Z
    2516:	91 81       	ldd	r25, Z+1	; 0x01
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_displayCharacter+0x27e>
    251c:	fe 01       	movw	r30, r28
    251e:	e7 5b       	subi	r30, 0xB7	; 183
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2526:	de 01       	movw	r26, r28
    2528:	a5 5b       	subi	r26, 0xB5	; 181
    252a:	bf 4f       	sbci	r27, 0xFF	; 255
    252c:	fe 01       	movw	r30, r28
    252e:	e5 5b       	subi	r30, 0xB5	; 181
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	11 96       	adiw	r26, 0x01	; 1
    253a:	9c 93       	st	X, r25
    253c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253e:	fe 01       	movw	r30, r28
    2540:	e5 5b       	subi	r30, 0xB5	; 181
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	d1 f6       	brne	.-76     	; 0x2500 <LCD_displayCharacter+0x266>
    254c:	27 c0       	rjmp	.+78     	; 0x259c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254e:	8e 01       	movw	r16, r28
    2550:	05 5b       	subi	r16, 0xB5	; 181
    2552:	1f 4f       	sbci	r17, 0xFF	; 255
    2554:	fe 01       	movw	r30, r28
    2556:	e3 5b       	subi	r30, 0xB3	; 179
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	60 81       	ld	r22, Z
    255c:	71 81       	ldd	r23, Z+1	; 0x01
    255e:	82 81       	ldd	r24, Z+2	; 0x02
    2560:	93 81       	ldd	r25, Z+3	; 0x03
    2562:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	f8 01       	movw	r30, r16
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	80 83       	st	Z, r24
    2570:	de 01       	movw	r26, r28
    2572:	a9 5b       	subi	r26, 0xB9	; 185
    2574:	bf 4f       	sbci	r27, 0xFF	; 255
    2576:	fe 01       	movw	r30, r28
    2578:	e5 5b       	subi	r30, 0xB5	; 181
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	91 81       	ldd	r25, Z+1	; 0x01
    2580:	8d 93       	st	X+, r24
    2582:	9c 93       	st	X, r25
    2584:	fe 01       	movw	r30, r28
    2586:	e9 5b       	subi	r30, 0xB9	; 185
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <LCD_displayCharacter+0x2f4>
    2592:	fe 01       	movw	r30, r28
    2594:	e9 5b       	subi	r30, 0xB9	; 185
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    259c:	fe 01       	movw	r30, r28
    259e:	ed 59       	subi	r30, 0x9D	; 157
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	80 71       	andi	r24, 0x10	; 16
    25aa:	90 70       	andi	r25, 0x00	; 0
    25ac:	95 95       	asr	r25
    25ae:	87 95       	ror	r24
    25b0:	95 95       	asr	r25
    25b2:	87 95       	ror	r24
    25b4:	95 95       	asr	r25
    25b6:	87 95       	ror	r24
    25b8:	95 95       	asr	r25
    25ba:	87 95       	ror	r24
    25bc:	98 2f       	mov	r25, r24
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	60 e0       	ldi	r22, 0x00	; 0
    25c2:	49 2f       	mov	r20, r25
    25c4:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    25c8:	fe 01       	movw	r30, r28
    25ca:	ed 59       	subi	r30, 0x9D	; 157
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	80 72       	andi	r24, 0x20	; 32
    25d6:	90 70       	andi	r25, 0x00	; 0
    25d8:	95 95       	asr	r25
    25da:	87 95       	ror	r24
    25dc:	95 95       	asr	r25
    25de:	87 95       	ror	r24
    25e0:	95 95       	asr	r25
    25e2:	87 95       	ror	r24
    25e4:	95 95       	asr	r25
    25e6:	87 95       	ror	r24
    25e8:	95 95       	asr	r25
    25ea:	87 95       	ror	r24
    25ec:	98 2f       	mov	r25, r24
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	49 2f       	mov	r20, r25
    25f4:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    25f8:	fe 01       	movw	r30, r28
    25fa:	ed 59       	subi	r30, 0x9D	; 157
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	80 74       	andi	r24, 0x40	; 64
    2606:	90 70       	andi	r25, 0x00	; 0
    2608:	08 2e       	mov	r0, r24
    260a:	89 2f       	mov	r24, r25
    260c:	00 0c       	add	r0, r0
    260e:	88 1f       	adc	r24, r24
    2610:	99 0b       	sbc	r25, r25
    2612:	00 0c       	add	r0, r0
    2614:	88 1f       	adc	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	98 2f       	mov	r25, r24
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	49 2f       	mov	r20, r25
    2620:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2624:	fe 01       	movw	r30, r28
    2626:	ed 59       	subi	r30, 0x9D	; 157
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 81       	ld	r24, Z
    262c:	98 2f       	mov	r25, r24
    262e:	99 1f       	adc	r25, r25
    2630:	99 27       	eor	r25, r25
    2632:	99 1f       	adc	r25, r25
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	63 e0       	ldi	r22, 0x03	; 3
    2638:	49 2f       	mov	r20, r25
    263a:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    263e:	fe 01       	movw	r30, r28
    2640:	ed 5b       	subi	r30, 0xBD	; 189
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	a0 e8       	ldi	r26, 0x80	; 128
    264a:	bf e3       	ldi	r27, 0x3F	; 63
    264c:	80 83       	st	Z, r24
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	a2 83       	std	Z+2, r26	; 0x02
    2652:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2654:	8e 01       	movw	r16, r28
    2656:	01 5c       	subi	r16, 0xC1	; 193
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	fe 01       	movw	r30, r28
    265c:	ed 5b       	subi	r30, 0xBD	; 189
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a e7       	ldi	r20, 0x7A	; 122
    266e:	53 e4       	ldi	r21, 0x43	; 67
    2670:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	f8 01       	movw	r30, r16
    267a:	80 83       	st	Z, r24
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	a2 83       	std	Z+2, r26	; 0x02
    2680:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2682:	fe 01       	movw	r30, r28
    2684:	ff 96       	adiw	r30, 0x3f	; 63
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e8       	ldi	r20, 0x80	; 128
    2694:	5f e3       	ldi	r21, 0x3F	; 63
    2696:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    269a:	88 23       	and	r24, r24
    269c:	2c f4       	brge	.+10     	; 0x26a8 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9e af       	std	Y+62, r25	; 0x3e
    26a4:	8d af       	std	Y+61, r24	; 0x3d
    26a6:	46 c0       	rjmp	.+140    	; 0x2734 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    26a8:	fe 01       	movw	r30, r28
    26aa:	ff 96       	adiw	r30, 0x3f	; 63
    26ac:	60 81       	ld	r22, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	3f ef       	ldi	r19, 0xFF	; 255
    26b8:	4f e7       	ldi	r20, 0x7F	; 127
    26ba:	57 e4       	ldi	r21, 0x47	; 71
    26bc:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    26c0:	18 16       	cp	r1, r24
    26c2:	64 f5       	brge	.+88     	; 0x271c <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c4:	fe 01       	movw	r30, r28
    26c6:	ed 5b       	subi	r30, 0xBD	; 189
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e2       	ldi	r20, 0x20	; 32
    26d8:	51 e4       	ldi	r21, 0x41	; 65
    26da:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	bc 01       	movw	r22, r24
    26e4:	cd 01       	movw	r24, r26
    26e6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9e af       	std	Y+62, r25	; 0x3e
    26f0:	8d af       	std	Y+61, r24	; 0x3d
    26f2:	0f c0       	rjmp	.+30     	; 0x2712 <LCD_displayCharacter+0x478>
    26f4:	89 e1       	ldi	r24, 0x19	; 25
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	9c af       	std	Y+60, r25	; 0x3c
    26fa:	8b af       	std	Y+59, r24	; 0x3b
    26fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    26fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_displayCharacter+0x466>
    2704:	9c af       	std	Y+60, r25	; 0x3c
    2706:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	8d ad       	ldd	r24, Y+61	; 0x3d
    270a:	9e ad       	ldd	r25, Y+62	; 0x3e
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	9e af       	std	Y+62, r25	; 0x3e
    2710:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2712:	8d ad       	ldd	r24, Y+61	; 0x3d
    2714:	9e ad       	ldd	r25, Y+62	; 0x3e
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	69 f7       	brne	.-38     	; 0x26f4 <LCD_displayCharacter+0x45a>
    271a:	16 c0       	rjmp	.+44     	; 0x2748 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271c:	fe 01       	movw	r30, r28
    271e:	ff 96       	adiw	r30, 0x3f	; 63
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	9e af       	std	Y+62, r25	; 0x3e
    2732:	8d af       	std	Y+61, r24	; 0x3d
    2734:	8d ad       	ldd	r24, Y+61	; 0x3d
    2736:	9e ad       	ldd	r25, Y+62	; 0x3e
    2738:	9a af       	std	Y+58, r25	; 0x3a
    273a:	89 af       	std	Y+57, r24	; 0x39
    273c:	89 ad       	ldd	r24, Y+57	; 0x39
    273e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_displayCharacter+0x4a6>
    2744:	9a af       	std	Y+58, r25	; 0x3a
    2746:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2748:	82 e0       	ldi	r24, 0x02	; 2
    274a:	61 e0       	ldi	r22, 0x01	; 1
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	a0 e8       	ldi	r26, 0x80	; 128
    2758:	bf e3       	ldi	r27, 0x3F	; 63
    275a:	8d ab       	std	Y+53, r24	; 0x35
    275c:	9e ab       	std	Y+54, r25	; 0x36
    275e:	af ab       	std	Y+55, r26	; 0x37
    2760:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2762:	6d a9       	ldd	r22, Y+53	; 0x35
    2764:	7e a9       	ldd	r23, Y+54	; 0x36
    2766:	8f a9       	ldd	r24, Y+55	; 0x37
    2768:	98 ad       	ldd	r25, Y+56	; 0x38
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	4a e7       	ldi	r20, 0x7A	; 122
    2770:	53 e4       	ldi	r21, 0x43	; 67
    2772:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	89 ab       	std	Y+49, r24	; 0x31
    277c:	9a ab       	std	Y+50, r25	; 0x32
    277e:	ab ab       	std	Y+51, r26	; 0x33
    2780:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2782:	69 a9       	ldd	r22, Y+49	; 0x31
    2784:	7a a9       	ldd	r23, Y+50	; 0x32
    2786:	8b a9       	ldd	r24, Y+51	; 0x33
    2788:	9c a9       	ldd	r25, Y+52	; 0x34
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e8       	ldi	r20, 0x80	; 128
    2790:	5f e3       	ldi	r21, 0x3F	; 63
    2792:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2796:	88 23       	and	r24, r24
    2798:	2c f4       	brge	.+10     	; 0x27a4 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	98 ab       	std	Y+48, r25	; 0x30
    27a0:	8f a7       	std	Y+47, r24	; 0x2f
    27a2:	3f c0       	rjmp	.+126    	; 0x2822 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    27a4:	69 a9       	ldd	r22, Y+49	; 0x31
    27a6:	7a a9       	ldd	r23, Y+50	; 0x32
    27a8:	8b a9       	ldd	r24, Y+51	; 0x33
    27aa:	9c a9       	ldd	r25, Y+52	; 0x34
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    27b8:	18 16       	cp	r1, r24
    27ba:	4c f5       	brge	.+82     	; 0x280e <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27bc:	6d a9       	ldd	r22, Y+53	; 0x35
    27be:	7e a9       	ldd	r23, Y+54	; 0x36
    27c0:	8f a9       	ldd	r24, Y+55	; 0x37
    27c2:	98 ad       	ldd	r25, Y+56	; 0x38
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e2       	ldi	r20, 0x20	; 32
    27ca:	51 e4       	ldi	r21, 0x41	; 65
    27cc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	98 ab       	std	Y+48, r25	; 0x30
    27e2:	8f a7       	std	Y+47, r24	; 0x2f
    27e4:	0f c0       	rjmp	.+30     	; 0x2804 <LCD_displayCharacter+0x56a>
    27e6:	89 e1       	ldi	r24, 0x19	; 25
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9e a7       	std	Y+46, r25	; 0x2e
    27ec:	8d a7       	std	Y+45, r24	; 0x2d
    27ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    27f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <LCD_displayCharacter+0x558>
    27f6:	9e a7       	std	Y+46, r25	; 0x2e
    27f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    27fc:	98 a9       	ldd	r25, Y+48	; 0x30
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	98 ab       	std	Y+48, r25	; 0x30
    2802:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2804:	8f a5       	ldd	r24, Y+47	; 0x2f
    2806:	98 a9       	ldd	r25, Y+48	; 0x30
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	69 f7       	brne	.-38     	; 0x27e6 <LCD_displayCharacter+0x54c>
    280c:	14 c0       	rjmp	.+40     	; 0x2836 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280e:	69 a9       	ldd	r22, Y+49	; 0x31
    2810:	7a a9       	ldd	r23, Y+50	; 0x32
    2812:	8b a9       	ldd	r24, Y+51	; 0x33
    2814:	9c a9       	ldd	r25, Y+52	; 0x34
    2816:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	98 ab       	std	Y+48, r25	; 0x30
    2820:	8f a7       	std	Y+47, r24	; 0x2f
    2822:	8f a5       	ldd	r24, Y+47	; 0x2f
    2824:	98 a9       	ldd	r25, Y+48	; 0x30
    2826:	9c a7       	std	Y+44, r25	; 0x2c
    2828:	8b a7       	std	Y+43, r24	; 0x2b
    282a:	8b a5       	ldd	r24, Y+43	; 0x2b
    282c:	9c a5       	ldd	r25, Y+44	; 0x2c
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_displayCharacter+0x594>
    2832:	9c a7       	std	Y+44, r25	; 0x2c
    2834:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	61 e0       	ldi	r22, 0x01	; 1
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	a0 e8       	ldi	r26, 0x80	; 128
    2846:	bf e3       	ldi	r27, 0x3F	; 63
    2848:	8f a3       	std	Y+39, r24	; 0x27
    284a:	98 a7       	std	Y+40, r25	; 0x28
    284c:	a9 a7       	std	Y+41, r26	; 0x29
    284e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2850:	6f a1       	ldd	r22, Y+39	; 0x27
    2852:	78 a5       	ldd	r23, Y+40	; 0x28
    2854:	89 a5       	ldd	r24, Y+41	; 0x29
    2856:	9a a5       	ldd	r25, Y+42	; 0x2a
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	4a e7       	ldi	r20, 0x7A	; 122
    285e:	53 e4       	ldi	r21, 0x43	; 67
    2860:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	8b a3       	std	Y+35, r24	; 0x23
    286a:	9c a3       	std	Y+36, r25	; 0x24
    286c:	ad a3       	std	Y+37, r26	; 0x25
    286e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2870:	6b a1       	ldd	r22, Y+35	; 0x23
    2872:	7c a1       	ldd	r23, Y+36	; 0x24
    2874:	8d a1       	ldd	r24, Y+37	; 0x25
    2876:	9e a1       	ldd	r25, Y+38	; 0x26
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e8       	ldi	r20, 0x80	; 128
    287e:	5f e3       	ldi	r21, 0x3F	; 63
    2880:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2884:	88 23       	and	r24, r24
    2886:	2c f4       	brge	.+10     	; 0x2892 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	9a a3       	std	Y+34, r25	; 0x22
    288e:	89 a3       	std	Y+33, r24	; 0x21
    2890:	3f c0       	rjmp	.+126    	; 0x2910 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2892:	6b a1       	ldd	r22, Y+35	; 0x23
    2894:	7c a1       	ldd	r23, Y+36	; 0x24
    2896:	8d a1       	ldd	r24, Y+37	; 0x25
    2898:	9e a1       	ldd	r25, Y+38	; 0x26
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	3f ef       	ldi	r19, 0xFF	; 255
    289e:	4f e7       	ldi	r20, 0x7F	; 127
    28a0:	57 e4       	ldi	r21, 0x47	; 71
    28a2:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    28a6:	18 16       	cp	r1, r24
    28a8:	4c f5       	brge	.+82     	; 0x28fc <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28aa:	6f a1       	ldd	r22, Y+39	; 0x27
    28ac:	78 a5       	ldd	r23, Y+40	; 0x28
    28ae:	89 a5       	ldd	r24, Y+41	; 0x29
    28b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e2       	ldi	r20, 0x20	; 32
    28b8:	51 e4       	ldi	r21, 0x41	; 65
    28ba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	9a a3       	std	Y+34, r25	; 0x22
    28d0:	89 a3       	std	Y+33, r24	; 0x21
    28d2:	0f c0       	rjmp	.+30     	; 0x28f2 <LCD_displayCharacter+0x658>
    28d4:	89 e1       	ldi	r24, 0x19	; 25
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	98 a3       	std	Y+32, r25	; 0x20
    28da:	8f 8f       	std	Y+31, r24	; 0x1f
    28dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28de:	98 a1       	ldd	r25, Y+32	; 0x20
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <LCD_displayCharacter+0x646>
    28e4:	98 a3       	std	Y+32, r25	; 0x20
    28e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e8:	89 a1       	ldd	r24, Y+33	; 0x21
    28ea:	9a a1       	ldd	r25, Y+34	; 0x22
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	9a a3       	std	Y+34, r25	; 0x22
    28f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f2:	89 a1       	ldd	r24, Y+33	; 0x21
    28f4:	9a a1       	ldd	r25, Y+34	; 0x22
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	69 f7       	brne	.-38     	; 0x28d4 <LCD_displayCharacter+0x63a>
    28fa:	14 c0       	rjmp	.+40     	; 0x2924 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fc:	6b a1       	ldd	r22, Y+35	; 0x23
    28fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2900:	8d a1       	ldd	r24, Y+37	; 0x25
    2902:	9e a1       	ldd	r25, Y+38	; 0x26
    2904:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	9a a3       	std	Y+34, r25	; 0x22
    290e:	89 a3       	std	Y+33, r24	; 0x21
    2910:	89 a1       	ldd	r24, Y+33	; 0x21
    2912:	9a a1       	ldd	r25, Y+34	; 0x22
    2914:	9e 8f       	std	Y+30, r25	; 0x1e
    2916:	8d 8f       	std	Y+29, r24	; 0x1d
    2918:	8d 8d       	ldd	r24, Y+29	; 0x1d
    291a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <LCD_displayCharacter+0x682>
    2920:	9e 8f       	std	Y+30, r25	; 0x1e
    2922:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2924:	fe 01       	movw	r30, r28
    2926:	ed 59       	subi	r30, 0x9D	; 157
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	80 81       	ld	r24, Z
    292c:	98 2f       	mov	r25, r24
    292e:	91 70       	andi	r25, 0x01	; 1
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	49 2f       	mov	r20, r25
    2936:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    293a:	fe 01       	movw	r30, r28
    293c:	ed 59       	subi	r30, 0x9D	; 157
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	88 2f       	mov	r24, r24
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	82 70       	andi	r24, 0x02	; 2
    2948:	90 70       	andi	r25, 0x00	; 0
    294a:	95 95       	asr	r25
    294c:	87 95       	ror	r24
    294e:	98 2f       	mov	r25, r24
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	61 e0       	ldi	r22, 0x01	; 1
    2954:	49 2f       	mov	r20, r25
    2956:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    295a:	fe 01       	movw	r30, r28
    295c:	ed 59       	subi	r30, 0x9D	; 157
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	84 70       	andi	r24, 0x04	; 4
    2968:	90 70       	andi	r25, 0x00	; 0
    296a:	95 95       	asr	r25
    296c:	87 95       	ror	r24
    296e:	95 95       	asr	r25
    2970:	87 95       	ror	r24
    2972:	98 2f       	mov	r25, r24
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	62 e0       	ldi	r22, 0x02	; 2
    2978:	49 2f       	mov	r20, r25
    297a:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    297e:	fe 01       	movw	r30, r28
    2980:	ed 59       	subi	r30, 0x9D	; 157
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	80 81       	ld	r24, Z
    2986:	88 2f       	mov	r24, r24
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	88 70       	andi	r24, 0x08	; 8
    298c:	90 70       	andi	r25, 0x00	; 0
    298e:	95 95       	asr	r25
    2990:	87 95       	ror	r24
    2992:	95 95       	asr	r25
    2994:	87 95       	ror	r24
    2996:	95 95       	asr	r25
    2998:	87 95       	ror	r24
    299a:	98 2f       	mov	r25, r24
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	63 e0       	ldi	r22, 0x03	; 3
    29a0:	49 2f       	mov	r20, r25
    29a2:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	a0 e8       	ldi	r26, 0x80	; 128
    29ac:	bf e3       	ldi	r27, 0x3F	; 63
    29ae:	89 8f       	std	Y+25, r24	; 0x19
    29b0:	9a 8f       	std	Y+26, r25	; 0x1a
    29b2:	ab 8f       	std	Y+27, r26	; 0x1b
    29b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b6:	69 8d       	ldd	r22, Y+25	; 0x19
    29b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a e7       	ldi	r20, 0x7A	; 122
    29c4:	53 e4       	ldi	r21, 0x43	; 67
    29c6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	8d 8b       	std	Y+21, r24	; 0x15
    29d0:	9e 8b       	std	Y+22, r25	; 0x16
    29d2:	af 8b       	std	Y+23, r26	; 0x17
    29d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29d6:	6d 89       	ldd	r22, Y+21	; 0x15
    29d8:	7e 89       	ldd	r23, Y+22	; 0x16
    29da:	8f 89       	ldd	r24, Y+23	; 0x17
    29dc:	98 8d       	ldd	r25, Y+24	; 0x18
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9c 8b       	std	Y+20, r25	; 0x14
    29f4:	8b 8b       	std	Y+19, r24	; 0x13
    29f6:	3f c0       	rjmp	.+126    	; 0x2a76 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    29f8:	6d 89       	ldd	r22, Y+21	; 0x15
    29fa:	7e 89       	ldd	r23, Y+22	; 0x16
    29fc:	8f 89       	ldd	r24, Y+23	; 0x17
    29fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	57 e4       	ldi	r21, 0x47	; 71
    2a08:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2a0c:	18 16       	cp	r1, r24
    2a0e:	4c f5       	brge	.+82     	; 0x2a62 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a10:	69 8d       	ldd	r22, Y+25	; 0x19
    2a12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e2       	ldi	r20, 0x20	; 32
    2a1e:	51 e4       	ldi	r21, 0x41	; 65
    2a20:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9c 8b       	std	Y+20, r25	; 0x14
    2a36:	8b 8b       	std	Y+19, r24	; 0x13
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <LCD_displayCharacter+0x7be>
    2a3a:	89 e1       	ldi	r24, 0x19	; 25
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9a 8b       	std	Y+18, r25	; 0x12
    2a40:	89 8b       	std	Y+17, r24	; 0x11
    2a42:	89 89       	ldd	r24, Y+17	; 0x11
    2a44:	9a 89       	ldd	r25, Y+18	; 0x12
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <LCD_displayCharacter+0x7ac>
    2a4a:	9a 8b       	std	Y+18, r25	; 0x12
    2a4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a50:	9c 89       	ldd	r25, Y+20	; 0x14
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	9c 8b       	std	Y+20, r25	; 0x14
    2a56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <LCD_displayCharacter+0x7a0>
    2a60:	14 c0       	rjmp	.+40     	; 0x2a8a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	6d 89       	ldd	r22, Y+21	; 0x15
    2a64:	7e 89       	ldd	r23, Y+22	; 0x16
    2a66:	8f 89       	ldd	r24, Y+23	; 0x17
    2a68:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9c 8b       	std	Y+20, r25	; 0x14
    2a74:	8b 8b       	std	Y+19, r24	; 0x13
    2a76:	8b 89       	ldd	r24, Y+19	; 0x13
    2a78:	9c 89       	ldd	r25, Y+20	; 0x14
    2a7a:	98 8b       	std	Y+16, r25	; 0x10
    2a7c:	8f 87       	std	Y+15, r24	; 0x0f
    2a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a80:	98 89       	ldd	r25, Y+16	; 0x10
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <LCD_displayCharacter+0x7e8>
    2a86:	98 8b       	std	Y+16, r25	; 0x10
    2a88:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a8a:	82 e0       	ldi	r24, 0x02	; 2
    2a8c:	61 e0       	ldi	r22, 0x01	; 1
    2a8e:	40 e0       	ldi	r20, 0x00	; 0
    2a90:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePin>
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	a0 e8       	ldi	r26, 0x80	; 128
    2a9a:	bf e3       	ldi	r27, 0x3F	; 63
    2a9c:	8b 87       	std	Y+11, r24	; 0x0b
    2a9e:	9c 87       	std	Y+12, r25	; 0x0c
    2aa0:	ad 87       	std	Y+13, r26	; 0x0d
    2aa2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	4a e7       	ldi	r20, 0x7A	; 122
    2ab2:	53 e4       	ldi	r21, 0x43	; 67
    2ab4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	8f 83       	std	Y+7, r24	; 0x07
    2abe:	98 87       	std	Y+8, r25	; 0x08
    2ac0:	a9 87       	std	Y+9, r26	; 0x09
    2ac2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac6:	78 85       	ldd	r23, Y+8	; 0x08
    2ac8:	89 85       	ldd	r24, Y+9	; 0x09
    2aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e8       	ldi	r20, 0x80	; 128
    2ad2:	5f e3       	ldi	r21, 0x3F	; 63
    2ad4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2ad8:	88 23       	and	r24, r24
    2ada:	2c f4       	brge	.+10     	; 0x2ae6 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9e 83       	std	Y+6, r25	; 0x06
    2ae2:	8d 83       	std	Y+5, r24	; 0x05
    2ae4:	3f c0       	rjmp	.+126    	; 0x2b64 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae8:	78 85       	ldd	r23, Y+8	; 0x08
    2aea:	89 85       	ldd	r24, Y+9	; 0x09
    2aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	3f ef       	ldi	r19, 0xFF	; 255
    2af2:	4f e7       	ldi	r20, 0x7F	; 127
    2af4:	57 e4       	ldi	r21, 0x47	; 71
    2af6:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2afa:	18 16       	cp	r1, r24
    2afc:	4c f5       	brge	.+82     	; 0x2b50 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e2       	ldi	r20, 0x20	; 32
    2b0c:	51 e4       	ldi	r21, 0x41	; 65
    2b0e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	bc 01       	movw	r22, r24
    2b18:	cd 01       	movw	r24, r26
    2b1a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	9e 83       	std	Y+6, r25	; 0x06
    2b24:	8d 83       	std	Y+5, r24	; 0x05
    2b26:	0f c0       	rjmp	.+30     	; 0x2b46 <LCD_displayCharacter+0x8ac>
    2b28:	89 e1       	ldi	r24, 0x19	; 25
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	9c 83       	std	Y+4, r25	; 0x04
    2b2e:	8b 83       	std	Y+3, r24	; 0x03
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	9c 81       	ldd	r25, Y+4	; 0x04
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <LCD_displayCharacter+0x89a>
    2b38:	9c 83       	std	Y+4, r25	; 0x04
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	9e 83       	std	Y+6, r25	; 0x06
    2b44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	69 f7       	brne	.-38     	; 0x2b28 <LCD_displayCharacter+0x88e>
    2b4e:	14 c0       	rjmp	.+40     	; 0x2b78 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b50:	6f 81       	ldd	r22, Y+7	; 0x07
    2b52:	78 85       	ldd	r23, Y+8	; 0x08
    2b54:	89 85       	ldd	r24, Y+9	; 0x09
    2b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b58:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9e 83       	std	Y+6, r25	; 0x06
    2b62:	8d 83       	std	Y+5, r24	; 0x05
    2b64:	8d 81       	ldd	r24, Y+5	; 0x05
    2b66:	9e 81       	ldd	r25, Y+6	; 0x06
    2b68:	9a 83       	std	Y+2, r25	; 0x02
    2b6a:	89 83       	std	Y+1, r24	; 0x01
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <LCD_displayCharacter+0x8d6>
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b78:	cd 59       	subi	r28, 0x9D	; 157
    2b7a:	df 4f       	sbci	r29, 0xFF	; 255
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	1f 91       	pop	r17
    2b8c:	0f 91       	pop	r16
    2b8e:	08 95       	ret

00002b90 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	00 d0       	rcall	.+0      	; 0x2b96 <LCD_displayString+0x6>
    2b96:	0f 92       	push	r0
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
    2b9c:	9b 83       	std	Y+3, r25	; 0x03
    2b9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ba0:	19 82       	std	Y+1, r1	; 0x01
    2ba2:	0e c0       	rjmp	.+28     	; 0x2bc0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	9b 81       	ldd	r25, Y+3	; 0x03
    2bae:	fc 01       	movw	r30, r24
    2bb0:	e2 0f       	add	r30, r18
    2bb2:	f3 1f       	adc	r31, r19
    2bb4:	80 81       	ld	r24, Z
    2bb6:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_displayCharacter>
		i++;
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	28 2f       	mov	r18, r24
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bca:	fc 01       	movw	r30, r24
    2bcc:	e2 0f       	add	r30, r18
    2bce:	f3 1f       	adc	r31, r19
    2bd0:	80 81       	ld	r24, Z
    2bd2:	88 23       	and	r24, r24
    2bd4:	39 f7       	brne	.-50     	; 0x2ba4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <LCD_moveCursor+0x6>
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <LCD_moveCursor+0x8>
    2bea:	0f 92       	push	r0
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	8a 83       	std	Y+2, r24	; 0x02
    2bf2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	3d 83       	std	Y+5, r19	; 0x05
    2bfc:	2c 83       	std	Y+4, r18	; 0x04
    2bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    2c00:	9d 81       	ldd	r25, Y+5	; 0x05
    2c02:	81 30       	cpi	r24, 0x01	; 1
    2c04:	91 05       	cpc	r25, r1
    2c06:	c1 f0       	breq	.+48     	; 0x2c38 <LCD_moveCursor+0x56>
    2c08:	2c 81       	ldd	r18, Y+4	; 0x04
    2c0a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c0c:	22 30       	cpi	r18, 0x02	; 2
    2c0e:	31 05       	cpc	r19, r1
    2c10:	2c f4       	brge	.+10     	; 0x2c1c <LCD_moveCursor+0x3a>
    2c12:	8c 81       	ldd	r24, Y+4	; 0x04
    2c14:	9d 81       	ldd	r25, Y+5	; 0x05
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	61 f0       	breq	.+24     	; 0x2c32 <LCD_moveCursor+0x50>
    2c1a:	19 c0       	rjmp	.+50     	; 0x2c4e <LCD_moveCursor+0x6c>
    2c1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c20:	22 30       	cpi	r18, 0x02	; 2
    2c22:	31 05       	cpc	r19, r1
    2c24:	69 f0       	breq	.+26     	; 0x2c40 <LCD_moveCursor+0x5e>
    2c26:	8c 81       	ldd	r24, Y+4	; 0x04
    2c28:	9d 81       	ldd	r25, Y+5	; 0x05
    2c2a:	83 30       	cpi	r24, 0x03	; 3
    2c2c:	91 05       	cpc	r25, r1
    2c2e:	61 f0       	breq	.+24     	; 0x2c48 <LCD_moveCursor+0x66>
    2c30:	0e c0       	rjmp	.+28     	; 0x2c4e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	0b c0       	rjmp	.+22     	; 0x2c4e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	80 5c       	subi	r24, 0xC0	; 192
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	07 c0       	rjmp	.+14     	; 0x2c4e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	80 5f       	subi	r24, 0xF0	; 240
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	03 c0       	rjmp	.+6      	; 0x2c4e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	80 5b       	subi	r24, 0xB0	; 176
    2c4c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	80 68       	ori	r24, 0x80	; 128
    2c52:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_sendCommand>
}
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	00 d0       	rcall	.+0      	; 0x2c6c <LCD_displayStringRowColumn+0x6>
    2c6c:	00 d0       	rcall	.+0      	; 0x2c6e <LCD_displayStringRowColumn+0x8>
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	6a 83       	std	Y+2, r22	; 0x02
    2c76:	5c 83       	std	Y+4, r21	; 0x04
    2c78:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	6a 81       	ldd	r22, Y+2	; 0x02
    2c7e:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	9c 81       	ldd	r25, Y+4	; 0x04
    2c86:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
}
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	62 97       	sbiw	r28, 0x12	; 18
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	9a 8b       	std	Y+18, r25	; 0x12
    2cae:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2cb0:	89 89       	ldd	r24, Y+17	; 0x11
    2cb2:	9a 89       	ldd	r25, Y+18	; 0x12
    2cb4:	9e 01       	movw	r18, r28
    2cb6:	2f 5f       	subi	r18, 0xFF	; 255
    2cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cba:	b9 01       	movw	r22, r18
    2cbc:	4a e0       	ldi	r20, 0x0A	; 10
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	0e 94 b1 19 	call	0x3362	; 0x3362 <itoa>
   LCD_displayString(buff); /* Display the string */
    2cc4:	ce 01       	movw	r24, r28
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
}
    2ccc:	62 96       	adiw	r28, 0x12	; 18
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_sendCommand>
}
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	08 95       	ret

00002cf2 <LCD_displayFloat>:
void LCD_displayFloat(float number, uint8_t decimal_places) {
    2cf2:	0f 93       	push	r16
    2cf4:	1f 93       	push	r17
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	69 97       	sbiw	r28, 0x19	; 25
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	6d 8b       	std	Y+21, r22	; 0x15
    2d0c:	7e 8b       	std	Y+22, r23	; 0x16
    2d0e:	8f 8b       	std	Y+23, r24	; 0x17
    2d10:	98 8f       	std	Y+24, r25	; 0x18
    2d12:	49 8f       	std	Y+25, r20	; 0x19
    // Convert float to string with specified decimal places
    char buffer[20];
    dtostrf(number, 5, decimal_places, buffer);
    2d14:	89 8d       	ldd	r24, Y+25	; 0x19
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	8d 89       	ldd	r24, Y+21	; 0x15
    2d1c:	9e 89       	ldd	r25, Y+22	; 0x16
    2d1e:	af 89       	ldd	r26, Y+23	; 0x17
    2d20:	b8 8d       	ldd	r27, Y+24	; 0x18
    2d22:	bc 01       	movw	r22, r24
    2d24:	cd 01       	movw	r24, r26
    2d26:	45 e0       	ldi	r20, 0x05	; 5
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	31 96       	adiw	r30, 0x01	; 1
    2d2e:	8f 01       	movw	r16, r30
    2d30:	0e 94 90 19 	call	0x3320	; 0x3320 <dtostrf>

    // Display the string on LCD
    LCD_displayString(buffer);
    2d34:	ce 01       	movw	r24, r28
    2d36:	01 96       	adiw	r24, 0x01	; 1
    2d38:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
}
    2d3c:	69 96       	adiw	r28, 0x19	; 25
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	08 95       	ret

00002d52 <main>:
float adc_value;
uint8 num=0;
uint8 num2=0;
uint8 status;
int main()
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <main+0x6>
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
	ADC_ConfigType config={
			ADC_VCC,ADC_PR64
	};
    2d5c:	19 82       	std	Y+1, r1	; 0x01
    2d5e:	86 e0       	ldi	r24, 0x06	; 6
    2d60:	8a 83       	std	Y+2, r24	; 0x02
	ADC_init(&config);
    2d62:	ce 01       	movw	r24, r28
    2d64:	01 96       	adiw	r24, 0x01	; 1
    2d66:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <ADC_init>
	LCD_init();
    2d6a:	0e 94 20 0c 	call	0x1840	; 0x1840 <LCD_init>
    DDRC|=(1<<PC6)|(1<<PC7);
    2d6e:	a4 e3       	ldi	r26, 0x34	; 52
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	e4 e3       	ldi	r30, 0x34	; 52
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	80 6c       	ori	r24, 0xC0	; 192
    2d7a:	8c 93       	st	X, r24
    DDRB|=(1<<PB4);
    2d7c:	a7 e3       	ldi	r26, 0x37	; 55
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	e7 e3       	ldi	r30, 0x37	; 55
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	80 61       	ori	r24, 0x10	; 16
    2d88:	8c 93       	st	X, r24
    PORTD|=(1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7);
    2d8a:	a2 e3       	ldi	r26, 0x32	; 50
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e2 e3       	ldi	r30, 0x32	; 50
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	80 6f       	ori	r24, 0xF0	; 240
    2d96:	8c 93       	st	X, r24
while(1)
{
 MAIN_whichMode();
    2d98:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <MAIN_whichMode>
    2d9c:	fd cf       	rjmp	.-6      	; 0x2d98 <main+0x46>

00002d9e <MAIN_whichMode>:
}
}
void MAIN_whichMode()
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
	LCD_displayString("DC=1,AC=2");
    2da6:	80 e6       	ldi	r24, 0x60	; 96
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
	num=KEYPAD_getPressedKey();
    2dae:	0e 94 93 0a 	call	0x1526	; 0x1526 <KEYPAD_getPressedKey>
    2db2:	80 93 a8 01 	sts	0x01A8, r24
	if(num==1)
    2db6:	80 91 a8 01 	lds	r24, 0x01A8
    2dba:	81 30       	cpi	r24, 0x01	; 1
    2dbc:	51 f4       	brne	.+20     	; 0x2dd2 <MAIN_whichMode+0x34>
	{
		PORTB&=~(1<<PB4);
    2dbe:	a8 e3       	ldi	r26, 0x38	; 56
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e8 e3       	ldi	r30, 0x38	; 56
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	8f 7e       	andi	r24, 0xEF	; 239
    2dca:	8c 93       	st	X, r24
		MAIN_whichRange();
    2dcc:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <MAIN_whichRange>
    2dd0:	0d c0       	rjmp	.+26     	; 0x2dec <MAIN_whichMode+0x4e>
	}
	else if(num==2)
    2dd2:	80 91 a8 01 	lds	r24, 0x01A8
    2dd6:	82 30       	cpi	r24, 0x02	; 2
    2dd8:	49 f4       	brne	.+18     	; 0x2dec <MAIN_whichMode+0x4e>
	{
		PORTB|=(1<<PB4);
    2dda:	a8 e3       	ldi	r26, 0x38	; 56
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	e8 e3       	ldi	r30, 0x38	; 56
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	80 61       	ori	r24, 0x10	; 16
    2de6:	8c 93       	st	X, r24
		MAIN_whichRange();
    2de8:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <MAIN_whichRange>
	}
	LCD_clearScreen();
    2dec:	0e 94 6f 16 	call	0x2cde	; 0x2cde <LCD_clearScreen>
	if(num!=0||num!=1)
    2df0:	80 91 a8 01 	lds	r24, 0x01A8
    2df4:	88 23       	and	r24, r24
    2df6:	21 f4       	brne	.+8      	; 0x2e00 <MAIN_whichMode+0x62>
    2df8:	80 91 a8 01 	lds	r24, 0x01A8
    2dfc:	81 30       	cpi	r24, 0x01	; 1
    2dfe:	11 f0       	breq	.+4      	; 0x2e04 <MAIN_whichMode+0x66>
		MAIN_whichMode();
    2e00:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <MAIN_whichMode>
}
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <MAIN_ammeter>:
void MAIN_ammeter()
{
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2e12:	0e 94 6f 16 	call	0x2cde	; 0x2cde <LCD_clearScreen>
    2e16:	03 c0       	rjmp	.+6      	; 0x2e1e <MAIN_ammeter+0x14>
while(KEYPAD_getPressedKey()!='=')
{
	LCD_displayCharacter('g');
    2e18:	87 e6       	ldi	r24, 0x67	; 103
    2e1a:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_displayCharacter>
		MAIN_whichMode();
}
void MAIN_ammeter()
{
	LCD_clearScreen();
while(KEYPAD_getPressedKey()!='=')
    2e1e:	0e 94 93 0a 	call	0x1526	; 0x1526 <KEYPAD_getPressedKey>
    2e22:	8d 33       	cpi	r24, 0x3D	; 61
    2e24:	c9 f7       	brne	.-14     	; 0x2e18 <MAIN_ammeter+0xe>
{
	LCD_displayCharacter('g');
}
}
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <MAIN_voltmeter>:
void MAIN_voltmeter()
{
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
MAIN_whichMode();
    2e34:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <MAIN_whichMode>
}
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	08 95       	ret

00002e3e <MAIN_whichRange>:

void MAIN_whichRange()
{
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
	LCD_displayString("Select Range: ");
    2e46:	8a e6       	ldi	r24, 0x6A	; 106
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
	num2=KEYPAD_getPressedKey();
    2e4e:	0e 94 93 0a 	call	0x1526	; 0x1526 <KEYPAD_getPressedKey>
    2e52:	80 93 a9 01 	sts	0x01A9, r24
	if(num2==1)
    2e56:	80 91 a9 01 	lds	r24, 0x01A9
    2e5a:	81 30       	cpi	r24, 0x01	; 1
    2e5c:	89 f4       	brne	.+34     	; 0x2e80 <MAIN_whichRange+0x42>
	{
		PORTC&=~(1<<PC6);
    2e5e:	a5 e3       	ldi	r26, 0x35	; 53
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e5 e3       	ldi	r30, 0x35	; 53
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	8f 7b       	andi	r24, 0xBF	; 191
    2e6a:	8c 93       	st	X, r24
		PORTC&=~(1<<PC7);
    2e6c:	a5 e3       	ldi	r26, 0x35	; 53
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e5 e3       	ldi	r30, 0x35	; 53
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	8f 77       	andi	r24, 0x7F	; 127
    2e78:	8c 93       	st	X, r24
		MAIN_firstRange();
    2e7a:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <MAIN_firstRange>
    2e7e:	3e c0       	rjmp	.+124    	; 0x2efc <MAIN_whichRange+0xbe>
	}
	else if(num2==2)
    2e80:	80 91 a9 01 	lds	r24, 0x01A9
    2e84:	82 30       	cpi	r24, 0x02	; 2
    2e86:	89 f4       	brne	.+34     	; 0x2eaa <MAIN_whichRange+0x6c>
	{
		PORTC|=(1<<PC6);
    2e88:	a5 e3       	ldi	r26, 0x35	; 53
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e5 e3       	ldi	r30, 0x35	; 53
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	80 64       	ori	r24, 0x40	; 64
    2e94:	8c 93       	st	X, r24
		PORTC&=~(1<<PC7);
    2e96:	a5 e3       	ldi	r26, 0x35	; 53
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e5 e3       	ldi	r30, 0x35	; 53
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	8f 77       	andi	r24, 0x7F	; 127
    2ea2:	8c 93       	st	X, r24
		MAIN_secondRange();
    2ea4:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <MAIN_secondRange>
    2ea8:	29 c0       	rjmp	.+82     	; 0x2efc <MAIN_whichRange+0xbe>
	}
	else if(num2==3)
    2eaa:	80 91 a9 01 	lds	r24, 0x01A9
    2eae:	83 30       	cpi	r24, 0x03	; 3
    2eb0:	89 f4       	brne	.+34     	; 0x2ed4 <MAIN_whichRange+0x96>
	{
		PORTC&=~(1<<PC6);
    2eb2:	a5 e3       	ldi	r26, 0x35	; 53
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	e5 e3       	ldi	r30, 0x35	; 53
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	80 81       	ld	r24, Z
    2ebc:	8f 7b       	andi	r24, 0xBF	; 191
    2ebe:	8c 93       	st	X, r24
		PORTC|=(1<<PC7);
    2ec0:	a5 e3       	ldi	r26, 0x35	; 53
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e5 e3       	ldi	r30, 0x35	; 53
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	80 68       	ori	r24, 0x80	; 128
    2ecc:	8c 93       	st	X, r24
		MAIN_thirdRange();
    2ece:	0e 94 6f 18 	call	0x30de	; 0x30de <MAIN_thirdRange>
    2ed2:	14 c0       	rjmp	.+40     	; 0x2efc <MAIN_whichRange+0xbe>
	}
	else if(num2==5)
    2ed4:	80 91 a9 01 	lds	r24, 0x01A9
    2ed8:	85 30       	cpi	r24, 0x05	; 5
    2eda:	81 f4       	brne	.+32     	; 0x2efc <MAIN_whichRange+0xbe>
	{
		PORTC|=(1<<PC6);
    2edc:	a5 e3       	ldi	r26, 0x35	; 53
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	e5 e3       	ldi	r30, 0x35	; 53
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	80 64       	ori	r24, 0x40	; 64
    2ee8:	8c 93       	st	X, r24
		PORTC|=(1<<PC7);
    2eea:	a5 e3       	ldi	r26, 0x35	; 53
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	e5 e3       	ldi	r30, 0x35	; 53
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	80 68       	ori	r24, 0x80	; 128
    2ef6:	8c 93       	st	X, r24
		MAIN_fourthRange();
    2ef8:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <MAIN_fourthRange>
	}
	LCD_clearScreen();
    2efc:	0e 94 6f 16 	call	0x2cde	; 0x2cde <LCD_clearScreen>
	MAIN_whichRange();
    2f00:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <MAIN_whichRange>
}
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <MAIN_firstRange>:
void MAIN_firstRange()
{
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2f12:	0e 94 6f 16 	call	0x2cde	; 0x2cde <LCD_clearScreen>
	LCD_displayString("FIRST");
    2f16:	89 e7       	ldi	r24, 0x79	; 121
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
    2f1e:	5e c0       	rjmp	.+188    	; 0x2fdc <MAIN_firstRange+0xd2>
	while(KEYPAD_getPressedKey()!='#')
	{
		LCD_clearScreen();
    2f20:	0e 94 6f 16 	call	0x2cde	; 0x2cde <LCD_clearScreen>
		adc_value=ADC_readChannel(0);
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	0e 94 25 07 	call	0xe4a	; 0xe4a <ADC_readChannel>
    2f2a:	cc 01       	movw	r24, r24
    2f2c:	a0 e0       	ldi	r26, 0x00	; 0
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	bc 01       	movw	r22, r24
    2f32:	cd 01       	movw	r24, r26
    2f34:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__floatunsisf>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	80 93 ae 01 	sts	0x01AE, r24
    2f40:	90 93 af 01 	sts	0x01AF, r25
    2f44:	a0 93 b0 01 	sts	0x01B0, r26
    2f48:	b0 93 b1 01 	sts	0x01B1, r27
		voltage=(adc_value*(5.0/1023))*2.59;
    2f4c:	80 91 ae 01 	lds	r24, 0x01AE
    2f50:	90 91 af 01 	lds	r25, 0x01AF
    2f54:	a0 91 b0 01 	lds	r26, 0x01B0
    2f58:	b0 91 b1 01 	lds	r27, 0x01B1
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	2a e0       	ldi	r18, 0x0A	; 10
    2f62:	38 e2       	ldi	r19, 0x28	; 40
    2f64:	40 ea       	ldi	r20, 0xA0	; 160
    2f66:	5b e3       	ldi	r21, 0x3B	; 59
    2f68:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	bc 01       	movw	r22, r24
    2f72:	cd 01       	movw	r24, r26
    2f74:	2f e8       	ldi	r18, 0x8F	; 143
    2f76:	32 ec       	ldi	r19, 0xC2	; 194
    2f78:	45 e2       	ldi	r20, 0x25	; 37
    2f7a:	50 e4       	ldi	r21, 0x40	; 64
    2f7c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	80 93 aa 01 	sts	0x01AA, r24
    2f88:	90 93 ab 01 	sts	0x01AB, r25
    2f8c:	a0 93 ac 01 	sts	0x01AC, r26
    2f90:	b0 93 ad 01 	sts	0x01AD, r27
				if(voltage>=10)
    2f94:	80 91 aa 01 	lds	r24, 0x01AA
    2f98:	90 91 ab 01 	lds	r25, 0x01AB
    2f9c:	a0 91 ac 01 	lds	r26, 0x01AC
    2fa0:	b0 91 ad 01 	lds	r27, 0x01AD
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	40 e2       	ldi	r20, 0x20	; 32
    2fae:	51 e4       	ldi	r21, 0x41	; 65
    2fb0:	0e 94 c6 03 	call	0x78c	; 0x78c <__gesf2>
    2fb4:	88 23       	and	r24, r24
    2fb6:	2c f0       	brlt	.+10     	; 0x2fc2 <MAIN_firstRange+0xb8>
					LCD_displayString("OUT OF RANGE");
    2fb8:	8f e7       	ldi	r24, 0x7F	; 127
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
    2fc0:	0d c0       	rjmp	.+26     	; 0x2fdc <MAIN_firstRange+0xd2>
				else
				{
				LCD_displayFloat(voltage,2);
    2fc2:	80 91 aa 01 	lds	r24, 0x01AA
    2fc6:	90 91 ab 01 	lds	r25, 0x01AB
    2fca:	a0 91 ac 01 	lds	r26, 0x01AC
    2fce:	b0 91 ad 01 	lds	r27, 0x01AD
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	42 e0       	ldi	r20, 0x02	; 2
    2fd8:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <LCD_displayFloat>
}
void MAIN_firstRange()
{
	LCD_clearScreen();
	LCD_displayString("FIRST");
	while(KEYPAD_getPressedKey()!='#')
    2fdc:	0e 94 93 0a 	call	0x1526	; 0x1526 <KEYPAD_getPressedKey>
    2fe0:	83 32       	cpi	r24, 0x23	; 35
    2fe2:	09 f0       	breq	.+2      	; 0x2fe6 <MAIN_firstRange+0xdc>
    2fe4:	9d cf       	rjmp	.-198    	; 0x2f20 <MAIN_firstRange+0x16>
				else
				{
				LCD_displayFloat(voltage,2);
				}
	}
	num=0;
    2fe6:	10 92 a8 01 	sts	0x01A8, r1
	MAIN_whichMode();
    2fea:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <MAIN_whichMode>
}
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <MAIN_secondRange>:
void MAIN_secondRange()
{
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2ffc:	0e 94 6f 16 	call	0x2cde	; 0x2cde <LCD_clearScreen>
	LCD_displayString("SECOND");
    3000:	8c e8       	ldi	r24, 0x8C	; 140
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
    3008:	5e c0       	rjmp	.+188    	; 0x30c6 <MAIN_secondRange+0xd2>
	while(KEYPAD_getPressedKey()!='#')
	{
		LCD_clearScreen();
    300a:	0e 94 6f 16 	call	0x2cde	; 0x2cde <LCD_clearScreen>
	adc_value=ADC_readChannel(0);
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	0e 94 25 07 	call	0xe4a	; 0xe4a <ADC_readChannel>
    3014:	cc 01       	movw	r24, r24
    3016:	a0 e0       	ldi	r26, 0x00	; 0
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__floatunsisf>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	80 93 ae 01 	sts	0x01AE, r24
    302a:	90 93 af 01 	sts	0x01AF, r25
    302e:	a0 93 b0 01 	sts	0x01B0, r26
    3032:	b0 93 b1 01 	sts	0x01B1, r27
	voltage=(adc_value*(5.0/1023))*11.11;
    3036:	80 91 ae 01 	lds	r24, 0x01AE
    303a:	90 91 af 01 	lds	r25, 0x01AF
    303e:	a0 91 b0 01 	lds	r26, 0x01B0
    3042:	b0 91 b1 01 	lds	r27, 0x01B1
    3046:	bc 01       	movw	r22, r24
    3048:	cd 01       	movw	r24, r26
    304a:	2a e0       	ldi	r18, 0x0A	; 10
    304c:	38 e2       	ldi	r19, 0x28	; 40
    304e:	40 ea       	ldi	r20, 0xA0	; 160
    3050:	5b e3       	ldi	r21, 0x3B	; 59
    3052:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	2f e8       	ldi	r18, 0x8F	; 143
    3060:	32 ec       	ldi	r19, 0xC2	; 194
    3062:	41 e3       	ldi	r20, 0x31	; 49
    3064:	51 e4       	ldi	r21, 0x41	; 65
    3066:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	80 93 aa 01 	sts	0x01AA, r24
    3072:	90 93 ab 01 	sts	0x01AB, r25
    3076:	a0 93 ac 01 	sts	0x01AC, r26
    307a:	b0 93 ad 01 	sts	0x01AD, r27
			if(voltage>=50)
    307e:	80 91 aa 01 	lds	r24, 0x01AA
    3082:	90 91 ab 01 	lds	r25, 0x01AB
    3086:	a0 91 ac 01 	lds	r26, 0x01AC
    308a:	b0 91 ad 01 	lds	r27, 0x01AD
    308e:	bc 01       	movw	r22, r24
    3090:	cd 01       	movw	r24, r26
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	48 e4       	ldi	r20, 0x48	; 72
    3098:	52 e4       	ldi	r21, 0x42	; 66
    309a:	0e 94 c6 03 	call	0x78c	; 0x78c <__gesf2>
    309e:	88 23       	and	r24, r24
    30a0:	2c f0       	brlt	.+10     	; 0x30ac <MAIN_secondRange+0xb8>
				LCD_displayString("OUT OF RANGE");
    30a2:	8f e7       	ldi	r24, 0x7F	; 127
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
    30aa:	0d c0       	rjmp	.+26     	; 0x30c6 <MAIN_secondRange+0xd2>
			else
			{
			LCD_displayFloat(voltage,2);
    30ac:	80 91 aa 01 	lds	r24, 0x01AA
    30b0:	90 91 ab 01 	lds	r25, 0x01AB
    30b4:	a0 91 ac 01 	lds	r26, 0x01AC
    30b8:	b0 91 ad 01 	lds	r27, 0x01AD
    30bc:	bc 01       	movw	r22, r24
    30be:	cd 01       	movw	r24, r26
    30c0:	42 e0       	ldi	r20, 0x02	; 2
    30c2:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <LCD_displayFloat>
}
void MAIN_secondRange()
{
	LCD_clearScreen();
	LCD_displayString("SECOND");
	while(KEYPAD_getPressedKey()!='#')
    30c6:	0e 94 93 0a 	call	0x1526	; 0x1526 <KEYPAD_getPressedKey>
    30ca:	83 32       	cpi	r24, 0x23	; 35
    30cc:	09 f0       	breq	.+2      	; 0x30d0 <MAIN_secondRange+0xdc>
    30ce:	9d cf       	rjmp	.-198    	; 0x300a <MAIN_secondRange+0x16>
			else
			{
			LCD_displayFloat(voltage,2);
			}
}
	num=0;
    30d0:	10 92 a8 01 	sts	0x01A8, r1
	MAIN_whichMode();
    30d4:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <MAIN_whichMode>
}
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <MAIN_thirdRange>:
void MAIN_thirdRange()
{
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    30e6:	0e 94 6f 16 	call	0x2cde	; 0x2cde <LCD_clearScreen>
	LCD_displayString("THIRD");
    30ea:	83 e9       	ldi	r24, 0x93	; 147
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
    30f2:	5e c0       	rjmp	.+188    	; 0x31b0 <MAIN_thirdRange+0xd2>
while(KEYPAD_getPressedKey()!='#')
{
	LCD_clearScreen();
    30f4:	0e 94 6f 16 	call	0x2cde	; 0x2cde <LCD_clearScreen>
	adc_value=ADC_readChannel(0);
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	0e 94 25 07 	call	0xe4a	; 0xe4a <ADC_readChannel>
    30fe:	cc 01       	movw	r24, r24
    3100:	a0 e0       	ldi	r26, 0x00	; 0
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__floatunsisf>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	80 93 ae 01 	sts	0x01AE, r24
    3114:	90 93 af 01 	sts	0x01AF, r25
    3118:	a0 93 b0 01 	sts	0x01B0, r26
    311c:	b0 93 b1 01 	sts	0x01B1, r27
	voltage=adc_value*(5.0/1023)*25.54;
    3120:	80 91 ae 01 	lds	r24, 0x01AE
    3124:	90 91 af 01 	lds	r25, 0x01AF
    3128:	a0 91 b0 01 	lds	r26, 0x01B0
    312c:	b0 91 b1 01 	lds	r27, 0x01B1
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	2a e0       	ldi	r18, 0x0A	; 10
    3136:	38 e2       	ldi	r19, 0x28	; 40
    3138:	40 ea       	ldi	r20, 0xA0	; 160
    313a:	5b e3       	ldi	r21, 0x3B	; 59
    313c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	2c ee       	ldi	r18, 0xEC	; 236
    314a:	31 e5       	ldi	r19, 0x51	; 81
    314c:	4c ec       	ldi	r20, 0xCC	; 204
    314e:	51 e4       	ldi	r21, 0x41	; 65
    3150:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	80 93 aa 01 	sts	0x01AA, r24
    315c:	90 93 ab 01 	sts	0x01AB, r25
    3160:	a0 93 ac 01 	sts	0x01AC, r26
    3164:	b0 93 ad 01 	sts	0x01AD, r27
			if(voltage>=100)
    3168:	80 91 aa 01 	lds	r24, 0x01AA
    316c:	90 91 ab 01 	lds	r25, 0x01AB
    3170:	a0 91 ac 01 	lds	r26, 0x01AC
    3174:	b0 91 ad 01 	lds	r27, 0x01AD
    3178:	bc 01       	movw	r22, r24
    317a:	cd 01       	movw	r24, r26
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	48 ec       	ldi	r20, 0xC8	; 200
    3182:	52 e4       	ldi	r21, 0x42	; 66
    3184:	0e 94 c6 03 	call	0x78c	; 0x78c <__gesf2>
    3188:	88 23       	and	r24, r24
    318a:	2c f0       	brlt	.+10     	; 0x3196 <MAIN_thirdRange+0xb8>
				LCD_displayString("OUT OF RANGE");
    318c:	8f e7       	ldi	r24, 0x7F	; 127
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
    3194:	0d c0       	rjmp	.+26     	; 0x31b0 <MAIN_thirdRange+0xd2>
			else
			{
			LCD_displayFloat(voltage,2);
    3196:	80 91 aa 01 	lds	r24, 0x01AA
    319a:	90 91 ab 01 	lds	r25, 0x01AB
    319e:	a0 91 ac 01 	lds	r26, 0x01AC
    31a2:	b0 91 ad 01 	lds	r27, 0x01AD
    31a6:	bc 01       	movw	r22, r24
    31a8:	cd 01       	movw	r24, r26
    31aa:	42 e0       	ldi	r20, 0x02	; 2
    31ac:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <LCD_displayFloat>
}
void MAIN_thirdRange()
{
	LCD_clearScreen();
	LCD_displayString("THIRD");
while(KEYPAD_getPressedKey()!='#')
    31b0:	0e 94 93 0a 	call	0x1526	; 0x1526 <KEYPAD_getPressedKey>
    31b4:	83 32       	cpi	r24, 0x23	; 35
    31b6:	09 f0       	breq	.+2      	; 0x31ba <MAIN_thirdRange+0xdc>
    31b8:	9d cf       	rjmp	.-198    	; 0x30f4 <MAIN_thirdRange+0x16>
			else
			{
			LCD_displayFloat(voltage,2);
			}
}
num=0;
    31ba:	10 92 a8 01 	sts	0x01A8, r1
MAIN_whichMode();
    31be:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <MAIN_whichMode>
}
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	08 95       	ret

000031c8 <MAIN_fourthRange>:
void MAIN_fourthRange()
{
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    31d0:	0e 94 6f 16 	call	0x2cde	; 0x2cde <LCD_clearScreen>
	LCD_displayString("FOURTH");
    31d4:	89 e9       	ldi	r24, 0x99	; 153
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
    31dc:	5e c0       	rjmp	.+188    	; 0x329a <MAIN_fourthRange+0xd2>
	while(KEYPAD_getPressedKey()!='#')
	{
	LCD_clearScreen();
    31de:	0e 94 6f 16 	call	0x2cde	; 0x2cde <LCD_clearScreen>
	adc_value=ADC_readChannel(0);
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	0e 94 25 07 	call	0xe4a	; 0xe4a <ADC_readChannel>
    31e8:	cc 01       	movw	r24, r24
    31ea:	a0 e0       	ldi	r26, 0x00	; 0
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__floatunsisf>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	80 93 ae 01 	sts	0x01AE, r24
    31fe:	90 93 af 01 	sts	0x01AF, r25
    3202:	a0 93 b0 01 	sts	0x01B0, r26
    3206:	b0 93 b1 01 	sts	0x01B1, r27
	voltage=(adc_value*(5.0/1023))*53.6;
    320a:	80 91 ae 01 	lds	r24, 0x01AE
    320e:	90 91 af 01 	lds	r25, 0x01AF
    3212:	a0 91 b0 01 	lds	r26, 0x01B0
    3216:	b0 91 b1 01 	lds	r27, 0x01B1
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	2a e0       	ldi	r18, 0x0A	; 10
    3220:	38 e2       	ldi	r19, 0x28	; 40
    3222:	40 ea       	ldi	r20, 0xA0	; 160
    3224:	5b e3       	ldi	r21, 0x3B	; 59
    3226:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	bc 01       	movw	r22, r24
    3230:	cd 01       	movw	r24, r26
    3232:	26 e6       	ldi	r18, 0x66	; 102
    3234:	36 e6       	ldi	r19, 0x66	; 102
    3236:	46 e5       	ldi	r20, 0x56	; 86
    3238:	52 e4       	ldi	r21, 0x42	; 66
    323a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	80 93 aa 01 	sts	0x01AA, r24
    3246:	90 93 ab 01 	sts	0x01AB, r25
    324a:	a0 93 ac 01 	sts	0x01AC, r26
    324e:	b0 93 ad 01 	sts	0x01AD, r27
			if(voltage>200)
    3252:	80 91 aa 01 	lds	r24, 0x01AA
    3256:	90 91 ab 01 	lds	r25, 0x01AB
    325a:	a0 91 ac 01 	lds	r26, 0x01AC
    325e:	b0 91 ad 01 	lds	r27, 0x01AD
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	48 e4       	ldi	r20, 0x48	; 72
    326c:	53 e4       	ldi	r21, 0x43	; 67
    326e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    3272:	18 16       	cp	r1, r24
    3274:	2c f4       	brge	.+10     	; 0x3280 <MAIN_fourthRange+0xb8>
				LCD_displayString("OUT OF RANGE");
    3276:	8f e7       	ldi	r24, 0x7F	; 127
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayString>
    327e:	0d c0       	rjmp	.+26     	; 0x329a <MAIN_fourthRange+0xd2>
			else
			{
			LCD_displayFloat(voltage,2);
    3280:	80 91 aa 01 	lds	r24, 0x01AA
    3284:	90 91 ab 01 	lds	r25, 0x01AB
    3288:	a0 91 ac 01 	lds	r26, 0x01AC
    328c:	b0 91 ad 01 	lds	r27, 0x01AD
    3290:	bc 01       	movw	r22, r24
    3292:	cd 01       	movw	r24, r26
    3294:	42 e0       	ldi	r20, 0x02	; 2
    3296:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <LCD_displayFloat>
}
void MAIN_fourthRange()
{
	LCD_clearScreen();
	LCD_displayString("FOURTH");
	while(KEYPAD_getPressedKey()!='#')
    329a:	0e 94 93 0a 	call	0x1526	; 0x1526 <KEYPAD_getPressedKey>
    329e:	83 32       	cpi	r24, 0x23	; 35
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <MAIN_fourthRange+0xdc>
    32a2:	9d cf       	rjmp	.-198    	; 0x31de <MAIN_fourthRange+0x16>
			else
			{
			LCD_displayFloat(voltage,2);
			}
}
	num=0;
    32a4:	10 92 a8 01 	sts	0x01A8, r1
	MAIN_whichMode();
    32a8:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <MAIN_whichMode>
}
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <__prologue_saves__>:
    32b2:	2f 92       	push	r2
    32b4:	3f 92       	push	r3
    32b6:	4f 92       	push	r4
    32b8:	5f 92       	push	r5
    32ba:	6f 92       	push	r6
    32bc:	7f 92       	push	r7
    32be:	8f 92       	push	r8
    32c0:	9f 92       	push	r9
    32c2:	af 92       	push	r10
    32c4:	bf 92       	push	r11
    32c6:	cf 92       	push	r12
    32c8:	df 92       	push	r13
    32ca:	ef 92       	push	r14
    32cc:	ff 92       	push	r15
    32ce:	0f 93       	push	r16
    32d0:	1f 93       	push	r17
    32d2:	cf 93       	push	r28
    32d4:	df 93       	push	r29
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	ca 1b       	sub	r28, r26
    32dc:	db 0b       	sbc	r29, r27
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	cd bf       	out	0x3d, r28	; 61
    32e8:	09 94       	ijmp

000032ea <__epilogue_restores__>:
    32ea:	2a 88       	ldd	r2, Y+18	; 0x12
    32ec:	39 88       	ldd	r3, Y+17	; 0x11
    32ee:	48 88       	ldd	r4, Y+16	; 0x10
    32f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    32f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    32f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    32f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    32f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    32fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    32fc:	b9 84       	ldd	r11, Y+9	; 0x09
    32fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3300:	df 80       	ldd	r13, Y+7	; 0x07
    3302:	ee 80       	ldd	r14, Y+6	; 0x06
    3304:	fd 80       	ldd	r15, Y+5	; 0x05
    3306:	0c 81       	ldd	r16, Y+4	; 0x04
    3308:	1b 81       	ldd	r17, Y+3	; 0x03
    330a:	aa 81       	ldd	r26, Y+2	; 0x02
    330c:	b9 81       	ldd	r27, Y+1	; 0x01
    330e:	ce 0f       	add	r28, r30
    3310:	d1 1d       	adc	r29, r1
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	ed 01       	movw	r28, r26
    331e:	08 95       	ret

00003320 <dtostrf>:
    3320:	ef 92       	push	r14
    3322:	ff 92       	push	r15
    3324:	0f 93       	push	r16
    3326:	1f 93       	push	r17
    3328:	f2 2f       	mov	r31, r18
    332a:	f0 2e       	mov	r15, r16
    332c:	47 fd       	sbrc	r20, 7
    332e:	02 c0       	rjmp	.+4      	; 0x3334 <dtostrf+0x14>
    3330:	e4 e0       	ldi	r30, 0x04	; 4
    3332:	01 c0       	rjmp	.+2      	; 0x3336 <dtostrf+0x16>
    3334:	e4 e1       	ldi	r30, 0x14	; 20
    3336:	24 2f       	mov	r18, r20
    3338:	33 27       	eor	r19, r19
    333a:	27 fd       	sbrc	r18, 7
    333c:	30 95       	com	r19
    333e:	37 ff       	sbrs	r19, 7
    3340:	03 c0       	rjmp	.+6      	; 0x3348 <dtostrf+0x28>
    3342:	30 95       	com	r19
    3344:	21 95       	neg	r18
    3346:	3f 4f       	sbci	r19, 0xFF	; 255
    3348:	4f 2d       	mov	r20, r15
    334a:	51 2f       	mov	r21, r17
    334c:	0f 2f       	mov	r16, r31
    334e:	ee 2e       	mov	r14, r30
    3350:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <dtoa_prf>
    3354:	8f 2d       	mov	r24, r15
    3356:	91 2f       	mov	r25, r17
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	ff 90       	pop	r15
    335e:	ef 90       	pop	r14
    3360:	08 95       	ret

00003362 <itoa>:
    3362:	fb 01       	movw	r30, r22
    3364:	9f 01       	movw	r18, r30
    3366:	e8 94       	clt
    3368:	42 30       	cpi	r20, 0x02	; 2
    336a:	c4 f0       	brlt	.+48     	; 0x339c <itoa+0x3a>
    336c:	45 32       	cpi	r20, 0x25	; 37
    336e:	b4 f4       	brge	.+44     	; 0x339c <itoa+0x3a>
    3370:	4a 30       	cpi	r20, 0x0A	; 10
    3372:	29 f4       	brne	.+10     	; 0x337e <itoa+0x1c>
    3374:	97 fb       	bst	r25, 7
    3376:	1e f4       	brtc	.+6      	; 0x337e <itoa+0x1c>
    3378:	90 95       	com	r25
    337a:	81 95       	neg	r24
    337c:	9f 4f       	sbci	r25, 0xFF	; 255
    337e:	64 2f       	mov	r22, r20
    3380:	77 27       	eor	r23, r23
    3382:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__udivmodhi4>
    3386:	80 5d       	subi	r24, 0xD0	; 208
    3388:	8a 33       	cpi	r24, 0x3A	; 58
    338a:	0c f0       	brlt	.+2      	; 0x338e <itoa+0x2c>
    338c:	89 5d       	subi	r24, 0xD9	; 217
    338e:	81 93       	st	Z+, r24
    3390:	cb 01       	movw	r24, r22
    3392:	00 97       	sbiw	r24, 0x00	; 0
    3394:	a1 f7       	brne	.-24     	; 0x337e <itoa+0x1c>
    3396:	16 f4       	brtc	.+4      	; 0x339c <itoa+0x3a>
    3398:	5d e2       	ldi	r21, 0x2D	; 45
    339a:	51 93       	st	Z+, r21
    339c:	10 82       	st	Z, r1
    339e:	c9 01       	movw	r24, r18
    33a0:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <strrev>

000033a4 <dtoa_prf>:
    33a4:	a9 e0       	ldi	r26, 0x09	; 9
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	e8 ed       	ldi	r30, 0xD8	; 216
    33aa:	f9 e1       	ldi	r31, 0x19	; 25
    33ac:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__prologue_saves__+0x8>
    33b0:	6a 01       	movw	r12, r20
    33b2:	12 2f       	mov	r17, r18
    33b4:	a0 2e       	mov	r10, r16
    33b6:	be 2c       	mov	r11, r14
    33b8:	2b e3       	ldi	r18, 0x3B	; 59
    33ba:	20 17       	cp	r18, r16
    33bc:	18 f4       	brcc	.+6      	; 0x33c4 <dtoa_prf+0x20>
    33be:	2c e3       	ldi	r18, 0x3C	; 60
    33c0:	92 2e       	mov	r9, r18
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <dtoa_prf+0x24>
    33c4:	90 2e       	mov	r9, r16
    33c6:	93 94       	inc	r9
    33c8:	ae 01       	movw	r20, r28
    33ca:	4f 5f       	subi	r20, 0xFF	; 255
    33cc:	5f 4f       	sbci	r21, 0xFF	; 255
    33ce:	27 e0       	ldi	r18, 0x07	; 7
    33d0:	09 2d       	mov	r16, r9
    33d2:	0e 94 34 1b 	call	0x3668	; 0x3668 <__ftoa_engine>
    33d6:	bc 01       	movw	r22, r24
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	e8 2e       	mov	r14, r24
    33dc:	ff 24       	eor	r15, r15
    33de:	c7 01       	movw	r24, r14
    33e0:	89 70       	andi	r24, 0x09	; 9
    33e2:	90 70       	andi	r25, 0x00	; 0
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	11 f4       	brne	.+4      	; 0x33ec <dtoa_prf+0x48>
    33e8:	ad e2       	ldi	r26, 0x2D	; 45
    33ea:	09 c0       	rjmp	.+18     	; 0x33fe <dtoa_prf+0x5a>
    33ec:	b1 fe       	sbrs	r11, 1
    33ee:	02 c0       	rjmp	.+4      	; 0x33f4 <dtoa_prf+0x50>
    33f0:	ab e2       	ldi	r26, 0x2B	; 43
    33f2:	05 c0       	rjmp	.+10     	; 0x33fe <dtoa_prf+0x5a>
    33f4:	b0 fc       	sbrc	r11, 0
    33f6:	02 c0       	rjmp	.+4      	; 0x33fc <dtoa_prf+0x58>
    33f8:	a0 e0       	ldi	r26, 0x00	; 0
    33fa:	01 c0       	rjmp	.+2      	; 0x33fe <dtoa_prf+0x5a>
    33fc:	a0 e2       	ldi	r26, 0x20	; 32
    33fe:	e3 fe       	sbrs	r14, 3
    3400:	3b c0       	rjmp	.+118    	; 0x3478 <dtoa_prf+0xd4>
    3402:	aa 23       	and	r26, r26
    3404:	11 f4       	brne	.+4      	; 0x340a <dtoa_prf+0x66>
    3406:	23 e0       	ldi	r18, 0x03	; 3
    3408:	01 c0       	rjmp	.+2      	; 0x340c <dtoa_prf+0x68>
    340a:	24 e0       	ldi	r18, 0x04	; 4
    340c:	21 17       	cp	r18, r17
    340e:	10 f0       	brcs	.+4      	; 0x3414 <dtoa_prf+0x70>
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	02 c0       	rjmp	.+4      	; 0x3418 <dtoa_prf+0x74>
    3414:	12 1b       	sub	r17, r18
    3416:	21 2f       	mov	r18, r17
    3418:	eb 2c       	mov	r14, r11
    341a:	b4 fe       	sbrs	r11, 4
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <dtoa_prf+0x7e>
    341e:	32 2f       	mov	r19, r18
    3420:	0a c0       	rjmp	.+20     	; 0x3436 <dtoa_prf+0x92>
    3422:	f6 01       	movw	r30, r12
    3424:	32 2f       	mov	r19, r18
    3426:	80 e2       	ldi	r24, 0x20	; 32
    3428:	02 c0       	rjmp	.+4      	; 0x342e <dtoa_prf+0x8a>
    342a:	81 93       	st	Z+, r24
    342c:	31 50       	subi	r19, 0x01	; 1
    342e:	33 23       	and	r19, r19
    3430:	e1 f7       	brne	.-8      	; 0x342a <dtoa_prf+0x86>
    3432:	c2 0e       	add	r12, r18
    3434:	d1 1c       	adc	r13, r1
    3436:	aa 23       	and	r26, r26
    3438:	19 f0       	breq	.+6      	; 0x3440 <dtoa_prf+0x9c>
    343a:	f6 01       	movw	r30, r12
    343c:	a1 93       	st	Z+, r26
    343e:	6f 01       	movw	r12, r30
    3440:	f6 01       	movw	r30, r12
    3442:	31 96       	adiw	r30, 0x01	; 1
    3444:	e2 fe       	sbrs	r14, 2
    3446:	05 c0       	rjmp	.+10     	; 0x3452 <dtoa_prf+0xae>
    3448:	9e e4       	ldi	r25, 0x4E	; 78
    344a:	d6 01       	movw	r26, r12
    344c:	9c 93       	st	X, r25
    344e:	81 e4       	ldi	r24, 0x41	; 65
    3450:	04 c0       	rjmp	.+8      	; 0x345a <dtoa_prf+0xb6>
    3452:	9e e6       	ldi	r25, 0x6E	; 110
    3454:	d6 01       	movw	r26, r12
    3456:	9c 93       	st	X, r25
    3458:	81 e6       	ldi	r24, 0x61	; 97
    345a:	11 96       	adiw	r26, 0x01	; 1
    345c:	8c 93       	st	X, r24
    345e:	91 83       	std	Z+1, r25	; 0x01
    3460:	32 96       	adiw	r30, 0x02	; 2
    3462:	df 01       	movw	r26, r30
    3464:	83 2f       	mov	r24, r19
    3466:	90 e2       	ldi	r25, 0x20	; 32
    3468:	02 c0       	rjmp	.+4      	; 0x346e <dtoa_prf+0xca>
    346a:	9d 93       	st	X+, r25
    346c:	81 50       	subi	r24, 0x01	; 1
    346e:	88 23       	and	r24, r24
    3470:	e1 f7       	brne	.-8      	; 0x346a <dtoa_prf+0xc6>
    3472:	e3 0f       	add	r30, r19
    3474:	f1 1d       	adc	r31, r1
    3476:	40 c0       	rjmp	.+128    	; 0x34f8 <dtoa_prf+0x154>
    3478:	e2 fe       	sbrs	r14, 2
    347a:	42 c0       	rjmp	.+132    	; 0x3500 <dtoa_prf+0x15c>
    347c:	aa 23       	and	r26, r26
    347e:	11 f4       	brne	.+4      	; 0x3484 <dtoa_prf+0xe0>
    3480:	23 e0       	ldi	r18, 0x03	; 3
    3482:	01 c0       	rjmp	.+2      	; 0x3486 <dtoa_prf+0xe2>
    3484:	24 e0       	ldi	r18, 0x04	; 4
    3486:	21 17       	cp	r18, r17
    3488:	10 f0       	brcs	.+4      	; 0x348e <dtoa_prf+0xea>
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <dtoa_prf+0xee>
    348e:	12 1b       	sub	r17, r18
    3490:	21 2f       	mov	r18, r17
    3492:	eb 2c       	mov	r14, r11
    3494:	b4 fe       	sbrs	r11, 4
    3496:	02 c0       	rjmp	.+4      	; 0x349c <dtoa_prf+0xf8>
    3498:	92 2f       	mov	r25, r18
    349a:	0a c0       	rjmp	.+20     	; 0x34b0 <dtoa_prf+0x10c>
    349c:	f6 01       	movw	r30, r12
    349e:	92 2f       	mov	r25, r18
    34a0:	80 e2       	ldi	r24, 0x20	; 32
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <dtoa_prf+0x104>
    34a4:	81 93       	st	Z+, r24
    34a6:	91 50       	subi	r25, 0x01	; 1
    34a8:	99 23       	and	r25, r25
    34aa:	e1 f7       	brne	.-8      	; 0x34a4 <dtoa_prf+0x100>
    34ac:	c2 0e       	add	r12, r18
    34ae:	d1 1c       	adc	r13, r1
    34b0:	aa 23       	and	r26, r26
    34b2:	19 f0       	breq	.+6      	; 0x34ba <dtoa_prf+0x116>
    34b4:	f6 01       	movw	r30, r12
    34b6:	a1 93       	st	Z+, r26
    34b8:	6f 01       	movw	r12, r30
    34ba:	f6 01       	movw	r30, r12
    34bc:	31 96       	adiw	r30, 0x01	; 1
    34be:	e2 fe       	sbrs	r14, 2
    34c0:	08 c0       	rjmp	.+16     	; 0x34d2 <dtoa_prf+0x12e>
    34c2:	89 e4       	ldi	r24, 0x49	; 73
    34c4:	d6 01       	movw	r26, r12
    34c6:	8c 93       	st	X, r24
    34c8:	8e e4       	ldi	r24, 0x4E	; 78
    34ca:	11 96       	adiw	r26, 0x01	; 1
    34cc:	8c 93       	st	X, r24
    34ce:	86 e4       	ldi	r24, 0x46	; 70
    34d0:	07 c0       	rjmp	.+14     	; 0x34e0 <dtoa_prf+0x13c>
    34d2:	89 e6       	ldi	r24, 0x69	; 105
    34d4:	d6 01       	movw	r26, r12
    34d6:	8c 93       	st	X, r24
    34d8:	8e e6       	ldi	r24, 0x6E	; 110
    34da:	11 96       	adiw	r26, 0x01	; 1
    34dc:	8c 93       	st	X, r24
    34de:	86 e6       	ldi	r24, 0x66	; 102
    34e0:	81 83       	std	Z+1, r24	; 0x01
    34e2:	32 96       	adiw	r30, 0x02	; 2
    34e4:	df 01       	movw	r26, r30
    34e6:	89 2f       	mov	r24, r25
    34e8:	20 e2       	ldi	r18, 0x20	; 32
    34ea:	02 c0       	rjmp	.+4      	; 0x34f0 <dtoa_prf+0x14c>
    34ec:	2d 93       	st	X+, r18
    34ee:	81 50       	subi	r24, 0x01	; 1
    34f0:	88 23       	and	r24, r24
    34f2:	e1 f7       	brne	.-8      	; 0x34ec <dtoa_prf+0x148>
    34f4:	e9 0f       	add	r30, r25
    34f6:	f1 1d       	adc	r31, r1
    34f8:	10 82       	st	Z, r1
    34fa:	2e ef       	ldi	r18, 0xFE	; 254
    34fc:	3f ef       	ldi	r19, 0xFF	; 255
    34fe:	af c0       	rjmp	.+350    	; 0x365e <dtoa_prf+0x2ba>
    3500:	16 16       	cp	r1, r22
    3502:	17 06       	cpc	r1, r23
    3504:	1c f0       	brlt	.+6      	; 0x350c <dtoa_prf+0x168>
    3506:	41 e0       	ldi	r20, 0x01	; 1
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	03 c0       	rjmp	.+6      	; 0x3512 <dtoa_prf+0x16e>
    350c:	ab 01       	movw	r20, r22
    350e:	4f 5f       	subi	r20, 0xFF	; 255
    3510:	5f 4f       	sbci	r21, 0xFF	; 255
    3512:	aa 20       	and	r10, r10
    3514:	19 f4       	brne	.+6      	; 0x351c <dtoa_prf+0x178>
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	03 c0       	rjmp	.+6      	; 0x3522 <dtoa_prf+0x17e>
    351c:	8a 2d       	mov	r24, r10
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	01 96       	adiw	r24, 0x01	; 1
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	aa 23       	and	r26, r26
    3528:	11 f0       	breq	.+4      	; 0x352e <dtoa_prf+0x18a>
    352a:	21 e0       	ldi	r18, 0x01	; 1
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	24 0f       	add	r18, r20
    3530:	35 1f       	adc	r19, r21
    3532:	28 0f       	add	r18, r24
    3534:	39 1f       	adc	r19, r25
    3536:	81 2f       	mov	r24, r17
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	28 17       	cp	r18, r24
    353c:	39 07       	cpc	r19, r25
    353e:	14 f0       	brlt	.+4      	; 0x3544 <dtoa_prf+0x1a0>
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	02 c0       	rjmp	.+4      	; 0x3548 <dtoa_prf+0x1a4>
    3544:	12 1b       	sub	r17, r18
    3546:	21 2f       	mov	r18, r17
    3548:	4b 2d       	mov	r20, r11
    354a:	50 e0       	ldi	r21, 0x00	; 0
    354c:	ca 01       	movw	r24, r20
    354e:	80 71       	andi	r24, 0x10	; 16
    3550:	90 70       	andi	r25, 0x00	; 0
    3552:	b4 fc       	sbrc	r11, 4
    3554:	0d c0       	rjmp	.+26     	; 0x3570 <dtoa_prf+0x1cc>
    3556:	b3 fc       	sbrc	r11, 3
    3558:	0b c0       	rjmp	.+22     	; 0x3570 <dtoa_prf+0x1cc>
    355a:	f6 01       	movw	r30, r12
    355c:	32 2f       	mov	r19, r18
    355e:	40 e2       	ldi	r20, 0x20	; 32
    3560:	02 c0       	rjmp	.+4      	; 0x3566 <dtoa_prf+0x1c2>
    3562:	41 93       	st	Z+, r20
    3564:	31 50       	subi	r19, 0x01	; 1
    3566:	33 23       	and	r19, r19
    3568:	e1 f7       	brne	.-8      	; 0x3562 <dtoa_prf+0x1be>
    356a:	c2 0e       	add	r12, r18
    356c:	d1 1c       	adc	r13, r1
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <dtoa_prf+0x1ce>
    3570:	32 2f       	mov	r19, r18
    3572:	aa 23       	and	r26, r26
    3574:	19 f0       	breq	.+6      	; 0x357c <dtoa_prf+0x1d8>
    3576:	f6 01       	movw	r30, r12
    3578:	a1 93       	st	Z+, r26
    357a:	6f 01       	movw	r12, r30
    357c:	89 2b       	or	r24, r25
    357e:	11 f0       	breq	.+4      	; 0x3584 <dtoa_prf+0x1e0>
    3580:	13 2f       	mov	r17, r19
    3582:	0a c0       	rjmp	.+20     	; 0x3598 <dtoa_prf+0x1f4>
    3584:	f6 01       	movw	r30, r12
    3586:	13 2f       	mov	r17, r19
    3588:	80 e3       	ldi	r24, 0x30	; 48
    358a:	02 c0       	rjmp	.+4      	; 0x3590 <dtoa_prf+0x1ec>
    358c:	81 93       	st	Z+, r24
    358e:	11 50       	subi	r17, 0x01	; 1
    3590:	11 23       	and	r17, r17
    3592:	e1 f7       	brne	.-8      	; 0x358c <dtoa_prf+0x1e8>
    3594:	c3 0e       	add	r12, r19
    3596:	d1 1c       	adc	r13, r1
    3598:	09 2d       	mov	r16, r9
    359a:	06 0f       	add	r16, r22
    359c:	ba 80       	ldd	r11, Y+2	; 0x02
    359e:	90 e1       	ldi	r25, 0x10	; 16
    35a0:	89 2e       	mov	r8, r25
    35a2:	91 2c       	mov	r9, r1
    35a4:	8e 20       	and	r8, r14
    35a6:	9f 20       	and	r9, r15
    35a8:	e4 fe       	sbrs	r14, 4
    35aa:	04 c0       	rjmp	.+8      	; 0x35b4 <dtoa_prf+0x210>
    35ac:	f1 e3       	ldi	r31, 0x31	; 49
    35ae:	bf 16       	cp	r11, r31
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <dtoa_prf+0x210>
    35b2:	01 50       	subi	r16, 0x01	; 1
    35b4:	10 16       	cp	r1, r16
    35b6:	14 f0       	brlt	.+4      	; 0x35bc <dtoa_prf+0x218>
    35b8:	01 e0       	ldi	r16, 0x01	; 1
    35ba:	03 c0       	rjmp	.+6      	; 0x35c2 <dtoa_prf+0x21e>
    35bc:	09 30       	cpi	r16, 0x09	; 9
    35be:	08 f0       	brcs	.+2      	; 0x35c2 <dtoa_prf+0x21e>
    35c0:	08 e0       	ldi	r16, 0x08	; 8
    35c2:	9b 01       	movw	r18, r22
    35c4:	77 ff       	sbrs	r23, 7
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <dtoa_prf+0x228>
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	cb 01       	movw	r24, r22
    35ce:	01 96       	adiw	r24, 0x01	; 1
    35d0:	82 1b       	sub	r24, r18
    35d2:	93 0b       	sbc	r25, r19
    35d4:	fe 01       	movw	r30, r28
    35d6:	31 96       	adiw	r30, 0x01	; 1
    35d8:	e8 0f       	add	r30, r24
    35da:	f9 1f       	adc	r31, r25
    35dc:	8e e2       	ldi	r24, 0x2E	; 46
    35de:	f8 2e       	mov	r15, r24
    35e0:	3b 01       	movw	r6, r22
    35e2:	60 1a       	sub	r6, r16
    35e4:	71 08       	sbc	r7, r1
    35e6:	8a 2d       	mov	r24, r10
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	44 27       	eor	r20, r20
    35ec:	55 27       	eor	r21, r21
    35ee:	48 1b       	sub	r20, r24
    35f0:	59 0b       	sbc	r21, r25
    35f2:	8f ef       	ldi	r24, 0xFF	; 255
    35f4:	2f 3f       	cpi	r18, 0xFF	; 255
    35f6:	38 07       	cpc	r19, r24
    35f8:	19 f4       	brne	.+6      	; 0x3600 <dtoa_prf+0x25c>
    35fa:	d6 01       	movw	r26, r12
    35fc:	fd 92       	st	X+, r15
    35fe:	6d 01       	movw	r12, r26
    3600:	62 17       	cp	r22, r18
    3602:	73 07       	cpc	r23, r19
    3604:	2c f0       	brlt	.+10     	; 0x3610 <dtoa_prf+0x26c>
    3606:	62 16       	cp	r6, r18
    3608:	73 06       	cpc	r7, r19
    360a:	14 f4       	brge	.+4      	; 0x3610 <dtoa_prf+0x26c>
    360c:	80 81       	ld	r24, Z
    360e:	01 c0       	rjmp	.+2      	; 0x3612 <dtoa_prf+0x26e>
    3610:	80 e3       	ldi	r24, 0x30	; 48
    3612:	21 50       	subi	r18, 0x01	; 1
    3614:	30 40       	sbci	r19, 0x00	; 0
    3616:	31 96       	adiw	r30, 0x01	; 1
    3618:	24 17       	cp	r18, r20
    361a:	35 07       	cpc	r19, r21
    361c:	24 f0       	brlt	.+8      	; 0x3626 <dtoa_prf+0x282>
    361e:	d6 01       	movw	r26, r12
    3620:	8d 93       	st	X+, r24
    3622:	6d 01       	movw	r12, r26
    3624:	e6 cf       	rjmp	.-52     	; 0x35f2 <dtoa_prf+0x24e>
    3626:	26 17       	cp	r18, r22
    3628:	37 07       	cpc	r19, r23
    362a:	49 f4       	brne	.+18     	; 0x363e <dtoa_prf+0x29a>
    362c:	b5 e3       	ldi	r27, 0x35	; 53
    362e:	bb 15       	cp	r27, r11
    3630:	28 f0       	brcs	.+10     	; 0x363c <dtoa_prf+0x298>
    3632:	bb 16       	cp	r11, r27
    3634:	21 f4       	brne	.+8      	; 0x363e <dtoa_prf+0x29a>
    3636:	81 14       	cp	r8, r1
    3638:	91 04       	cpc	r9, r1
    363a:	09 f4       	brne	.+2      	; 0x363e <dtoa_prf+0x29a>
    363c:	81 e3       	ldi	r24, 0x31	; 49
    363e:	f6 01       	movw	r30, r12
    3640:	81 93       	st	Z+, r24
    3642:	d6 01       	movw	r26, r12
    3644:	81 2f       	mov	r24, r17
    3646:	90 e2       	ldi	r25, 0x20	; 32
    3648:	02 c0       	rjmp	.+4      	; 0x364e <dtoa_prf+0x2aa>
    364a:	9c 93       	st	X, r25
    364c:	81 50       	subi	r24, 0x01	; 1
    364e:	11 96       	adiw	r26, 0x01	; 1
    3650:	88 23       	and	r24, r24
    3652:	d9 f7       	brne	.-10     	; 0x364a <dtoa_prf+0x2a6>
    3654:	e1 0f       	add	r30, r17
    3656:	f1 1d       	adc	r31, r1
    3658:	10 82       	st	Z, r1
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	c9 01       	movw	r24, r18
    3660:	29 96       	adiw	r28, 0x09	; 9
    3662:	ee e0       	ldi	r30, 0x0E	; 14
    3664:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__epilogue_restores__+0x8>

00003668 <__ftoa_engine>:
    3668:	28 30       	cpi	r18, 0x08	; 8
    366a:	08 f0       	brcs	.+2      	; 0x366e <__ftoa_engine+0x6>
    366c:	27 e0       	ldi	r18, 0x07	; 7
    366e:	33 27       	eor	r19, r19
    3670:	da 01       	movw	r26, r20
    3672:	99 0f       	add	r25, r25
    3674:	31 1d       	adc	r19, r1
    3676:	87 fd       	sbrc	r24, 7
    3678:	91 60       	ori	r25, 0x01	; 1
    367a:	00 96       	adiw	r24, 0x00	; 0
    367c:	61 05       	cpc	r22, r1
    367e:	71 05       	cpc	r23, r1
    3680:	39 f4       	brne	.+14     	; 0x3690 <__ftoa_engine+0x28>
    3682:	32 60       	ori	r19, 0x02	; 2
    3684:	2e 5f       	subi	r18, 0xFE	; 254
    3686:	3d 93       	st	X+, r19
    3688:	30 e3       	ldi	r19, 0x30	; 48
    368a:	2a 95       	dec	r18
    368c:	e1 f7       	brne	.-8      	; 0x3686 <__ftoa_engine+0x1e>
    368e:	08 95       	ret
    3690:	9f 3f       	cpi	r25, 0xFF	; 255
    3692:	30 f0       	brcs	.+12     	; 0x36a0 <__ftoa_engine+0x38>
    3694:	80 38       	cpi	r24, 0x80	; 128
    3696:	71 05       	cpc	r23, r1
    3698:	61 05       	cpc	r22, r1
    369a:	09 f0       	breq	.+2      	; 0x369e <__ftoa_engine+0x36>
    369c:	3c 5f       	subi	r19, 0xFC	; 252
    369e:	3c 5f       	subi	r19, 0xFC	; 252
    36a0:	3d 93       	st	X+, r19
    36a2:	91 30       	cpi	r25, 0x01	; 1
    36a4:	08 f0       	brcs	.+2      	; 0x36a8 <__ftoa_engine+0x40>
    36a6:	80 68       	ori	r24, 0x80	; 128
    36a8:	91 1d       	adc	r25, r1
    36aa:	df 93       	push	r29
    36ac:	cf 93       	push	r28
    36ae:	1f 93       	push	r17
    36b0:	0f 93       	push	r16
    36b2:	ff 92       	push	r15
    36b4:	ef 92       	push	r14
    36b6:	19 2f       	mov	r17, r25
    36b8:	98 7f       	andi	r25, 0xF8	; 248
    36ba:	96 95       	lsr	r25
    36bc:	e9 2f       	mov	r30, r25
    36be:	96 95       	lsr	r25
    36c0:	96 95       	lsr	r25
    36c2:	e9 0f       	add	r30, r25
    36c4:	ff 27       	eor	r31, r31
    36c6:	e2 55       	subi	r30, 0x52	; 82
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	99 27       	eor	r25, r25
    36cc:	33 27       	eor	r19, r19
    36ce:	ee 24       	eor	r14, r14
    36d0:	ff 24       	eor	r15, r15
    36d2:	a7 01       	movw	r20, r14
    36d4:	e7 01       	movw	r28, r14
    36d6:	05 90       	lpm	r0, Z+
    36d8:	08 94       	sec
    36da:	07 94       	ror	r0
    36dc:	28 f4       	brcc	.+10     	; 0x36e8 <__ftoa_engine+0x80>
    36de:	36 0f       	add	r19, r22
    36e0:	e7 1e       	adc	r14, r23
    36e2:	f8 1e       	adc	r15, r24
    36e4:	49 1f       	adc	r20, r25
    36e6:	51 1d       	adc	r21, r1
    36e8:	66 0f       	add	r22, r22
    36ea:	77 1f       	adc	r23, r23
    36ec:	88 1f       	adc	r24, r24
    36ee:	99 1f       	adc	r25, r25
    36f0:	06 94       	lsr	r0
    36f2:	a1 f7       	brne	.-24     	; 0x36dc <__ftoa_engine+0x74>
    36f4:	05 90       	lpm	r0, Z+
    36f6:	07 94       	ror	r0
    36f8:	28 f4       	brcc	.+10     	; 0x3704 <__ftoa_engine+0x9c>
    36fa:	e7 0e       	add	r14, r23
    36fc:	f8 1e       	adc	r15, r24
    36fe:	49 1f       	adc	r20, r25
    3700:	56 1f       	adc	r21, r22
    3702:	c1 1d       	adc	r28, r1
    3704:	77 0f       	add	r23, r23
    3706:	88 1f       	adc	r24, r24
    3708:	99 1f       	adc	r25, r25
    370a:	66 1f       	adc	r22, r22
    370c:	06 94       	lsr	r0
    370e:	a1 f7       	brne	.-24     	; 0x36f8 <__ftoa_engine+0x90>
    3710:	05 90       	lpm	r0, Z+
    3712:	07 94       	ror	r0
    3714:	28 f4       	brcc	.+10     	; 0x3720 <__ftoa_engine+0xb8>
    3716:	f8 0e       	add	r15, r24
    3718:	49 1f       	adc	r20, r25
    371a:	56 1f       	adc	r21, r22
    371c:	c7 1f       	adc	r28, r23
    371e:	d1 1d       	adc	r29, r1
    3720:	88 0f       	add	r24, r24
    3722:	99 1f       	adc	r25, r25
    3724:	66 1f       	adc	r22, r22
    3726:	77 1f       	adc	r23, r23
    3728:	06 94       	lsr	r0
    372a:	a1 f7       	brne	.-24     	; 0x3714 <__ftoa_engine+0xac>
    372c:	05 90       	lpm	r0, Z+
    372e:	07 94       	ror	r0
    3730:	20 f4       	brcc	.+8      	; 0x373a <__ftoa_engine+0xd2>
    3732:	49 0f       	add	r20, r25
    3734:	56 1f       	adc	r21, r22
    3736:	c7 1f       	adc	r28, r23
    3738:	d8 1f       	adc	r29, r24
    373a:	99 0f       	add	r25, r25
    373c:	66 1f       	adc	r22, r22
    373e:	77 1f       	adc	r23, r23
    3740:	88 1f       	adc	r24, r24
    3742:	06 94       	lsr	r0
    3744:	a9 f7       	brne	.-22     	; 0x3730 <__ftoa_engine+0xc8>
    3746:	84 91       	lpm	r24, Z+
    3748:	10 95       	com	r17
    374a:	17 70       	andi	r17, 0x07	; 7
    374c:	41 f0       	breq	.+16     	; 0x375e <__ftoa_engine+0xf6>
    374e:	d6 95       	lsr	r29
    3750:	c7 95       	ror	r28
    3752:	57 95       	ror	r21
    3754:	47 95       	ror	r20
    3756:	f7 94       	ror	r15
    3758:	e7 94       	ror	r14
    375a:	1a 95       	dec	r17
    375c:	c1 f7       	brne	.-16     	; 0x374e <__ftoa_engine+0xe6>
    375e:	e4 e5       	ldi	r30, 0x54	; 84
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	68 94       	set
    3764:	15 90       	lpm	r1, Z+
    3766:	15 91       	lpm	r17, Z+
    3768:	35 91       	lpm	r19, Z+
    376a:	65 91       	lpm	r22, Z+
    376c:	95 91       	lpm	r25, Z+
    376e:	05 90       	lpm	r0, Z+
    3770:	7f e2       	ldi	r23, 0x2F	; 47
    3772:	73 95       	inc	r23
    3774:	e1 18       	sub	r14, r1
    3776:	f1 0a       	sbc	r15, r17
    3778:	43 0b       	sbc	r20, r19
    377a:	56 0b       	sbc	r21, r22
    377c:	c9 0b       	sbc	r28, r25
    377e:	d0 09       	sbc	r29, r0
    3780:	c0 f7       	brcc	.-16     	; 0x3772 <__ftoa_engine+0x10a>
    3782:	e1 0c       	add	r14, r1
    3784:	f1 1e       	adc	r15, r17
    3786:	43 1f       	adc	r20, r19
    3788:	56 1f       	adc	r21, r22
    378a:	c9 1f       	adc	r28, r25
    378c:	d0 1d       	adc	r29, r0
    378e:	7e f4       	brtc	.+30     	; 0x37ae <__ftoa_engine+0x146>
    3790:	70 33       	cpi	r23, 0x30	; 48
    3792:	11 f4       	brne	.+4      	; 0x3798 <__ftoa_engine+0x130>
    3794:	8a 95       	dec	r24
    3796:	e6 cf       	rjmp	.-52     	; 0x3764 <__ftoa_engine+0xfc>
    3798:	e8 94       	clt
    379a:	01 50       	subi	r16, 0x01	; 1
    379c:	30 f0       	brcs	.+12     	; 0x37aa <__ftoa_engine+0x142>
    379e:	08 0f       	add	r16, r24
    37a0:	0a f4       	brpl	.+2      	; 0x37a4 <__ftoa_engine+0x13c>
    37a2:	00 27       	eor	r16, r16
    37a4:	02 17       	cp	r16, r18
    37a6:	08 f4       	brcc	.+2      	; 0x37aa <__ftoa_engine+0x142>
    37a8:	20 2f       	mov	r18, r16
    37aa:	23 95       	inc	r18
    37ac:	02 2f       	mov	r16, r18
    37ae:	7a 33       	cpi	r23, 0x3A	; 58
    37b0:	28 f0       	brcs	.+10     	; 0x37bc <__ftoa_engine+0x154>
    37b2:	79 e3       	ldi	r23, 0x39	; 57
    37b4:	7d 93       	st	X+, r23
    37b6:	2a 95       	dec	r18
    37b8:	e9 f7       	brne	.-6      	; 0x37b4 <__ftoa_engine+0x14c>
    37ba:	10 c0       	rjmp	.+32     	; 0x37dc <__ftoa_engine+0x174>
    37bc:	7d 93       	st	X+, r23
    37be:	2a 95       	dec	r18
    37c0:	89 f6       	brne	.-94     	; 0x3764 <__ftoa_engine+0xfc>
    37c2:	06 94       	lsr	r0
    37c4:	97 95       	ror	r25
    37c6:	67 95       	ror	r22
    37c8:	37 95       	ror	r19
    37ca:	17 95       	ror	r17
    37cc:	17 94       	ror	r1
    37ce:	e1 18       	sub	r14, r1
    37d0:	f1 0a       	sbc	r15, r17
    37d2:	43 0b       	sbc	r20, r19
    37d4:	56 0b       	sbc	r21, r22
    37d6:	c9 0b       	sbc	r28, r25
    37d8:	d0 09       	sbc	r29, r0
    37da:	98 f0       	brcs	.+38     	; 0x3802 <__ftoa_engine+0x19a>
    37dc:	23 95       	inc	r18
    37de:	7e 91       	ld	r23, -X
    37e0:	73 95       	inc	r23
    37e2:	7a 33       	cpi	r23, 0x3A	; 58
    37e4:	08 f0       	brcs	.+2      	; 0x37e8 <__ftoa_engine+0x180>
    37e6:	70 e3       	ldi	r23, 0x30	; 48
    37e8:	7c 93       	st	X, r23
    37ea:	20 13       	cpse	r18, r16
    37ec:	b8 f7       	brcc	.-18     	; 0x37dc <__ftoa_engine+0x174>
    37ee:	7e 91       	ld	r23, -X
    37f0:	70 61       	ori	r23, 0x10	; 16
    37f2:	7d 93       	st	X+, r23
    37f4:	30 f0       	brcs	.+12     	; 0x3802 <__ftoa_engine+0x19a>
    37f6:	83 95       	inc	r24
    37f8:	71 e3       	ldi	r23, 0x31	; 49
    37fa:	7d 93       	st	X+, r23
    37fc:	70 e3       	ldi	r23, 0x30	; 48
    37fe:	2a 95       	dec	r18
    3800:	e1 f7       	brne	.-8      	; 0x37fa <__ftoa_engine+0x192>
    3802:	11 24       	eor	r1, r1
    3804:	ef 90       	pop	r14
    3806:	ff 90       	pop	r15
    3808:	0f 91       	pop	r16
    380a:	1f 91       	pop	r17
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	99 27       	eor	r25, r25
    3812:	87 fd       	sbrc	r24, 7
    3814:	90 95       	com	r25
    3816:	08 95       	ret

00003818 <strrev>:
    3818:	dc 01       	movw	r26, r24
    381a:	fc 01       	movw	r30, r24
    381c:	67 2f       	mov	r22, r23
    381e:	71 91       	ld	r23, Z+
    3820:	77 23       	and	r23, r23
    3822:	e1 f7       	brne	.-8      	; 0x381c <strrev+0x4>
    3824:	32 97       	sbiw	r30, 0x02	; 2
    3826:	04 c0       	rjmp	.+8      	; 0x3830 <strrev+0x18>
    3828:	7c 91       	ld	r23, X
    382a:	6d 93       	st	X+, r22
    382c:	70 83       	st	Z, r23
    382e:	62 91       	ld	r22, -Z
    3830:	ae 17       	cp	r26, r30
    3832:	bf 07       	cpc	r27, r31
    3834:	c8 f3       	brcs	.-14     	; 0x3828 <strrev+0x10>
    3836:	08 95       	ret

00003838 <__udivmodhi4>:
    3838:	aa 1b       	sub	r26, r26
    383a:	bb 1b       	sub	r27, r27
    383c:	51 e1       	ldi	r21, 0x11	; 17
    383e:	07 c0       	rjmp	.+14     	; 0x384e <__udivmodhi4_ep>

00003840 <__udivmodhi4_loop>:
    3840:	aa 1f       	adc	r26, r26
    3842:	bb 1f       	adc	r27, r27
    3844:	a6 17       	cp	r26, r22
    3846:	b7 07       	cpc	r27, r23
    3848:	10 f0       	brcs	.+4      	; 0x384e <__udivmodhi4_ep>
    384a:	a6 1b       	sub	r26, r22
    384c:	b7 0b       	sbc	r27, r23

0000384e <__udivmodhi4_ep>:
    384e:	88 1f       	adc	r24, r24
    3850:	99 1f       	adc	r25, r25
    3852:	5a 95       	dec	r21
    3854:	a9 f7       	brne	.-22     	; 0x3840 <__udivmodhi4_loop>
    3856:	80 95       	com	r24
    3858:	90 95       	com	r25
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	08 95       	ret

00003860 <_exit>:
    3860:	f8 94       	cli

00003862 <__stop_program>:
    3862:	ff cf       	rjmp	.-2      	; 0x3862 <__stop_program>
