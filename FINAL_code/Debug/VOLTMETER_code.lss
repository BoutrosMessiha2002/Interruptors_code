
VOLTMETER_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006fa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c2  00800060  00006fa6  0000703a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800222  00800222  000071fc  2**0
                  ALLOC
  3 .stab         00004668  00000000  00000000  000071fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ebf  00000000  00000000  0000b864  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c723  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c8c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000cab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000eec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00010246  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001141c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000115dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000118d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	12 e0       	ldi	r17, 0x02	; 2
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e6 ea       	ldi	r30, 0xA6	; 166
     162:	ff e6       	ldi	r31, 0x6F	; 111
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a2 32       	cpi	r26, 0x22	; 34
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	12 e0       	ldi	r17, 0x02	; 2
     172:	a2 e2       	ldi	r26, 0x22	; 34
     174:	b2 e0       	ldi	r27, 0x02	; 2
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ad 33       	cpi	r26, 0x3D	; 61
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <main>
     184:	0c 94 d1 37 	jmp	0x6fa2	; 0x6fa2 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 fa 34 	jmp	0x69f4	; 0x69f4 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	aa e1       	ldi	r26, 0x1A	; 26
     222:	b1 e0       	ldi	r27, 0x01	; 1
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 16 35 	jmp	0x6a2c	; 0x6a2c <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 06 35 	jmp	0x6a0c	; 0x6a0c <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 06 35 	jmp	0x6a0c	; 0x6a0c <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 fa 34 	jmp	0x69f4	; 0x69f4 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8a e1       	ldi	r24, 0x1A	; 26
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 16 35 	jmp	0x6a2c	; 0x6a2c <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 02 35 	jmp	0x6a04	; 0x6a04 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6a e1       	ldi	r22, 0x1A	; 26
     796:	71 e0       	ldi	r23, 0x01	; 1
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 1e 35 	jmp	0x6a3c	; 0x6a3c <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 06 35 	jmp	0x6a0c	; 0x6a0c <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 06 35 	jmp	0x6a0c	; 0x6a0c <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 06 35 	jmp	0x6a0c	; 0x6a0c <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 26 35 	jmp	0x6a4c	; 0x6a4c <__epilogue_restores__+0x20>

00000a4c <__floatunsisf>:
     a4c:	a8 e0       	ldi	r26, 0x08	; 8
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 02 35 	jmp	0x6a04	; 0x6a04 <__prologue_saves__+0x10>
     a58:	7b 01       	movw	r14, r22
     a5a:	8c 01       	movw	r16, r24
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__floatunsisf+0x20>
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	60 c0       	rjmp	.+192    	; 0xb2c <__floatunsisf+0xe0>
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__clzsi2>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f7 ff       	sbrs	r31, 7
     a90:	3b c0       	rjmp	.+118    	; 0xb08 <__floatunsisf+0xbc>
     a92:	22 27       	eor	r18, r18
     a94:	33 27       	eor	r19, r19
     a96:	2e 1b       	sub	r18, r30
     a98:	3f 0b       	sbc	r19, r31
     a9a:	57 01       	movw	r10, r14
     a9c:	68 01       	movw	r12, r16
     a9e:	02 2e       	mov	r0, r18
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__floatunsisf+0x5e>
     aa2:	d6 94       	lsr	r13
     aa4:	c7 94       	ror	r12
     aa6:	b7 94       	ror	r11
     aa8:	a7 94       	ror	r10
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__floatunsisf+0x56>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__floatunsisf+0x7c>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	2a 95       	dec	r18
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__floatunsisf+0x74>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 09       	sbc	r26, r1
     ad0:	b1 09       	sbc	r27, r1
     ad2:	8e 21       	and	r24, r14
     ad4:	9f 21       	and	r25, r15
     ad6:	a0 23       	and	r26, r16
     ad8:	b1 23       	and	r27, r17
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	21 f0       	breq	.+8      	; 0xaea <__floatunsisf+0x9e>
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	4a 29       	or	r20, r10
     aec:	5b 29       	or	r21, r11
     aee:	6c 29       	or	r22, r12
     af0:	7d 29       	or	r23, r13
     af2:	4d 83       	std	Y+5, r20	; 0x05
     af4:	5e 83       	std	Y+6, r21	; 0x06
     af6:	6f 83       	std	Y+7, r22	; 0x07
     af8:	78 87       	std	Y+8, r23	; 0x08
     afa:	8e e1       	ldi	r24, 0x1E	; 30
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8e 1b       	sub	r24, r30
     b00:	9f 0b       	sbc	r25, r31
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	12 c0       	rjmp	.+36     	; 0xb2c <__floatunsisf+0xe0>
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	81 f0       	breq	.+32     	; 0xb2c <__floatunsisf+0xe0>
     b0c:	0e 2e       	mov	r0, r30
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__floatunsisf+0xcc>
     b10:	ee 0c       	add	r14, r14
     b12:	ff 1c       	adc	r15, r15
     b14:	00 1f       	adc	r16, r16
     b16:	11 1f       	adc	r17, r17
     b18:	0a 94       	dec	r0
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <__floatunsisf+0xc4>
     b1c:	ed 82       	std	Y+5, r14	; 0x05
     b1e:	fe 82       	std	Y+6, r15	; 0x06
     b20:	0f 83       	std	Y+7, r16	; 0x07
     b22:	18 87       	std	Y+8, r17	; 0x08
     b24:	ce 1a       	sub	r12, r30
     b26:	df 0a       	sbc	r13, r31
     b28:	dc 82       	std	Y+4, r13	; 0x04
     b2a:	cb 82       	std	Y+3, r12	; 0x03
     b2c:	1a 82       	std	Y+2, r1	; 0x02
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     b36:	28 96       	adiw	r28, 0x08	; 8
     b38:	ea e0       	ldi	r30, 0x0A	; 10
     b3a:	0c 94 1e 35 	jmp	0x6a3c	; 0x6a3c <__epilogue_restores__+0x10>

00000b3e <__clzsi2>:
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	7b 01       	movw	r14, r22
     b48:	8c 01       	movw	r16, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	e8 16       	cp	r14, r24
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	f8 06       	cpc	r15, r24
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 07       	cpc	r16, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	18 07       	cpc	r17, r24
     b5a:	88 f4       	brcc	.+34     	; 0xb7e <__clzsi2+0x40>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	e8 16       	cp	r14, r24
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <__clzsi2+0x36>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__clzsi2+0x36>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <__clzsi2+0x64>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__clzsi2+0x64>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	e8 16       	cp	r14, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f8 06       	cpc	r15, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	08 07       	cpc	r16, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	18 07       	cpc	r17, r24
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <__clzsi2+0x5c>
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__clzsi2+0x64>
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	20 e2       	ldi	r18, 0x20	; 32
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	28 1b       	sub	r18, r24
     bac:	39 0b       	sbc	r19, r25
     bae:	4a 0b       	sbc	r20, r26
     bb0:	5b 0b       	sbc	r21, r27
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__clzsi2+0x7e>
     bb4:	16 95       	lsr	r17
     bb6:	07 95       	ror	r16
     bb8:	f7 94       	ror	r15
     bba:	e7 94       	ror	r14
     bbc:	8a 95       	dec	r24
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__clzsi2+0x76>
     bc0:	f7 01       	movw	r30, r14
     bc2:	ee 5d       	subi	r30, 0xDE	; 222
     bc4:	fe 4f       	sbci	r31, 0xFE	; 254
     bc6:	80 81       	ld	r24, Z
     bc8:	28 1b       	sub	r18, r24
     bca:	31 09       	sbc	r19, r1
     bcc:	41 09       	sbc	r20, r1
     bce:	51 09       	sbc	r21, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <__pack_f>:
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	fc 01       	movw	r30, r24
     be8:	e4 80       	ldd	r14, Z+4	; 0x04
     bea:	f5 80       	ldd	r15, Z+5	; 0x05
     bec:	06 81       	ldd	r16, Z+6	; 0x06
     bee:	17 81       	ldd	r17, Z+7	; 0x07
     bf0:	d1 80       	ldd	r13, Z+1	; 0x01
     bf2:	80 81       	ld	r24, Z
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <__pack_f+0x2e>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e1       	ldi	r26, 0x10	; 16
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e8 2a       	or	r14, r24
     c02:	f9 2a       	or	r15, r25
     c04:	0a 2b       	or	r16, r26
     c06:	1b 2b       	or	r17, r27
     c08:	a5 c0       	rjmp	.+330    	; 0xd54 <__pack_f+0x178>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__pack_f+0x34>
     c0e:	9f c0       	rjmp	.+318    	; 0xd4e <__pack_f+0x172>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	21 f4       	brne	.+8      	; 0xc1c <__pack_f+0x40>
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <__pack_f+0x4a>
     c1c:	e1 14       	cp	r14, r1
     c1e:	f1 04       	cpc	r15, r1
     c20:	01 05       	cpc	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	19 f4       	brne	.+6      	; 0xc2c <__pack_f+0x50>
     c26:	e0 e0       	ldi	r30, 0x00	; 0
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	96 c0       	rjmp	.+300    	; 0xd58 <__pack_f+0x17c>
     c2c:	62 81       	ldd	r22, Z+2	; 0x02
     c2e:	73 81       	ldd	r23, Z+3	; 0x03
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	62 38       	cpi	r22, 0x82	; 130
     c34:	79 07       	cpc	r23, r25
     c36:	0c f0       	brlt	.+2      	; 0xc3a <__pack_f+0x5e>
     c38:	5b c0       	rjmp	.+182    	; 0xcf0 <__pack_f+0x114>
     c3a:	22 e8       	ldi	r18, 0x82	; 130
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	26 1b       	sub	r18, r22
     c40:	37 0b       	sbc	r19, r23
     c42:	2a 31       	cpi	r18, 0x1A	; 26
     c44:	31 05       	cpc	r19, r1
     c46:	2c f0       	brlt	.+10     	; 0xc52 <__pack_f+0x76>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <__pack_f+0xca>
     c52:	b8 01       	movw	r22, r16
     c54:	a7 01       	movw	r20, r14
     c56:	02 2e       	mov	r0, r18
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0x86>
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	57 95       	ror	r21
     c60:	47 95       	ror	r20
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__pack_f+0x7e>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__pack_f+0x9c>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	2a 95       	dec	r18
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__pack_f+0x94>
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	a1 09       	sbc	r26, r1
     c80:	b1 09       	sbc	r27, r1
     c82:	8e 21       	and	r24, r14
     c84:	9f 21       	and	r25, r15
     c86:	a0 23       	and	r26, r16
     c88:	b1 23       	and	r27, r17
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	21 f0       	breq	.+8      	; 0xc9a <__pack_f+0xbe>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	9a 01       	movw	r18, r20
     c9c:	ab 01       	movw	r20, r22
     c9e:	28 2b       	or	r18, r24
     ca0:	39 2b       	or	r19, r25
     ca2:	4a 2b       	or	r20, r26
     ca4:	5b 2b       	or	r21, r27
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	a0 70       	andi	r26, 0x00	; 0
     cb0:	b0 70       	andi	r27, 0x00	; 0
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0xee>
     cbc:	27 ff       	sbrs	r18, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__pack_f+0xf6>
     cc0:	20 5c       	subi	r18, 0xC0	; 192
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	4f 4f       	sbci	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0xf6>
     cca:	21 5c       	subi	r18, 0xC1	; 193
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	4f 4f       	sbci	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	3a 07       	cpc	r19, r26
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	4a 07       	cpc	r20, r26
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	5a 07       	cpc	r21, r26
     ce4:	10 f0       	brcs	.+4      	; 0xcea <__pack_f+0x10e>
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	79 01       	movw	r14, r18
     cec:	8a 01       	movw	r16, r20
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <__pack_f+0x162>
     cf0:	60 38       	cpi	r22, 0x80	; 128
     cf2:	71 05       	cpc	r23, r1
     cf4:	64 f5       	brge	.+88     	; 0xd4e <__pack_f+0x172>
     cf6:	fb 01       	movw	r30, r22
     cf8:	e1 58       	subi	r30, 0x81	; 129
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	d8 01       	movw	r26, r16
     cfe:	c7 01       	movw	r24, r14
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	a0 70       	andi	r26, 0x00	; 0
     d06:	b0 70       	andi	r27, 0x00	; 0
     d08:	80 34       	cpi	r24, 0x40	; 64
     d0a:	91 05       	cpc	r25, r1
     d0c:	a1 05       	cpc	r26, r1
     d0e:	b1 05       	cpc	r27, r1
     d10:	39 f4       	brne	.+14     	; 0xd20 <__pack_f+0x144>
     d12:	e7 fe       	sbrs	r14, 7
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <__pack_f+0x154>
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__pack_f+0x14c>
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 0e       	add	r14, r24
     d2a:	f9 1e       	adc	r15, r25
     d2c:	0a 1f       	adc	r16, r26
     d2e:	1b 1f       	adc	r17, r27
     d30:	17 ff       	sbrs	r17, 7
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__pack_f+0x162>
     d34:	16 95       	lsr	r17
     d36:	07 95       	ror	r16
     d38:	f7 94       	ror	r15
     d3a:	e7 94       	ror	r14
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	16 95       	lsr	r17
     d42:	07 95       	ror	r16
     d44:	f7 94       	ror	r15
     d46:	e7 94       	ror	r14
     d48:	8a 95       	dec	r24
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__pack_f+0x164>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <__pack_f+0x17c>
     d4e:	ee 24       	eor	r14, r14
     d50:	ff 24       	eor	r15, r15
     d52:	87 01       	movw	r16, r14
     d54:	ef ef       	ldi	r30, 0xFF	; 255
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	6e 2f       	mov	r22, r30
     d5a:	67 95       	ror	r22
     d5c:	66 27       	eor	r22, r22
     d5e:	67 95       	ror	r22
     d60:	90 2f       	mov	r25, r16
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	d7 94       	ror	r13
     d66:	dd 24       	eor	r13, r13
     d68:	d7 94       	ror	r13
     d6a:	8e 2f       	mov	r24, r30
     d6c:	86 95       	lsr	r24
     d6e:	49 2f       	mov	r20, r25
     d70:	46 2b       	or	r20, r22
     d72:	58 2f       	mov	r21, r24
     d74:	5d 29       	or	r21, r13
     d76:	b7 01       	movw	r22, r14
     d78:	ca 01       	movw	r24, r20
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	08 95       	ret

00000d86 <__unpack_f>:
     d86:	fc 01       	movw	r30, r24
     d88:	db 01       	movw	r26, r22
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	22 81       	ldd	r18, Z+2	; 0x02
     d90:	62 2f       	mov	r22, r18
     d92:	6f 77       	andi	r22, 0x7F	; 127
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	22 1f       	adc	r18, r18
     d98:	22 27       	eor	r18, r18
     d9a:	22 1f       	adc	r18, r18
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	89 2f       	mov	r24, r25
     da0:	88 0f       	add	r24, r24
     da2:	82 2b       	or	r24, r18
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	99 1f       	adc	r25, r25
     daa:	99 27       	eor	r25, r25
     dac:	99 1f       	adc	r25, r25
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 93       	st	X, r25
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	a9 f5       	brne	.+106    	; 0xe24 <__unpack_f+0x9e>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__unpack_f+0x42>
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	37 c0       	rjmp	.+110    	; 0xe36 <__unpack_f+0xb0>
     dc8:	82 e8       	ldi	r24, 0x82	; 130
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	9a 01       	movw	r18, r20
     dd6:	ab 01       	movw	r20, r22
     dd8:	67 e0       	ldi	r22, 0x07	; 7
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	55 1f       	adc	r21, r21
     de2:	6a 95       	dec	r22
     de4:	d1 f7       	brne	.-12     	; 0xdda <__unpack_f+0x54>
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	8c 93       	st	X, r24
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <__unpack_f+0x80>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	55 1f       	adc	r21, r21
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	13 97       	sbiw	r26, 0x03	; 3
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	9c 93       	st	X, r25
     e02:	8e 93       	st	-X, r24
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	20 30       	cpi	r18, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	38 07       	cpc	r19, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	48 07       	cpc	r20, r24
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	58 07       	cpc	r21, r24
     e14:	58 f3       	brcs	.-42     	; 0xdec <__unpack_f+0x66>
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	2d 93       	st	X+, r18
     e1a:	3d 93       	st	X+, r19
     e1c:	4d 93       	st	X+, r20
     e1e:	5c 93       	st	X, r21
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	08 95       	ret
     e24:	2f 3f       	cpi	r18, 0xFF	; 255
     e26:	31 05       	cpc	r19, r1
     e28:	79 f4       	brne	.+30     	; 0xe48 <__unpack_f+0xc2>
     e2a:	41 15       	cp	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	61 05       	cpc	r22, r1
     e30:	71 05       	cpc	r23, r1
     e32:	19 f4       	brne	.+6      	; 0xe3a <__unpack_f+0xb4>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	8c 93       	st	X, r24
     e38:	08 95       	ret
     e3a:	64 ff       	sbrs	r22, 4
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__unpack_f+0xbe>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <__unpack_f+0xe2>
     e44:	1c 92       	st	X, r1
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <__unpack_f+0xe2>
     e48:	2f 57       	subi	r18, 0x7F	; 127
     e4a:	30 40       	sbci	r19, 0x00	; 0
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	3c 93       	st	X, r19
     e50:	2e 93       	st	-X, r18
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	8c 93       	st	X, r24
     e58:	87 e0       	ldi	r24, 0x07	; 7
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	66 1f       	adc	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	8a 95       	dec	r24
     e64:	d1 f7       	brne	.-12     	; 0xe5a <__unpack_f+0xd4>
     e66:	70 64       	ori	r23, 0x40	; 64
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	4d 93       	st	X+, r20
     e6c:	5d 93       	st	X+, r21
     e6e:	6d 93       	st	X+, r22
     e70:	7c 93       	st	X, r23
     e72:	17 97       	sbiw	r26, 0x07	; 7
     e74:	08 95       	ret

00000e76 <__fpcmp_parts_f>:
     e76:	1f 93       	push	r17
     e78:	dc 01       	movw	r26, r24
     e7a:	fb 01       	movw	r30, r22
     e7c:	9c 91       	ld	r25, X
     e7e:	92 30       	cpi	r25, 0x02	; 2
     e80:	08 f4       	brcc	.+2      	; 0xe84 <__fpcmp_parts_f+0xe>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e84:	80 81       	ld	r24, Z
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	08 f4       	brcc	.+2      	; 0xe8c <__fpcmp_parts_f+0x16>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	51 f4       	brne	.+20     	; 0xea4 <__fpcmp_parts_f+0x2e>
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	1c 91       	ld	r17, X
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	99 f5       	brne	.+102    	; 0xefe <__fpcmp_parts_f+0x88>
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	68 2f       	mov	r22, r24
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	61 1b       	sub	r22, r17
     ea0:	71 09       	sbc	r23, r1
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <__fpcmp_parts_f+0xac>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__fpcmp_parts_f+0x3a>
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__fpcmp_parts_f+0x42>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	b9 f1       	breq	.+110    	; 0xf1e <__fpcmp_parts_f+0xa8>
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	88 23       	and	r24, r24
     eb4:	89 f1       	breq	.+98     	; 0xf18 <__fpcmp_parts_f+0xa2>
     eb6:	2d c0       	rjmp	.+90     	; 0xf12 <__fpcmp_parts_f+0x9c>
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	1c 91       	ld	r17, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	f1 f0       	breq	.+60     	; 0xefe <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	18 17       	cp	r17, r24
     ec6:	d9 f4       	brne	.+54     	; 0xefe <__fpcmp_parts_f+0x88>
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	2d 91       	ld	r18, X+
     ecc:	3c 91       	ld	r19, X
     ece:	13 97       	sbiw	r26, 0x03	; 3
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	94 f0       	brlt	.+36     	; 0xefe <__fpcmp_parts_f+0x88>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	bc f0       	brlt	.+46     	; 0xf0e <__fpcmp_parts_f+0x98>
     ee0:	14 96       	adiw	r26, 0x04	; 4
     ee2:	8d 91       	ld	r24, X+
     ee4:	9d 91       	ld	r25, X+
     ee6:	0d 90       	ld	r0, X+
     ee8:	bc 91       	ld	r27, X
     eea:	a0 2d       	mov	r26, r0
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	35 81       	ldd	r19, Z+5	; 0x05
     ef0:	46 81       	ldd	r20, Z+6	; 0x06
     ef2:	57 81       	ldd	r21, Z+7	; 0x07
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	4a 07       	cpc	r20, r26
     efa:	5b 07       	cpc	r21, r27
     efc:	18 f4       	brcc	.+6      	; 0xf04 <__fpcmp_parts_f+0x8e>
     efe:	11 23       	and	r17, r17
     f00:	41 f0       	breq	.+16     	; 0xf12 <__fpcmp_parts_f+0x9c>
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <__fpcmp_parts_f+0xa2>
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	a4 07       	cpc	r26, r20
     f0a:	b5 07       	cpc	r27, r21
     f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fpcmp_parts_f+0xa8>
     f0e:	11 23       	and	r17, r17
     f10:	19 f0       	breq	.+6      	; 0xf18 <__fpcmp_parts_f+0xa2>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <__fpcmp_parts_f+0xac>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__fpcmp_parts_f+0xac>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	cb 01       	movw	r24, r22
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <ADC_init>:
 */
#include"common_macros.h"
#include "adc.h"
#include<avr/io.h>
void ADC_init(const ADC_ConfigType*Config_Ptr)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <ADC_init+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=(ADMUX&0x3F)|((Config_Ptr->ref_volt)<<6);
     f36:	a7 e2       	ldi	r26, 0x27	; 39
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e7 e2       	ldi	r30, 0x27	; 39
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	28 2f       	mov	r18, r24
     f42:	2f 73       	andi	r18, 0x3F	; 63
     f44:	e9 81       	ldd	r30, Y+1	; 0x01
     f46:	fa 81       	ldd	r31, Y+2	; 0x02
     f48:	80 81       	ld	r24, Z
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	00 24       	eor	r0, r0
     f50:	96 95       	lsr	r25
     f52:	87 95       	ror	r24
     f54:	07 94       	ror	r0
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	07 94       	ror	r0
     f5c:	98 2f       	mov	r25, r24
     f5e:	80 2d       	mov	r24, r0
     f60:	82 2b       	or	r24, r18
     f62:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN);
     f64:	a6 e2       	ldi	r26, 0x26	; 38
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e6 e2       	ldi	r30, 0x26	; 38
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADIE);
     f72:	a6 e2       	ldi	r26, 0x26	; 38
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e6 e2       	ldi	r30, 0x26	; 38
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	87 7f       	andi	r24, 0xF7	; 247
     f7e:	8c 93       	st	X, r24
	ADCSRA=(ADCSRA&0xF8)|(Config_Ptr->prescaler);
     f80:	a6 e2       	ldi	r26, 0x26	; 38
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e6 e2       	ldi	r30, 0x26	; 38
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	98 2f       	mov	r25, r24
     f8c:	98 7f       	andi	r25, 0xF8	; 248
     f8e:	e9 81       	ldd	r30, Y+1	; 0x01
     f90:	fa 81       	ldd	r31, Y+2	; 0x02
     f92:	81 81       	ldd	r24, Z+1	; 0x01
     f94:	89 2b       	or	r24, r25
     f96:	8c 93       	st	X, r24
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <ADC_readChannel>:
uint16 ADC_readChannel(uint8 ch_num)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	0f 92       	push	r0
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=(ADMUX&0xE0)|(ch_num&0x1F);
     fae:	a7 e2       	ldi	r26, 0x27	; 39
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e7 e2       	ldi	r30, 0x27	; 39
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	98 2f       	mov	r25, r24
     fba:	90 7e       	andi	r25, 0xE0	; 224
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	8f 71       	andi	r24, 0x1F	; 31
     fc0:	89 2b       	or	r24, r25
     fc2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     fc4:	a6 e2       	ldi	r26, 0x26	; 38
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e6 e2       	ldi	r30, 0x26	; 38
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 64       	ori	r24, 0x40	; 64
     fd0:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
     fd2:	e6 e2       	ldi	r30, 0x26	; 38
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	80 71       	andi	r24, 0x10	; 16
     fde:	90 70       	andi	r25, 0x00	; 0
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	b9 f3       	breq	.-18     	; 0xfd2 <ADC_readChannel+0x30>
	CLEAR_BIT(ADCSRA,ADIF);
     fe4:	a6 e2       	ldi	r26, 0x26	; 38
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e6 e2       	ldi	r30, 0x26	; 38
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8f 7e       	andi	r24, 0xEF	; 239
     ff0:	8c 93       	st	X, r24
	return ADC;
     ff2:	e4 e2       	ldi	r30, 0x24	; 36
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
}
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <GPIO_setupPinDirection+0x6>
    1008:	00 d0       	rcall	.+0      	; 0x100a <GPIO_setupPinDirection+0x8>
    100a:	0f 92       	push	r0
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	6a 83       	std	Y+2, r22	; 0x02
    1014:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	88 30       	cpi	r24, 0x08	; 8
    101a:	08 f0       	brcs	.+2      	; 0x101e <GPIO_setupPinDirection+0x1c>
    101c:	d5 c0       	rjmp	.+426    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	84 30       	cpi	r24, 0x04	; 4
    1022:	08 f0       	brcs	.+2      	; 0x1026 <GPIO_setupPinDirection+0x24>
    1024:	d1 c0       	rjmp	.+418    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	3d 83       	std	Y+5, r19	; 0x05
    102e:	2c 83       	std	Y+4, r18	; 0x04
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	91 05       	cpc	r25, r1
    1038:	09 f4       	brne	.+2      	; 0x103c <GPIO_setupPinDirection+0x3a>
    103a:	43 c0       	rjmp	.+134    	; 0x10c2 <GPIO_setupPinDirection+0xc0>
    103c:	2c 81       	ldd	r18, Y+4	; 0x04
    103e:	3d 81       	ldd	r19, Y+5	; 0x05
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	2c f4       	brge	.+10     	; 0x1050 <GPIO_setupPinDirection+0x4e>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	71 f0       	breq	.+28     	; 0x106a <GPIO_setupPinDirection+0x68>
    104e:	bc c0       	rjmp	.+376    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
    1050:	2c 81       	ldd	r18, Y+4	; 0x04
    1052:	3d 81       	ldd	r19, Y+5	; 0x05
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <GPIO_setupPinDirection+0x5a>
    105a:	5f c0       	rjmp	.+190    	; 0x111a <GPIO_setupPinDirection+0x118>
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	91 05       	cpc	r25, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <GPIO_setupPinDirection+0x66>
    1066:	85 c0       	rjmp	.+266    	; 0x1172 <GPIO_setupPinDirection+0x170>
    1068:	af c0       	rjmp	.+350    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	a1 f4       	brne	.+40     	; 0x1098 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1070:	aa e3       	ldi	r26, 0x3A	; 58
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ea e3       	ldi	r30, 0x3A	; 58
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <GPIO_setupPinDirection+0x8c>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <GPIO_setupPinDirection+0x88>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	98 c0       	rjmp	.+304    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1098:	aa e3       	ldi	r26, 0x3A	; 58
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ea e3       	ldi	r30, 0x3A	; 58
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <GPIO_setupPinDirection+0xb4>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <GPIO_setupPinDirection+0xb0>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	83 c0       	rjmp	.+262    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	a1 f4       	brne	.+40     	; 0x10f0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10c8:	a7 e3       	ldi	r26, 0x37	; 55
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e7 e3       	ldi	r30, 0x37	; 55
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <GPIO_setupPinDirection+0xe4>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <GPIO_setupPinDirection+0xe0>
    10ea:	84 2b       	or	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	6c c0       	rjmp	.+216    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10f0:	a7 e3       	ldi	r26, 0x37	; 55
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e7 e3       	ldi	r30, 0x37	; 55
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <GPIO_setupPinDirection+0x10c>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <GPIO_setupPinDirection+0x108>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	57 c0       	rjmp	.+174    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	a1 f4       	brne	.+40     	; 0x1148 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1120:	a4 e3       	ldi	r26, 0x34	; 52
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e4 e3       	ldi	r30, 0x34	; 52
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <GPIO_setupPinDirection+0x13c>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <GPIO_setupPinDirection+0x138>
    1142:	84 2b       	or	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	40 c0       	rjmp	.+128    	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1148:	a4 e3       	ldi	r26, 0x34	; 52
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e4 e3       	ldi	r30, 0x34	; 52
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <GPIO_setupPinDirection+0x164>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <GPIO_setupPinDirection+0x160>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	2b c0       	rjmp	.+86     	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	a1 f4       	brne	.+40     	; 0x11a0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1178:	a1 e3       	ldi	r26, 0x31	; 49
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <GPIO_setupPinDirection+0x194>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <GPIO_setupPinDirection+0x190>
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	14 c0       	rjmp	.+40     	; 0x11c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11a0:	a1 e3       	ldi	r26, 0x31	; 49
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e1 e3       	ldi	r30, 0x31	; 49
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <GPIO_setupPinDirection+0x1bc>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <GPIO_setupPinDirection+0x1b8>
    11c2:	80 95       	com	r24
    11c4:	84 23       	and	r24, r20
    11c6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <GPIO_writePin+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_writePin+0x8>
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	6a 83       	std	Y+2, r22	; 0x02
    11ea:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	88 30       	cpi	r24, 0x08	; 8
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <GPIO_writePin+0x1c>
    11f2:	d5 c0       	rjmp	.+426    	; 0x139e <GPIO_writePin+0x1c6>
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	84 30       	cpi	r24, 0x04	; 4
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <GPIO_writePin+0x24>
    11fa:	d1 c0       	rjmp	.+418    	; 0x139e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3d 83       	std	Y+5, r19	; 0x05
    1204:	2c 83       	std	Y+4, r18	; 0x04
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	9d 81       	ldd	r25, Y+5	; 0x05
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	09 f4       	brne	.+2      	; 0x1212 <GPIO_writePin+0x3a>
    1210:	43 c0       	rjmp	.+134    	; 0x1298 <GPIO_writePin+0xc0>
    1212:	2c 81       	ldd	r18, Y+4	; 0x04
    1214:	3d 81       	ldd	r19, Y+5	; 0x05
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <GPIO_writePin+0x4e>
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	71 f0       	breq	.+28     	; 0x1240 <GPIO_writePin+0x68>
    1224:	bc c0       	rjmp	.+376    	; 0x139e <GPIO_writePin+0x1c6>
    1226:	2c 81       	ldd	r18, Y+4	; 0x04
    1228:	3d 81       	ldd	r19, Y+5	; 0x05
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <GPIO_writePin+0x5a>
    1230:	5f c0       	rjmp	.+190    	; 0x12f0 <GPIO_writePin+0x118>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <GPIO_writePin+0x66>
    123c:	85 c0       	rjmp	.+266    	; 0x1348 <GPIO_writePin+0x170>
    123e:	af c0       	rjmp	.+350    	; 0x139e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	a1 f4       	brne	.+40     	; 0x126e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1246:	ab e3       	ldi	r26, 0x3B	; 59
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	eb e3       	ldi	r30, 0x3B	; 59
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_writePin+0x8c>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_writePin+0x88>
    1268:	84 2b       	or	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	98 c0       	rjmp	.+304    	; 0x139e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    126e:	ab e3       	ldi	r26, 0x3B	; 59
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	eb e3       	ldi	r30, 0x3B	; 59
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_writePin+0xb4>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_writePin+0xb0>
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	83 c0       	rjmp	.+262    	; 0x139e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	a1 f4       	brne	.+40     	; 0x12c6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    129e:	a8 e3       	ldi	r26, 0x38	; 56
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e8 e3       	ldi	r30, 0x38	; 56
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <GPIO_writePin+0xe4>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <GPIO_writePin+0xe0>
    12c0:	84 2b       	or	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	6c c0       	rjmp	.+216    	; 0x139e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12c6:	a8 e3       	ldi	r26, 0x38	; 56
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e8 e3       	ldi	r30, 0x38	; 56
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <GPIO_writePin+0x10c>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <GPIO_writePin+0x108>
    12e8:	80 95       	com	r24
    12ea:	84 23       	and	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	57 c0       	rjmp	.+174    	; 0x139e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	a1 f4       	brne	.+40     	; 0x131e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12f6:	a5 e3       	ldi	r26, 0x35	; 53
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e5 e3       	ldi	r30, 0x35	; 53
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <GPIO_writePin+0x13c>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <GPIO_writePin+0x138>
    1318:	84 2b       	or	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	40 c0       	rjmp	.+128    	; 0x139e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    131e:	a5 e3       	ldi	r26, 0x35	; 53
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e3       	ldi	r30, 0x35	; 53
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <GPIO_writePin+0x164>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <GPIO_writePin+0x160>
    1340:	80 95       	com	r24
    1342:	84 23       	and	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	2b c0       	rjmp	.+86     	; 0x139e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	a1 f4       	brne	.+40     	; 0x1376 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    134e:	a2 e3       	ldi	r26, 0x32	; 50
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e2 e3       	ldi	r30, 0x32	; 50
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <GPIO_writePin+0x194>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <GPIO_writePin+0x190>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	14 c0       	rjmp	.+40     	; 0x139e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1376:	a2 e3       	ldi	r26, 0x32	; 50
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e2 e3       	ldi	r30, 0x32	; 50
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <GPIO_writePin+0x1bc>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <GPIO_writePin+0x1b8>
    1398:	80 95       	com	r24
    139a:	84 23       	and	r24, r20
    139c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <GPIO_readPin+0x6>
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <GPIO_readPin+0x8>
    13b6:	0f 92       	push	r0
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	8a 83       	std	Y+2, r24	; 0x02
    13be:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13c0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 30       	cpi	r24, 0x08	; 8
    13c6:	08 f0       	brcs	.+2      	; 0x13ca <GPIO_readPin+0x1c>
    13c8:	84 c0       	rjmp	.+264    	; 0x14d2 <GPIO_readPin+0x124>
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	08 f0       	brcs	.+2      	; 0x13d2 <GPIO_readPin+0x24>
    13d0:	80 c0       	rjmp	.+256    	; 0x14d2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3d 83       	std	Y+5, r19	; 0x05
    13da:	2c 83       	std	Y+4, r18	; 0x04
    13dc:	4c 81       	ldd	r20, Y+4	; 0x04
    13de:	5d 81       	ldd	r21, Y+5	; 0x05
    13e0:	41 30       	cpi	r20, 0x01	; 1
    13e2:	51 05       	cpc	r21, r1
    13e4:	79 f1       	breq	.+94     	; 0x1444 <GPIO_readPin+0x96>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	82 30       	cpi	r24, 0x02	; 2
    13ec:	91 05       	cpc	r25, r1
    13ee:	34 f4       	brge	.+12     	; 0x13fc <GPIO_readPin+0x4e>
    13f0:	2c 81       	ldd	r18, Y+4	; 0x04
    13f2:	3d 81       	ldd	r19, Y+5	; 0x05
    13f4:	21 15       	cp	r18, r1
    13f6:	31 05       	cpc	r19, r1
    13f8:	69 f0       	breq	.+26     	; 0x1414 <GPIO_readPin+0x66>
    13fa:	6b c0       	rjmp	.+214    	; 0x14d2 <GPIO_readPin+0x124>
    13fc:	4c 81       	ldd	r20, Y+4	; 0x04
    13fe:	5d 81       	ldd	r21, Y+5	; 0x05
    1400:	42 30       	cpi	r20, 0x02	; 2
    1402:	51 05       	cpc	r21, r1
    1404:	b9 f1       	breq	.+110    	; 0x1474 <GPIO_readPin+0xc6>
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
    1408:	9d 81       	ldd	r25, Y+5	; 0x05
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	91 05       	cpc	r25, r1
    140e:	09 f4       	brne	.+2      	; 0x1412 <GPIO_readPin+0x64>
    1410:	49 c0       	rjmp	.+146    	; 0x14a4 <GPIO_readPin+0xf6>
    1412:	5f c0       	rjmp	.+190    	; 0x14d2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1414:	e9 e3       	ldi	r30, 0x39	; 57
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a9 01       	movw	r20, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <GPIO_readPin+0x7e>
    1428:	55 95       	asr	r21
    142a:	47 95       	ror	r20
    142c:	8a 95       	dec	r24
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <GPIO_readPin+0x7a>
    1430:	ca 01       	movw	r24, r20
    1432:	81 70       	andi	r24, 0x01	; 1
    1434:	90 70       	andi	r25, 0x00	; 0
    1436:	88 23       	and	r24, r24
    1438:	19 f0       	breq	.+6      	; 0x1440 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	49 c0       	rjmp	.+146    	; 0x14d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1440:	19 82       	std	Y+1, r1	; 0x01
    1442:	47 c0       	rjmp	.+142    	; 0x14d2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1444:	e6 e3       	ldi	r30, 0x36	; 54
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a9 01       	movw	r20, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <GPIO_readPin+0xae>
    1458:	55 95       	asr	r21
    145a:	47 95       	ror	r20
    145c:	8a 95       	dec	r24
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <GPIO_readPin+0xaa>
    1460:	ca 01       	movw	r24, r20
    1462:	81 70       	andi	r24, 0x01	; 1
    1464:	90 70       	andi	r25, 0x00	; 0
    1466:	88 23       	and	r24, r24
    1468:	19 f0       	breq	.+6      	; 0x1470 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	31 c0       	rjmp	.+98     	; 0x14d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1470:	19 82       	std	Y+1, r1	; 0x01
    1472:	2f c0       	rjmp	.+94     	; 0x14d2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1474:	e3 e3       	ldi	r30, 0x33	; 51
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a9 01       	movw	r20, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <GPIO_readPin+0xde>
    1488:	55 95       	asr	r21
    148a:	47 95       	ror	r20
    148c:	8a 95       	dec	r24
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <GPIO_readPin+0xda>
    1490:	ca 01       	movw	r24, r20
    1492:	81 70       	andi	r24, 0x01	; 1
    1494:	90 70       	andi	r25, 0x00	; 0
    1496:	88 23       	and	r24, r24
    1498:	19 f0       	breq	.+6      	; 0x14a0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	19 c0       	rjmp	.+50     	; 0x14d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14a0:	19 82       	std	Y+1, r1	; 0x01
    14a2:	17 c0       	rjmp	.+46     	; 0x14d2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14a4:	e0 e3       	ldi	r30, 0x30	; 48
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a9 01       	movw	r20, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <GPIO_readPin+0x10e>
    14b8:	55 95       	asr	r21
    14ba:	47 95       	ror	r20
    14bc:	8a 95       	dec	r24
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <GPIO_readPin+0x10a>
    14c0:	ca 01       	movw	r24, r20
    14c2:	81 70       	andi	r24, 0x01	; 1
    14c4:	90 70       	andi	r25, 0x00	; 0
    14c6:	88 23       	and	r24, r24
    14c8:	19 f0       	breq	.+6      	; 0x14d0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14d0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <GPIO_setupPortDirection+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <GPIO_setupPortDirection+0x8>
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	84 30       	cpi	r24, 0x04	; 4
    14f8:	90 f5       	brcc	.+100    	; 0x155e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	3c 83       	std	Y+4, r19	; 0x04
    1502:	2b 83       	std	Y+3, r18	; 0x03
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	91 05       	cpc	r25, r1
    150c:	d1 f0       	breq	.+52     	; 0x1542 <GPIO_setupPortDirection+0x5e>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	2c f4       	brge	.+10     	; 0x1522 <GPIO_setupPortDirection+0x3e>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	61 f0       	breq	.+24     	; 0x1538 <GPIO_setupPortDirection+0x54>
    1520:	1e c0       	rjmp	.+60     	; 0x155e <GPIO_setupPortDirection+0x7a>
    1522:	2b 81       	ldd	r18, Y+3	; 0x03
    1524:	3c 81       	ldd	r19, Y+4	; 0x04
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	81 f0       	breq	.+32     	; 0x154c <GPIO_setupPortDirection+0x68>
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	91 05       	cpc	r25, r1
    1534:	81 f0       	breq	.+32     	; 0x1556 <GPIO_setupPortDirection+0x72>
    1536:	13 c0       	rjmp	.+38     	; 0x155e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1538:	ea e3       	ldi	r30, 0x3A	; 58
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	80 83       	st	Z, r24
    1540:	0e c0       	rjmp	.+28     	; 0x155e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1542:	e7 e3       	ldi	r30, 0x37	; 55
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	80 83       	st	Z, r24
    154a:	09 c0       	rjmp	.+18     	; 0x155e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    154c:	e4 e3       	ldi	r30, 0x34	; 52
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	80 83       	st	Z, r24
    1554:	04 c0       	rjmp	.+8      	; 0x155e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1556:	e1 e3       	ldi	r30, 0x31	; 49
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	80 83       	st	Z, r24
			break;
		}
	}
}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	00 d0       	rcall	.+0      	; 0x1572 <GPIO_writePort+0x6>
    1572:	00 d0       	rcall	.+0      	; 0x1574 <GPIO_writePort+0x8>
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	84 30       	cpi	r24, 0x04	; 4
    1580:	90 f5       	brcc	.+100    	; 0x15e6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	3c 83       	std	Y+4, r19	; 0x04
    158a:	2b 83       	std	Y+3, r18	; 0x03
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	91 05       	cpc	r25, r1
    1594:	d1 f0       	breq	.+52     	; 0x15ca <GPIO_writePort+0x5e>
    1596:	2b 81       	ldd	r18, Y+3	; 0x03
    1598:	3c 81       	ldd	r19, Y+4	; 0x04
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	2c f4       	brge	.+10     	; 0x15aa <GPIO_writePort+0x3e>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <GPIO_writePort+0x54>
    15a8:	1e c0       	rjmp	.+60     	; 0x15e6 <GPIO_writePort+0x7a>
    15aa:	2b 81       	ldd	r18, Y+3	; 0x03
    15ac:	3c 81       	ldd	r19, Y+4	; 0x04
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	81 f0       	breq	.+32     	; 0x15d4 <GPIO_writePort+0x68>
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	83 30       	cpi	r24, 0x03	; 3
    15ba:	91 05       	cpc	r25, r1
    15bc:	81 f0       	breq	.+32     	; 0x15de <GPIO_writePort+0x72>
    15be:	13 c0       	rjmp	.+38     	; 0x15e6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15c0:	eb e3       	ldi	r30, 0x3B	; 59
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	80 83       	st	Z, r24
    15c8:	0e c0       	rjmp	.+28     	; 0x15e6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15ca:	e8 e3       	ldi	r30, 0x38	; 56
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	80 83       	st	Z, r24
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15d4:	e5 e3       	ldi	r30, 0x35	; 53
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	80 83       	st	Z, r24
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15de:	e2 e3       	ldi	r30, 0x32	; 50
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	80 83       	st	Z, r24
			break;
		}
	}
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <GPIO_readPort+0x6>
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <GPIO_readPort+0x8>
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1602:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	84 30       	cpi	r24, 0x04	; 4
    1608:	90 f5       	brcc	.+100    	; 0x166e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3c 83       	std	Y+4, r19	; 0x04
    1612:	2b 83       	std	Y+3, r18	; 0x03
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	9c 81       	ldd	r25, Y+4	; 0x04
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	91 05       	cpc	r25, r1
    161c:	d1 f0       	breq	.+52     	; 0x1652 <GPIO_readPort+0x5e>
    161e:	2b 81       	ldd	r18, Y+3	; 0x03
    1620:	3c 81       	ldd	r19, Y+4	; 0x04
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	2c f4       	brge	.+10     	; 0x1632 <GPIO_readPort+0x3e>
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	61 f0       	breq	.+24     	; 0x1648 <GPIO_readPort+0x54>
    1630:	1e c0       	rjmp	.+60     	; 0x166e <GPIO_readPort+0x7a>
    1632:	2b 81       	ldd	r18, Y+3	; 0x03
    1634:	3c 81       	ldd	r19, Y+4	; 0x04
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	81 f0       	breq	.+32     	; 0x165c <GPIO_readPort+0x68>
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	91 05       	cpc	r25, r1
    1644:	81 f0       	breq	.+32     	; 0x1666 <GPIO_readPort+0x72>
    1646:	13 c0       	rjmp	.+38     	; 0x166e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1648:	e9 e3       	ldi	r30, 0x39	; 57
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	0e c0       	rjmp	.+28     	; 0x166e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1652:	e6 e3       	ldi	r30, 0x36	; 54
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	09 c0       	rjmp	.+18     	; 0x166e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    165c:	e3 e3       	ldi	r30, 0x33	; 51
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	04 c0       	rjmp	.+8      	; 0x166e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1666:	e0 e3       	ldi	r30, 0x30	; 48
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	61 97       	sbiw	r28, 0x11	; 17
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	62 e0       	ldi	r22, 0x02	; 2
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	63 e0       	ldi	r22, 0x03	; 3
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	64 e0       	ldi	r22, 0x04	; 4
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	65 e0       	ldi	r22, 0x05	; 5
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	66 e0       	ldi	r22, 0x06	; 6
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    16d8:	83 e0       	ldi	r24, 0x03	; 3
    16da:	67 e0       	ldi	r22, 0x07	; 7
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
#endif
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    16e2:	1f 86       	std	Y+15, r1	; 0x0f
    16e4:	a5 c0       	rjmp	.+330    	; 0x1830 <KEYPAD_getPressedKey+0x1b2>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    16e6:	83 e0       	ldi	r24, 0x03	; 3
    16e8:	6f 85       	ldd	r22, Y+15	; 0x0f
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    16fa:	18 8a       	std	Y+16, r1	; 0x10
    16fc:	1c c0       	rjmp	.+56     	; 0x1736 <KEYPAD_getPressedKey+0xb8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    16fe:	88 89       	ldd	r24, Y+16	; 0x10
    1700:	98 2f       	mov	r25, r24
    1702:	9c 5f       	subi	r25, 0xFC	; 252
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	69 2f       	mov	r22, r25
    1708:	0e 94 d7 09 	call	0x13ae	; 0x13ae <GPIO_readPin>
    170c:	88 23       	and	r24, r24
    170e:	81 f4       	brne	.+32     	; 0x1730 <KEYPAD_getPressedKey+0xb2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1710:	8f 85       	ldd	r24, Y+15	; 0x0f
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	98 2f       	mov	r25, r24
    1720:	88 89       	ldd	r24, Y+16	; 0x10
    1722:	89 0f       	add	r24, r25
    1724:	8f 5f       	subi	r24, 0xFF	; 255
    1726:	0e 94 25 0c 	call	0x184a	; 0x184a <KEYPAD_4x4_adjustKeyNumber>
    172a:	89 8b       	std	Y+17, r24	; 0x11
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
}
    172c:	89 89       	ldd	r24, Y+17	; 0x11
    172e:	84 c0       	rjmp	.+264    	; 0x1838 <KEYPAD_getPressedKey+0x1ba>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1730:	88 89       	ldd	r24, Y+16	; 0x10
    1732:	8f 5f       	subi	r24, 0xFF	; 255
    1734:	88 8b       	std	Y+16, r24	; 0x10
    1736:	88 89       	ldd	r24, Y+16	; 0x10
    1738:	84 30       	cpi	r24, 0x04	; 4
    173a:	08 f3       	brcs	.-62     	; 0x16fe <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a0 ea       	ldi	r26, 0xA0	; 160
    174c:	b0 e4       	ldi	r27, 0x40	; 64
    174e:	8b 87       	std	Y+11, r24	; 0x0b
    1750:	9c 87       	std	Y+12, r25	; 0x0c
    1752:	ad 87       	std	Y+13, r26	; 0x0d
    1754:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1756:	6b 85       	ldd	r22, Y+11	; 0x0b
    1758:	7c 85       	ldd	r23, Y+12	; 0x0c
    175a:	8d 85       	ldd	r24, Y+13	; 0x0d
    175c:	9e 85       	ldd	r25, Y+14	; 0x0e
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	4a e7       	ldi	r20, 0x7A	; 122
    1764:	53 e4       	ldi	r21, 0x43	; 67
    1766:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	8f 83       	std	Y+7, r24	; 0x07
    1770:	98 87       	std	Y+8, r25	; 0x08
    1772:	a9 87       	std	Y+9, r26	; 0x09
    1774:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e8       	ldi	r20, 0x80	; 128
    1784:	5f e3       	ldi	r21, 0x3F	; 63
    1786:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    178a:	88 23       	and	r24, r24
    178c:	2c f4       	brge	.+10     	; 0x1798 <KEYPAD_getPressedKey+0x11a>
		__ticks = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9e 83       	std	Y+6, r25	; 0x06
    1794:	8d 83       	std	Y+5, r24	; 0x05
    1796:	3f c0       	rjmp	.+126    	; 0x1816 <KEYPAD_getPressedKey+0x198>
	else if (__tmp > 65535)
    1798:	6f 81       	ldd	r22, Y+7	; 0x07
    179a:	78 85       	ldd	r23, Y+8	; 0x08
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	3f ef       	ldi	r19, 0xFF	; 255
    17a4:	4f e7       	ldi	r20, 0x7F	; 127
    17a6:	57 e4       	ldi	r21, 0x47	; 71
    17a8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    17ac:	18 16       	cp	r1, r24
    17ae:	4c f5       	brge	.+82     	; 0x1802 <KEYPAD_getPressedKey+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e2       	ldi	r20, 0x20	; 32
    17be:	51 e4       	ldi	r21, 0x41	; 65
    17c0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	0f c0       	rjmp	.+30     	; 0x17f8 <KEYPAD_getPressedKey+0x17a>
    17da:	89 e1       	ldi	r24, 0x19	; 25
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <KEYPAD_getPressedKey+0x168>
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	69 f7       	brne	.-38     	; 0x17da <KEYPAD_getPressedKey+0x15c>
    1800:	14 c0       	rjmp	.+40     	; 0x182a <KEYPAD_getPressedKey+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1802:	6f 81       	ldd	r22, Y+7	; 0x07
    1804:	78 85       	ldd	r23, Y+8	; 0x08
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <KEYPAD_getPressedKey+0x1a4>
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    182a:	8f 85       	ldd	r24, Y+15	; 0x0f
    182c:	8f 5f       	subi	r24, 0xFF	; 255
    182e:	8f 87       	std	Y+15, r24	; 0x0f
    1830:	8f 85       	ldd	r24, Y+15	; 0x0f
    1832:	84 30       	cpi	r24, 0x04	; 4
    1834:	08 f4       	brcc	.+2      	; 0x1838 <KEYPAD_getPressedKey+0x1ba>
    1836:	57 cf       	rjmp	.-338    	; 0x16e6 <KEYPAD_getPressedKey+0x68>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
}
    1838:	61 96       	adiw	r28, 0x11	; 17
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	00 d0       	rcall	.+0      	; 0x1850 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1850:	00 d0       	rcall	.+0      	; 0x1852 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1858:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	3c 83       	std	Y+4, r19	; 0x04
    1862:	2b 83       	std	Y+3, r18	; 0x03
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	88 30       	cpi	r24, 0x08	; 8
    186a:	91 05       	cpc	r25, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <KEYPAD_4x4_adjustKeyNumber+0x26>
    186e:	70 c0       	rjmp	.+224    	; 0x1950 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1870:	2b 81       	ldd	r18, Y+3	; 0x03
    1872:	3c 81       	ldd	r19, Y+4	; 0x04
    1874:	29 30       	cpi	r18, 0x09	; 9
    1876:	31 05       	cpc	r19, r1
    1878:	5c f5       	brge	.+86     	; 0x18d0 <KEYPAD_4x4_adjustKeyNumber+0x86>
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	84 30       	cpi	r24, 0x04	; 4
    1880:	91 05       	cpc	r25, r1
    1882:	09 f4       	brne	.+2      	; 0x1886 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1884:	59 c0       	rjmp	.+178    	; 0x1938 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1886:	2b 81       	ldd	r18, Y+3	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	25 30       	cpi	r18, 0x05	; 5
    188c:	31 05       	cpc	r19, r1
    188e:	9c f4       	brge	.+38     	; 0x18b6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	82 30       	cpi	r24, 0x02	; 2
    1896:	91 05       	cpc	r25, r1
    1898:	09 f4       	brne	.+2      	; 0x189c <KEYPAD_4x4_adjustKeyNumber+0x52>
    189a:	48 c0       	rjmp	.+144    	; 0x192c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    189c:	2b 81       	ldd	r18, Y+3	; 0x03
    189e:	3c 81       	ldd	r19, Y+4	; 0x04
    18a0:	23 30       	cpi	r18, 0x03	; 3
    18a2:	31 05       	cpc	r19, r1
    18a4:	0c f0       	brlt	.+2      	; 0x18a8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    18a6:	45 c0       	rjmp	.+138    	; 0x1932 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	91 05       	cpc	r25, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    18b2:	39 c0       	rjmp	.+114    	; 0x1926 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    18b4:	67 c0       	rjmp	.+206    	; 0x1984 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    18b6:	2b 81       	ldd	r18, Y+3	; 0x03
    18b8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ba:	26 30       	cpi	r18, 0x06	; 6
    18bc:	31 05       	cpc	r19, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    18c0:	41 c0       	rjmp	.+130    	; 0x1944 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	87 30       	cpi	r24, 0x07	; 7
    18c8:	91 05       	cpc	r25, r1
    18ca:	0c f0       	brlt	.+2      	; 0x18ce <KEYPAD_4x4_adjustKeyNumber+0x84>
    18cc:	3e c0       	rjmp	.+124    	; 0x194a <KEYPAD_4x4_adjustKeyNumber+0x100>
    18ce:	37 c0       	rjmp	.+110    	; 0x193e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    18d0:	2b 81       	ldd	r18, Y+3	; 0x03
    18d2:	3c 81       	ldd	r19, Y+4	; 0x04
    18d4:	2c 30       	cpi	r18, 0x0C	; 12
    18d6:	31 05       	cpc	r19, r1
    18d8:	09 f4       	brne	.+2      	; 0x18dc <KEYPAD_4x4_adjustKeyNumber+0x92>
    18da:	46 c0       	rjmp	.+140    	; 0x1968 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	8d 30       	cpi	r24, 0x0D	; 13
    18e2:	91 05       	cpc	r25, r1
    18e4:	5c f4       	brge	.+22     	; 0x18fc <KEYPAD_4x4_adjustKeyNumber+0xb2>
    18e6:	2b 81       	ldd	r18, Y+3	; 0x03
    18e8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ea:	2a 30       	cpi	r18, 0x0A	; 10
    18ec:	31 05       	cpc	r19, r1
    18ee:	b1 f1       	breq	.+108    	; 0x195c <KEYPAD_4x4_adjustKeyNumber+0x112>
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	8b 30       	cpi	r24, 0x0B	; 11
    18f6:	91 05       	cpc	r25, r1
    18f8:	a4 f5       	brge	.+104    	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x118>
    18fa:	2d c0       	rjmp	.+90     	; 0x1956 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    18fc:	2b 81       	ldd	r18, Y+3	; 0x03
    18fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1900:	2e 30       	cpi	r18, 0x0E	; 14
    1902:	31 05       	cpc	r19, r1
    1904:	b9 f1       	breq	.+110    	; 0x1974 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	8e 30       	cpi	r24, 0x0E	; 14
    190c:	91 05       	cpc	r25, r1
    190e:	7c f1       	brlt	.+94     	; 0x196e <KEYPAD_4x4_adjustKeyNumber+0x124>
    1910:	2b 81       	ldd	r18, Y+3	; 0x03
    1912:	3c 81       	ldd	r19, Y+4	; 0x04
    1914:	2f 30       	cpi	r18, 0x0F	; 15
    1916:	31 05       	cpc	r19, r1
    1918:	79 f1       	breq	.+94     	; 0x1978 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	80 31       	cpi	r24, 0x10	; 16
    1920:	91 05       	cpc	r25, r1
    1922:	69 f1       	breq	.+90     	; 0x197e <KEYPAD_4x4_adjustKeyNumber+0x134>
    1924:	2f c0       	rjmp	.+94     	; 0x1984 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 1;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	2e c0       	rjmp	.+92     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 2;
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	2b c0       	rjmp	.+86     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 3;
    1932:	83 e0       	ldi	r24, 0x03	; 3
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	28 c0       	rjmp	.+80     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = 'A'; // ASCII Code of %
    1938:	81 e4       	ldi	r24, 0x41	; 65
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	25 c0       	rjmp	.+74     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    193e:	84 e0       	ldi	r24, 0x04	; 4
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	22 c0       	rjmp	.+68     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1944:	85 e0       	ldi	r24, 0x05	; 5
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	1f c0       	rjmp	.+62     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    194a:	86 e0       	ldi	r24, 0x06	; 6
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	1c c0       	rjmp	.+56     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = 'B'; /* ASCII Code of '*' */
    1950:	82 e4       	ldi	r24, 0x42	; 66
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	19 c0       	rjmp	.+50     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 7;
    1956:	87 e0       	ldi	r24, 0x07	; 7
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	16 c0       	rjmp	.+44     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 8;
    195c:	88 e0       	ldi	r24, 0x08	; 8
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	13 c0       	rjmp	.+38     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 9;
    1962:	89 e0       	ldi	r24, 0x09	; 9
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	10 c0       	rjmp	.+32     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = 'C'; /* ASCII Code of '-' */
    1968:	83 e4       	ldi	r24, 0x43	; 67
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	0d c0       	rjmp	.+26     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = '*';  /* ASCII of Enter */
    196e:	8a e2       	ldi	r24, 0x2A	; 42
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	0a c0       	rjmp	.+20     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1974:	19 82       	std	Y+1, r1	; 0x01
    1976:	08 c0       	rjmp	.+16     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '#'; /* ASCII Code of '=' */
    1978:	83 e2       	ldi	r24, 0x23	; 35
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	05 c0       	rjmp	.+10     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = 'D'; /* ASCII Code of '+' */
    197e:	84 e4       	ldi	r24, 0x44	; 68
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1988:	89 81       	ldd	r24, Y+1	; 0x01
} 
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	2e 97       	sbiw	r28, 0x0e	; 14
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    19ac:	82 e0       	ldi	r24, 0x02	; 2
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	61 e0       	ldi	r22, 0x01	; 1
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a0 ea       	ldi	r26, 0xA0	; 160
    19c6:	b1 e4       	ldi	r27, 0x41	; 65
    19c8:	8b 87       	std	Y+11, r24	; 0x0b
    19ca:	9c 87       	std	Y+12, r25	; 0x0c
    19cc:	ad 87       	std	Y+13, r26	; 0x0d
    19ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	4a e7       	ldi	r20, 0x7A	; 122
    19de:	53 e4       	ldi	r21, 0x43	; 67
    19e0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	8f 83       	std	Y+7, r24	; 0x07
    19ea:	98 87       	std	Y+8, r25	; 0x08
    19ec:	a9 87       	std	Y+9, r26	; 0x09
    19ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f0:	6f 81       	ldd	r22, Y+7	; 0x07
    19f2:	78 85       	ldd	r23, Y+8	; 0x08
    19f4:	89 85       	ldd	r24, Y+9	; 0x09
    19f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e8       	ldi	r20, 0x80	; 128
    19fe:	5f e3       	ldi	r21, 0x3F	; 63
    1a00:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1a04:	88 23       	and	r24, r24
    1a06:	2c f4       	brge	.+10     	; 0x1a12 <LCD_init+0x7a>
		__ticks = 1;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	3f c0       	rjmp	.+126    	; 0x1a90 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a12:	6f 81       	ldd	r22, Y+7	; 0x07
    1a14:	78 85       	ldd	r23, Y+8	; 0x08
    1a16:	89 85       	ldd	r24, Y+9	; 0x09
    1a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	3f ef       	ldi	r19, 0xFF	; 255
    1a1e:	4f e7       	ldi	r20, 0x7F	; 127
    1a20:	57 e4       	ldi	r21, 0x47	; 71
    1a22:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1a26:	18 16       	cp	r1, r24
    1a28:	4c f5       	brge	.+82     	; 0x1a7c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e2       	ldi	r20, 0x20	; 32
    1a38:	51 e4       	ldi	r21, 0x41	; 65
    1a3a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	bc 01       	movw	r22, r24
    1a44:	cd 01       	movw	r24, r26
    1a46:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	0f c0       	rjmp	.+30     	; 0x1a72 <LCD_init+0xda>
    1a54:	89 e1       	ldi	r24, 0x19	; 25
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <LCD_init+0xc8>
    1a64:	9c 83       	std	Y+4, r25	; 0x04
    1a66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	69 f7       	brne	.-38     	; 0x1a54 <LCD_init+0xbc>
    1a7a:	14 c0       	rjmp	.+40     	; 0x1aa4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	78 85       	ldd	r23, Y+8	; 0x08
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a84:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
    1a90:	8d 81       	ldd	r24, Y+5	; 0x05
    1a92:	9e 81       	ldd	r25, Y+6	; 0x06
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_init+0x104>
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	62 e0       	ldi	r22, 0x02	; 2
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	63 e0       	ldi	r22, 0x03	; 3
    1ac6:	41 e0       	ldi	r20, 0x01	; 1
    1ac8:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1acc:	83 e3       	ldi	r24, 0x33	; 51
    1ace:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1ad2:	82 e3       	ldi	r24, 0x32	; 50
    1ad4:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1ad8:	88 e2       	ldi	r24, 0x28	; 40
    1ada:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1ade:	8c e0       	ldi	r24, 0x0C	; 12
    1ae0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <LCD_sendCommand>
}
    1aea:	2e 96       	adiw	r28, 0x0e	; 14
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	c3 56       	subi	r28, 0x63	; 99
    1b0a:	d0 40       	sbci	r29, 0x00	; 0
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	fe 01       	movw	r30, r28
    1b18:	ed 59       	subi	r30, 0x9D	; 157
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b1e:	82 e0       	ldi	r24, 0x02	; 2
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e1 5a       	subi	r30, 0xA1	; 161
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a0 e8       	ldi	r26, 0x80	; 128
    1b34:	bf e3       	ldi	r27, 0x3F	; 63
    1b36:	80 83       	st	Z, r24
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	a2 83       	std	Z+2, r26	; 0x02
    1b3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3e:	8e 01       	movw	r16, r28
    1b40:	05 5a       	subi	r16, 0xA5	; 165
    1b42:	1f 4f       	sbci	r17, 0xFF	; 255
    1b44:	fe 01       	movw	r30, r28
    1b46:	e1 5a       	subi	r30, 0xA1	; 161
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	60 81       	ld	r22, Z
    1b4c:	71 81       	ldd	r23, Z+1	; 0x01
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	93 81       	ldd	r25, Z+3	; 0x03
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	4a e7       	ldi	r20, 0x7A	; 122
    1b58:	53 e4       	ldi	r21, 0x43	; 67
    1b5a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	f8 01       	movw	r30, r16
    1b64:	80 83       	st	Z, r24
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	a2 83       	std	Z+2, r26	; 0x02
    1b6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e5 5a       	subi	r30, 0xA5	; 165
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	44 f4       	brge	.+16     	; 0x1b9a <LCD_sendCommand+0x9e>
		__ticks = 1;
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	e7 5a       	subi	r30, 0xA7	; 167
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	80 83       	st	Z, r24
    1b98:	64 c0       	rjmp	.+200    	; 0x1c62 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e5 5a       	subi	r30, 0xA5	; 165
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	0c f0       	brlt	.+2      	; 0x1bba <LCD_sendCommand+0xbe>
    1bb8:	43 c0       	rjmp	.+134    	; 0x1c40 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e1 5a       	subi	r30, 0xA1	; 161
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	60 81       	ld	r22, Z
    1bc2:	71 81       	ldd	r23, Z+1	; 0x01
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	93 81       	ldd	r25, Z+3	; 0x03
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e2       	ldi	r20, 0x20	; 32
    1bce:	51 e4       	ldi	r21, 0x41	; 65
    1bd0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	8e 01       	movw	r16, r28
    1bda:	07 5a       	subi	r16, 0xA7	; 167
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	f8 01       	movw	r30, r16
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	80 83       	st	Z, r24
    1bf0:	1f c0       	rjmp	.+62     	; 0x1c30 <LCD_sendCommand+0x134>
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e9 5a       	subi	r30, 0xA9	; 169
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	89 e1       	ldi	r24, 0x19	; 25
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
    1c00:	fe 01       	movw	r30, r28
    1c02:	e9 5a       	subi	r30, 0xA9	; 169
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <LCD_sendCommand+0x10e>
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e9 5a       	subi	r30, 0xA9	; 169
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c18:	de 01       	movw	r26, r28
    1c1a:	a7 5a       	subi	r26, 0xA7	; 167
    1c1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e7 5a       	subi	r30, 0xA7	; 167
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	11 96       	adiw	r26, 0x01	; 1
    1c2c:	9c 93       	st	X, r25
    1c2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	fe 01       	movw	r30, r28
    1c32:	e7 5a       	subi	r30, 0xA7	; 167
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	80 81       	ld	r24, Z
    1c38:	91 81       	ldd	r25, Z+1	; 0x01
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	d1 f6       	brne	.-76     	; 0x1bf2 <LCD_sendCommand+0xf6>
    1c3e:	27 c0       	rjmp	.+78     	; 0x1c8e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c40:	8e 01       	movw	r16, r28
    1c42:	07 5a       	subi	r16, 0xA7	; 167
    1c44:	1f 4f       	sbci	r17, 0xFF	; 255
    1c46:	fe 01       	movw	r30, r28
    1c48:	e5 5a       	subi	r30, 0xA5	; 165
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	60 81       	ld	r22, Z
    1c4e:	71 81       	ldd	r23, Z+1	; 0x01
    1c50:	82 81       	ldd	r24, Z+2	; 0x02
    1c52:	93 81       	ldd	r25, Z+3	; 0x03
    1c54:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	80 83       	st	Z, r24
    1c62:	de 01       	movw	r26, r28
    1c64:	ab 5a       	subi	r26, 0xAB	; 171
    1c66:	bf 4f       	sbci	r27, 0xFF	; 255
    1c68:	fe 01       	movw	r30, r28
    1c6a:	e7 5a       	subi	r30, 0xA7	; 167
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	80 81       	ld	r24, Z
    1c70:	91 81       	ldd	r25, Z+1	; 0x01
    1c72:	8d 93       	st	X+, r24
    1c74:	9c 93       	st	X, r25
    1c76:	fe 01       	movw	r30, r28
    1c78:	eb 5a       	subi	r30, 0xAB	; 171
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_sendCommand+0x184>
    1c84:	fe 01       	movw	r30, r28
    1c86:	eb 5a       	subi	r30, 0xAB	; 171
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	61 e0       	ldi	r22, 0x01	; 1
    1c92:	41 e0       	ldi	r20, 0x01	; 1
    1c94:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    1c98:	fe 01       	movw	r30, r28
    1c9a:	ef 5a       	subi	r30, 0xAF	; 175
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e8       	ldi	r26, 0x80	; 128
    1ca4:	bf e3       	ldi	r27, 0x3F	; 63
    1ca6:	80 83       	st	Z, r24
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	a2 83       	std	Z+2, r26	; 0x02
    1cac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cae:	8e 01       	movw	r16, r28
    1cb0:	03 5b       	subi	r16, 0xB3	; 179
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	ef 5a       	subi	r30, 0xAF	; 175
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a e7       	ldi	r20, 0x7A	; 122
    1cc8:	53 e4       	ldi	r21, 0x43	; 67
    1cca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	80 83       	st	Z, r24
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	a2 83       	std	Z+2, r26	; 0x02
    1cda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e3 5b       	subi	r30, 0xB3	; 179
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	60 81       	ld	r22, Z
    1ce4:	71 81       	ldd	r23, Z+1	; 0x01
    1ce6:	82 81       	ldd	r24, Z+2	; 0x02
    1ce8:	93 81       	ldd	r25, Z+3	; 0x03
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e8       	ldi	r20, 0x80	; 128
    1cf0:	5f e3       	ldi	r21, 0x3F	; 63
    1cf2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1cf6:	88 23       	and	r24, r24
    1cf8:	44 f4       	brge	.+16     	; 0x1d0a <LCD_sendCommand+0x20e>
		__ticks = 1;
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e5 5b       	subi	r30, 0xB5	; 181
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	80 83       	st	Z, r24
    1d08:	64 c0       	rjmp	.+200    	; 0x1dd2 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e3 5b       	subi	r30, 0xB3	; 179
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	0c f0       	brlt	.+2      	; 0x1d2a <LCD_sendCommand+0x22e>
    1d28:	43 c0       	rjmp	.+134    	; 0x1db0 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	ef 5a       	subi	r30, 0xAF	; 175
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	60 81       	ld	r22, Z
    1d32:	71 81       	ldd	r23, Z+1	; 0x01
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	8e 01       	movw	r16, r28
    1d4a:	05 5b       	subi	r16, 0xB5	; 181
    1d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4e:	bc 01       	movw	r22, r24
    1d50:	cd 01       	movw	r24, r26
    1d52:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	91 83       	std	Z+1, r25	; 0x01
    1d5e:	80 83       	st	Z, r24
    1d60:	1f c0       	rjmp	.+62     	; 0x1da0 <LCD_sendCommand+0x2a4>
    1d62:	fe 01       	movw	r30, r28
    1d64:	e7 5b       	subi	r30, 0xB7	; 183
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	89 e1       	ldi	r24, 0x19	; 25
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	91 83       	std	Z+1, r25	; 0x01
    1d6e:	80 83       	st	Z, r24
    1d70:	fe 01       	movw	r30, r28
    1d72:	e7 5b       	subi	r30, 0xB7	; 183
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 81       	ld	r24, Z
    1d78:	91 81       	ldd	r25, Z+1	; 0x01
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <LCD_sendCommand+0x27e>
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e7 5b       	subi	r30, 0xB7	; 183
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d88:	de 01       	movw	r26, r28
    1d8a:	a5 5b       	subi	r26, 0xB5	; 181
    1d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e5 5b       	subi	r30, 0xB5	; 181
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	11 96       	adiw	r26, 0x01	; 1
    1d9c:	9c 93       	st	X, r25
    1d9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da0:	fe 01       	movw	r30, r28
    1da2:	e5 5b       	subi	r30, 0xB5	; 181
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	d1 f6       	brne	.-76     	; 0x1d62 <LCD_sendCommand+0x266>
    1dae:	27 c0       	rjmp	.+78     	; 0x1dfe <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db0:	8e 01       	movw	r16, r28
    1db2:	05 5b       	subi	r16, 0xB5	; 181
    1db4:	1f 4f       	sbci	r17, 0xFF	; 255
    1db6:	fe 01       	movw	r30, r28
    1db8:	e3 5b       	subi	r30, 0xB3	; 179
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	f8 01       	movw	r30, r16
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	80 83       	st	Z, r24
    1dd2:	de 01       	movw	r26, r28
    1dd4:	a9 5b       	subi	r26, 0xB9	; 185
    1dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd8:	fe 01       	movw	r30, r28
    1dda:	e5 5b       	subi	r30, 0xB5	; 181
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	8d 93       	st	X+, r24
    1de4:	9c 93       	st	X, r25
    1de6:	fe 01       	movw	r30, r28
    1de8:	e9 5b       	subi	r30, 0xB9	; 185
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 81       	ld	r24, Z
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <LCD_sendCommand+0x2f4>
    1df4:	fe 01       	movw	r30, r28
    1df6:	e9 5b       	subi	r30, 0xB9	; 185
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ed 59       	subi	r30, 0x9D	; 157
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 81       	ld	r24, Z
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	80 71       	andi	r24, 0x10	; 16
    1e0c:	90 70       	andi	r25, 0x00	; 0
    1e0e:	95 95       	asr	r25
    1e10:	87 95       	ror	r24
    1e12:	95 95       	asr	r25
    1e14:	87 95       	ror	r24
    1e16:	95 95       	asr	r25
    1e18:	87 95       	ror	r24
    1e1a:	95 95       	asr	r25
    1e1c:	87 95       	ror	r24
    1e1e:	98 2f       	mov	r25, r24
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	49 2f       	mov	r20, r25
    1e26:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	ed 59       	subi	r30, 0x9D	; 157
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	88 2f       	mov	r24, r24
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	80 72       	andi	r24, 0x20	; 32
    1e38:	90 70       	andi	r25, 0x00	; 0
    1e3a:	95 95       	asr	r25
    1e3c:	87 95       	ror	r24
    1e3e:	95 95       	asr	r25
    1e40:	87 95       	ror	r24
    1e42:	95 95       	asr	r25
    1e44:	87 95       	ror	r24
    1e46:	95 95       	asr	r25
    1e48:	87 95       	ror	r24
    1e4a:	95 95       	asr	r25
    1e4c:	87 95       	ror	r24
    1e4e:	98 2f       	mov	r25, r24
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	49 2f       	mov	r20, r25
    1e56:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ed 59       	subi	r30, 0x9D	; 157
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	80 74       	andi	r24, 0x40	; 64
    1e68:	90 70       	andi	r25, 0x00	; 0
    1e6a:	08 2e       	mov	r0, r24
    1e6c:	89 2f       	mov	r24, r25
    1e6e:	00 0c       	add	r0, r0
    1e70:	88 1f       	adc	r24, r24
    1e72:	99 0b       	sbc	r25, r25
    1e74:	00 0c       	add	r0, r0
    1e76:	88 1f       	adc	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	62 e0       	ldi	r22, 0x02	; 2
    1e80:	49 2f       	mov	r20, r25
    1e82:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1e86:	fe 01       	movw	r30, r28
    1e88:	ed 59       	subi	r30, 0x9D	; 157
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	80 81       	ld	r24, Z
    1e8e:	98 2f       	mov	r25, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	99 27       	eor	r25, r25
    1e94:	99 1f       	adc	r25, r25
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	63 e0       	ldi	r22, 0x03	; 3
    1e9a:	49 2f       	mov	r20, r25
    1e9c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ed 5b       	subi	r30, 0xBD	; 189
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 e8       	ldi	r26, 0x80	; 128
    1eac:	bf e3       	ldi	r27, 0x3F	; 63
    1eae:	80 83       	st	Z, r24
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	a2 83       	std	Z+2, r26	; 0x02
    1eb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb6:	8e 01       	movw	r16, r28
    1eb8:	01 5c       	subi	r16, 0xC1	; 193
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ed 5b       	subi	r30, 0xBD	; 189
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	4a e7       	ldi	r20, 0x7A	; 122
    1ed0:	53 e4       	ldi	r21, 0x43	; 67
    1ed2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	f8 01       	movw	r30, r16
    1edc:	80 83       	st	Z, r24
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	a2 83       	std	Z+2, r26	; 0x02
    1ee2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ff 96       	adiw	r30, 0x3f	; 63
    1ee8:	60 81       	ld	r22, Z
    1eea:	71 81       	ldd	r23, Z+1	; 0x01
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	93 81       	ldd	r25, Z+3	; 0x03
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	2c f4       	brge	.+10     	; 0x1f0a <LCD_sendCommand+0x40e>
		__ticks = 1;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9e af       	std	Y+62, r25	; 0x3e
    1f06:	8d af       	std	Y+61, r24	; 0x3d
    1f08:	46 c0       	rjmp	.+140    	; 0x1f96 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	ff 96       	adiw	r30, 0x3f	; 63
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	4f e7       	ldi	r20, 0x7F	; 127
    1f1c:	57 e4       	ldi	r21, 0x47	; 71
    1f1e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1f22:	18 16       	cp	r1, r24
    1f24:	64 f5       	brge	.+88     	; 0x1f7e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f26:	fe 01       	movw	r30, r28
    1f28:	ed 5b       	subi	r30, 0xBD	; 189
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	60 81       	ld	r22, Z
    1f2e:	71 81       	ldd	r23, Z+1	; 0x01
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e2       	ldi	r20, 0x20	; 32
    1f3a:	51 e4       	ldi	r21, 0x41	; 65
    1f3c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9e af       	std	Y+62, r25	; 0x3e
    1f52:	8d af       	std	Y+61, r24	; 0x3d
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <LCD_sendCommand+0x478>
    1f56:	89 e1       	ldi	r24, 0x19	; 25
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9c af       	std	Y+60, r25	; 0x3c
    1f5c:	8b af       	std	Y+59, r24	; 0x3b
    1f5e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f60:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <LCD_sendCommand+0x466>
    1f66:	9c af       	std	Y+60, r25	; 0x3c
    1f68:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	9e af       	std	Y+62, r25	; 0x3e
    1f72:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <LCD_sendCommand+0x45a>
    1f7c:	16 c0       	rjmp	.+44     	; 0x1faa <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7e:	fe 01       	movw	r30, r28
    1f80:	ff 96       	adiw	r30, 0x3f	; 63
    1f82:	60 81       	ld	r22, Z
    1f84:	71 81       	ldd	r23, Z+1	; 0x01
    1f86:	82 81       	ldd	r24, Z+2	; 0x02
    1f88:	93 81       	ldd	r25, Z+3	; 0x03
    1f8a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9e af       	std	Y+62, r25	; 0x3e
    1f94:	8d af       	std	Y+61, r24	; 0x3d
    1f96:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f98:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f9a:	9a af       	std	Y+58, r25	; 0x3a
    1f9c:	89 af       	std	Y+57, r24	; 0x39
    1f9e:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_sendCommand+0x4a6>
    1fa6:	9a af       	std	Y+58, r25	; 0x3a
    1fa8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	61 e0       	ldi	r22, 0x01	; 1
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a0 e8       	ldi	r26, 0x80	; 128
    1fba:	bf e3       	ldi	r27, 0x3F	; 63
    1fbc:	8d ab       	std	Y+53, r24	; 0x35
    1fbe:	9e ab       	std	Y+54, r25	; 0x36
    1fc0:	af ab       	std	Y+55, r26	; 0x37
    1fc2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1fca:	98 ad       	ldd	r25, Y+56	; 0x38
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	53 e4       	ldi	r21, 0x43	; 67
    1fd4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	89 ab       	std	Y+49, r24	; 0x31
    1fde:	9a ab       	std	Y+50, r25	; 0x32
    1fe0:	ab ab       	std	Y+51, r26	; 0x33
    1fe2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fe4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fea:	9c a9       	ldd	r25, Y+52	; 0x34
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	5f e3       	ldi	r21, 0x3F	; 63
    1ff4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ff8:	88 23       	and	r24, r24
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	98 ab       	std	Y+48, r25	; 0x30
    2002:	8f a7       	std	Y+47, r24	; 0x2f
    2004:	3f c0       	rjmp	.+126    	; 0x2084 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2006:	69 a9       	ldd	r22, Y+49	; 0x31
    2008:	7a a9       	ldd	r23, Y+50	; 0x32
    200a:	8b a9       	ldd	r24, Y+51	; 0x33
    200c:	9c a9       	ldd	r25, Y+52	; 0x34
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	3f ef       	ldi	r19, 0xFF	; 255
    2012:	4f e7       	ldi	r20, 0x7F	; 127
    2014:	57 e4       	ldi	r21, 0x47	; 71
    2016:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    201a:	18 16       	cp	r1, r24
    201c:	4c f5       	brge	.+82     	; 0x2070 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201e:	6d a9       	ldd	r22, Y+53	; 0x35
    2020:	7e a9       	ldd	r23, Y+54	; 0x36
    2022:	8f a9       	ldd	r24, Y+55	; 0x37
    2024:	98 ad       	ldd	r25, Y+56	; 0x38
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e2       	ldi	r20, 0x20	; 32
    202c:	51 e4       	ldi	r21, 0x41	; 65
    202e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	98 ab       	std	Y+48, r25	; 0x30
    2044:	8f a7       	std	Y+47, r24	; 0x2f
    2046:	0f c0       	rjmp	.+30     	; 0x2066 <LCD_sendCommand+0x56a>
    2048:	89 e1       	ldi	r24, 0x19	; 25
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	9e a7       	std	Y+46, r25	; 0x2e
    204e:	8d a7       	std	Y+45, r24	; 0x2d
    2050:	8d a5       	ldd	r24, Y+45	; 0x2d
    2052:	9e a5       	ldd	r25, Y+46	; 0x2e
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_sendCommand+0x558>
    2058:	9e a7       	std	Y+46, r25	; 0x2e
    205a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205c:	8f a5       	ldd	r24, Y+47	; 0x2f
    205e:	98 a9       	ldd	r25, Y+48	; 0x30
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	98 ab       	std	Y+48, r25	; 0x30
    2064:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2066:	8f a5       	ldd	r24, Y+47	; 0x2f
    2068:	98 a9       	ldd	r25, Y+48	; 0x30
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	69 f7       	brne	.-38     	; 0x2048 <LCD_sendCommand+0x54c>
    206e:	14 c0       	rjmp	.+40     	; 0x2098 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2070:	69 a9       	ldd	r22, Y+49	; 0x31
    2072:	7a a9       	ldd	r23, Y+50	; 0x32
    2074:	8b a9       	ldd	r24, Y+51	; 0x33
    2076:	9c a9       	ldd	r25, Y+52	; 0x34
    2078:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	98 ab       	std	Y+48, r25	; 0x30
    2082:	8f a7       	std	Y+47, r24	; 0x2f
    2084:	8f a5       	ldd	r24, Y+47	; 0x2f
    2086:	98 a9       	ldd	r25, Y+48	; 0x30
    2088:	9c a7       	std	Y+44, r25	; 0x2c
    208a:	8b a7       	std	Y+43, r24	; 0x2b
    208c:	8b a5       	ldd	r24, Y+43	; 0x2b
    208e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_sendCommand+0x594>
    2094:	9c a7       	std	Y+44, r25	; 0x2c
    2096:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2098:	82 e0       	ldi	r24, 0x02	; 2
    209a:	61 e0       	ldi	r22, 0x01	; 1
    209c:	41 e0       	ldi	r20, 0x01	; 1
    209e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e8       	ldi	r26, 0x80	; 128
    20a8:	bf e3       	ldi	r27, 0x3F	; 63
    20aa:	8f a3       	std	Y+39, r24	; 0x27
    20ac:	98 a7       	std	Y+40, r25	; 0x28
    20ae:	a9 a7       	std	Y+41, r26	; 0x29
    20b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	6f a1       	ldd	r22, Y+39	; 0x27
    20b4:	78 a5       	ldd	r23, Y+40	; 0x28
    20b6:	89 a5       	ldd	r24, Y+41	; 0x29
    20b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a e7       	ldi	r20, 0x7A	; 122
    20c0:	53 e4       	ldi	r21, 0x43	; 67
    20c2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8b a3       	std	Y+35, r24	; 0x23
    20cc:	9c a3       	std	Y+36, r25	; 0x24
    20ce:	ad a3       	std	Y+37, r26	; 0x25
    20d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20d2:	6b a1       	ldd	r22, Y+35	; 0x23
    20d4:	7c a1       	ldd	r23, Y+36	; 0x24
    20d6:	8d a1       	ldd	r24, Y+37	; 0x25
    20d8:	9e a1       	ldd	r25, Y+38	; 0x26
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9a a3       	std	Y+34, r25	; 0x22
    20f0:	89 a3       	std	Y+33, r24	; 0x21
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    20f4:	6b a1       	ldd	r22, Y+35	; 0x23
    20f6:	7c a1       	ldd	r23, Y+36	; 0x24
    20f8:	8d a1       	ldd	r24, Y+37	; 0x25
    20fa:	9e a1       	ldd	r25, Y+38	; 0x26
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	4c f5       	brge	.+82     	; 0x215e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	6f a1       	ldd	r22, Y+39	; 0x27
    210e:	78 a5       	ldd	r23, Y+40	; 0x28
    2110:	89 a5       	ldd	r24, Y+41	; 0x29
    2112:	9a a5       	ldd	r25, Y+42	; 0x2a
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9a a3       	std	Y+34, r25	; 0x22
    2132:	89 a3       	std	Y+33, r24	; 0x21
    2134:	0f c0       	rjmp	.+30     	; 0x2154 <LCD_sendCommand+0x658>
    2136:	89 e1       	ldi	r24, 0x19	; 25
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	98 a3       	std	Y+32, r25	; 0x20
    213c:	8f 8f       	std	Y+31, r24	; 0x1f
    213e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2140:	98 a1       	ldd	r25, Y+32	; 0x20
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_sendCommand+0x646>
    2146:	98 a3       	std	Y+32, r25	; 0x20
    2148:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	89 a1       	ldd	r24, Y+33	; 0x21
    214c:	9a a1       	ldd	r25, Y+34	; 0x22
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	9a a3       	std	Y+34, r25	; 0x22
    2152:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	89 a1       	ldd	r24, Y+33	; 0x21
    2156:	9a a1       	ldd	r25, Y+34	; 0x22
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f7       	brne	.-38     	; 0x2136 <LCD_sendCommand+0x63a>
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	6b a1       	ldd	r22, Y+35	; 0x23
    2160:	7c a1       	ldd	r23, Y+36	; 0x24
    2162:	8d a1       	ldd	r24, Y+37	; 0x25
    2164:	9e a1       	ldd	r25, Y+38	; 0x26
    2166:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9a a3       	std	Y+34, r25	; 0x22
    2170:	89 a3       	std	Y+33, r24	; 0x21
    2172:	89 a1       	ldd	r24, Y+33	; 0x21
    2174:	9a a1       	ldd	r25, Y+34	; 0x22
    2176:	9e 8f       	std	Y+30, r25	; 0x1e
    2178:	8d 8f       	std	Y+29, r24	; 0x1d
    217a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <LCD_sendCommand+0x682>
    2182:	9e 8f       	std	Y+30, r25	; 0x1e
    2184:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2186:	fe 01       	movw	r30, r28
    2188:	ed 59       	subi	r30, 0x9D	; 157
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	80 81       	ld	r24, Z
    218e:	98 2f       	mov	r25, r24
    2190:	91 70       	andi	r25, 0x01	; 1
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	49 2f       	mov	r20, r25
    2198:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    219c:	fe 01       	movw	r30, r28
    219e:	ed 59       	subi	r30, 0x9D	; 157
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	80 81       	ld	r24, Z
    21a4:	88 2f       	mov	r24, r24
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	82 70       	andi	r24, 0x02	; 2
    21aa:	90 70       	andi	r25, 0x00	; 0
    21ac:	95 95       	asr	r25
    21ae:	87 95       	ror	r24
    21b0:	98 2f       	mov	r25, r24
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	49 2f       	mov	r20, r25
    21b8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    21bc:	fe 01       	movw	r30, r28
    21be:	ed 59       	subi	r30, 0x9D	; 157
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	88 2f       	mov	r24, r24
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	84 70       	andi	r24, 0x04	; 4
    21ca:	90 70       	andi	r25, 0x00	; 0
    21cc:	95 95       	asr	r25
    21ce:	87 95       	ror	r24
    21d0:	95 95       	asr	r25
    21d2:	87 95       	ror	r24
    21d4:	98 2f       	mov	r25, r24
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	62 e0       	ldi	r22, 0x02	; 2
    21da:	49 2f       	mov	r20, r25
    21dc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    21e0:	fe 01       	movw	r30, r28
    21e2:	ed 59       	subi	r30, 0x9D	; 157
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	80 81       	ld	r24, Z
    21e8:	88 2f       	mov	r24, r24
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	88 70       	andi	r24, 0x08	; 8
    21ee:	90 70       	andi	r25, 0x00	; 0
    21f0:	95 95       	asr	r25
    21f2:	87 95       	ror	r24
    21f4:	95 95       	asr	r25
    21f6:	87 95       	ror	r24
    21f8:	95 95       	asr	r25
    21fa:	87 95       	ror	r24
    21fc:	98 2f       	mov	r25, r24
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	63 e0       	ldi	r22, 0x03	; 3
    2202:	49 2f       	mov	r20, r25
    2204:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	a0 e8       	ldi	r26, 0x80	; 128
    220e:	bf e3       	ldi	r27, 0x3F	; 63
    2210:	89 8f       	std	Y+25, r24	; 0x19
    2212:	9a 8f       	std	Y+26, r25	; 0x1a
    2214:	ab 8f       	std	Y+27, r26	; 0x1b
    2216:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2218:	69 8d       	ldd	r22, Y+25	; 0x19
    221a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    221c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4a e7       	ldi	r20, 0x7A	; 122
    2226:	53 e4       	ldi	r21, 0x43	; 67
    2228:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8d 8b       	std	Y+21, r24	; 0x15
    2232:	9e 8b       	std	Y+22, r25	; 0x16
    2234:	af 8b       	std	Y+23, r26	; 0x17
    2236:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2238:	6d 89       	ldd	r22, Y+21	; 0x15
    223a:	7e 89       	ldd	r23, Y+22	; 0x16
    223c:	8f 89       	ldd	r24, Y+23	; 0x17
    223e:	98 8d       	ldd	r25, Y+24	; 0x18
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e8       	ldi	r20, 0x80	; 128
    2246:	5f e3       	ldi	r21, 0x3F	; 63
    2248:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    224c:	88 23       	and	r24, r24
    224e:	2c f4       	brge	.+10     	; 0x225a <LCD_sendCommand+0x75e>
		__ticks = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	9c 8b       	std	Y+20, r25	; 0x14
    2256:	8b 8b       	std	Y+19, r24	; 0x13
    2258:	3f c0       	rjmp	.+126    	; 0x22d8 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    225a:	6d 89       	ldd	r22, Y+21	; 0x15
    225c:	7e 89       	ldd	r23, Y+22	; 0x16
    225e:	8f 89       	ldd	r24, Y+23	; 0x17
    2260:	98 8d       	ldd	r25, Y+24	; 0x18
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	57 e4       	ldi	r21, 0x47	; 71
    226a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    226e:	18 16       	cp	r1, r24
    2270:	4c f5       	brge	.+82     	; 0x22c4 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2272:	69 8d       	ldd	r22, Y+25	; 0x19
    2274:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e2       	ldi	r20, 0x20	; 32
    2280:	51 e4       	ldi	r21, 0x41	; 65
    2282:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	9c 8b       	std	Y+20, r25	; 0x14
    2298:	8b 8b       	std	Y+19, r24	; 0x13
    229a:	0f c0       	rjmp	.+30     	; 0x22ba <LCD_sendCommand+0x7be>
    229c:	89 e1       	ldi	r24, 0x19	; 25
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9a 8b       	std	Y+18, r25	; 0x12
    22a2:	89 8b       	std	Y+17, r24	; 0x11
    22a4:	89 89       	ldd	r24, Y+17	; 0x11
    22a6:	9a 89       	ldd	r25, Y+18	; 0x12
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_sendCommand+0x7ac>
    22ac:	9a 8b       	std	Y+18, r25	; 0x12
    22ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b0:	8b 89       	ldd	r24, Y+19	; 0x13
    22b2:	9c 89       	ldd	r25, Y+20	; 0x14
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	9c 8b       	std	Y+20, r25	; 0x14
    22b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ba:	8b 89       	ldd	r24, Y+19	; 0x13
    22bc:	9c 89       	ldd	r25, Y+20	; 0x14
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	69 f7       	brne	.-38     	; 0x229c <LCD_sendCommand+0x7a0>
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	6d 89       	ldd	r22, Y+21	; 0x15
    22c6:	7e 89       	ldd	r23, Y+22	; 0x16
    22c8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ca:	98 8d       	ldd	r25, Y+24	; 0x18
    22cc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	9c 8b       	std	Y+20, r25	; 0x14
    22d6:	8b 8b       	std	Y+19, r24	; 0x13
    22d8:	8b 89       	ldd	r24, Y+19	; 0x13
    22da:	9c 89       	ldd	r25, Y+20	; 0x14
    22dc:	98 8b       	std	Y+16, r25	; 0x10
    22de:	8f 87       	std	Y+15, r24	; 0x0f
    22e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e2:	98 89       	ldd	r25, Y+16	; 0x10
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_sendCommand+0x7e8>
    22e8:	98 8b       	std	Y+16, r25	; 0x10
    22ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	61 e0       	ldi	r22, 0x01	; 1
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 e8       	ldi	r26, 0x80	; 128
    22fc:	bf e3       	ldi	r27, 0x3F	; 63
    22fe:	8b 87       	std	Y+11, r24	; 0x0b
    2300:	9c 87       	std	Y+12, r25	; 0x0c
    2302:	ad 87       	std	Y+13, r26	; 0x0d
    2304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a e7       	ldi	r20, 0x7A	; 122
    2314:	53 e4       	ldi	r21, 0x43	; 67
    2316:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8f 83       	std	Y+7, r24	; 0x07
    2320:	98 87       	std	Y+8, r25	; 0x08
    2322:	a9 87       	std	Y+9, r26	; 0x09
    2324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <LCD_sendCommand+0x84c>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6b 85       	ldd	r22, Y+11	; 0x0b
    2362:	7c 85       	ldd	r23, Y+12	; 0x0c
    2364:	8d 85       	ldd	r24, Y+13	; 0x0d
    2366:	9e 85       	ldd	r25, Y+14	; 0x0e
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <LCD_sendCommand+0x8ac>
    238a:	89 e1       	ldi	r24, 0x19	; 25
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_sendCommand+0x89a>
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <LCD_sendCommand+0x88e>
    23b0:	14 c0       	rjmp	.+40     	; 0x23da <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <LCD_sendCommand+0x8d6>
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23da:	cd 59       	subi	r28, 0x9D	; 157
    23dc:	df 4f       	sbci	r29, 0xFF	; 255
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	1f 91       	pop	r17
    23ee:	0f 91       	pop	r16
    23f0:	08 95       	ret

000023f2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	c3 56       	subi	r28, 0x63	; 99
    2400:	d0 40       	sbci	r29, 0x00	; 0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	fe 01       	movw	r30, r28
    240e:	ed 59       	subi	r30, 0x9D	; 157
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    241e:	fe 01       	movw	r30, r28
    2420:	e1 5a       	subi	r30, 0xA1	; 161
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	a0 e8       	ldi	r26, 0x80	; 128
    242a:	bf e3       	ldi	r27, 0x3F	; 63
    242c:	80 83       	st	Z, r24
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	a2 83       	std	Z+2, r26	; 0x02
    2432:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2434:	8e 01       	movw	r16, r28
    2436:	05 5a       	subi	r16, 0xA5	; 165
    2438:	1f 4f       	sbci	r17, 0xFF	; 255
    243a:	fe 01       	movw	r30, r28
    243c:	e1 5a       	subi	r30, 0xA1	; 161
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a e7       	ldi	r20, 0x7A	; 122
    244e:	53 e4       	ldi	r21, 0x43	; 67
    2450:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	f8 01       	movw	r30, r16
    245a:	80 83       	st	Z, r24
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	a2 83       	std	Z+2, r26	; 0x02
    2460:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2462:	fe 01       	movw	r30, r28
    2464:	e5 5a       	subi	r30, 0xA5	; 165
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	60 81       	ld	r22, Z
    246a:	71 81       	ldd	r23, Z+1	; 0x01
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	93 81       	ldd	r25, Z+3	; 0x03
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	44 f4       	brge	.+16     	; 0x2490 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2480:	fe 01       	movw	r30, r28
    2482:	e7 5a       	subi	r30, 0xA7	; 167
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24
    248e:	64 c0       	rjmp	.+200    	; 0x2558 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2490:	fe 01       	movw	r30, r28
    2492:	e5 5a       	subi	r30, 0xA5	; 165
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	3f ef       	ldi	r19, 0xFF	; 255
    24a2:	4f e7       	ldi	r20, 0x7F	; 127
    24a4:	57 e4       	ldi	r21, 0x47	; 71
    24a6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    24aa:	18 16       	cp	r1, r24
    24ac:	0c f0       	brlt	.+2      	; 0x24b0 <LCD_displayCharacter+0xbe>
    24ae:	43 c0       	rjmp	.+134    	; 0x2536 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b0:	fe 01       	movw	r30, r28
    24b2:	e1 5a       	subi	r30, 0xA1	; 161
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	60 81       	ld	r22, Z
    24b8:	71 81       	ldd	r23, Z+1	; 0x01
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e2       	ldi	r20, 0x20	; 32
    24c4:	51 e4       	ldi	r21, 0x41	; 65
    24c6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8e 01       	movw	r16, r28
    24d0:	07 5a       	subi	r16, 0xA7	; 167
    24d2:	1f 4f       	sbci	r17, 0xFF	; 255
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	f8 01       	movw	r30, r16
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	1f c0       	rjmp	.+62     	; 0x2526 <LCD_displayCharacter+0x134>
    24e8:	fe 01       	movw	r30, r28
    24ea:	e9 5a       	subi	r30, 0xA9	; 169
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	89 e1       	ldi	r24, 0x19	; 25
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	91 83       	std	Z+1, r25	; 0x01
    24f4:	80 83       	st	Z, r24
    24f6:	fe 01       	movw	r30, r28
    24f8:	e9 5a       	subi	r30, 0xA9	; 169
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <LCD_displayCharacter+0x10e>
    2504:	fe 01       	movw	r30, r28
    2506:	e9 5a       	subi	r30, 0xA9	; 169
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250e:	de 01       	movw	r26, r28
    2510:	a7 5a       	subi	r26, 0xA7	; 167
    2512:	bf 4f       	sbci	r27, 0xFF	; 255
    2514:	fe 01       	movw	r30, r28
    2516:	e7 5a       	subi	r30, 0xA7	; 167
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	11 96       	adiw	r26, 0x01	; 1
    2522:	9c 93       	st	X, r25
    2524:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	fe 01       	movw	r30, r28
    2528:	e7 5a       	subi	r30, 0xA7	; 167
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	d1 f6       	brne	.-76     	; 0x24e8 <LCD_displayCharacter+0xf6>
    2534:	27 c0       	rjmp	.+78     	; 0x2584 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2536:	8e 01       	movw	r16, r28
    2538:	07 5a       	subi	r16, 0xA7	; 167
    253a:	1f 4f       	sbci	r17, 0xFF	; 255
    253c:	fe 01       	movw	r30, r28
    253e:	e5 5a       	subi	r30, 0xA5	; 165
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	60 81       	ld	r22, Z
    2544:	71 81       	ldd	r23, Z+1	; 0x01
    2546:	82 81       	ldd	r24, Z+2	; 0x02
    2548:	93 81       	ldd	r25, Z+3	; 0x03
    254a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	f8 01       	movw	r30, r16
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
    2558:	de 01       	movw	r26, r28
    255a:	ab 5a       	subi	r26, 0xAB	; 171
    255c:	bf 4f       	sbci	r27, 0xFF	; 255
    255e:	fe 01       	movw	r30, r28
    2560:	e7 5a       	subi	r30, 0xA7	; 167
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	8d 93       	st	X+, r24
    256a:	9c 93       	st	X, r25
    256c:	fe 01       	movw	r30, r28
    256e:	eb 5a       	subi	r30, 0xAB	; 171
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <LCD_displayCharacter+0x184>
    257a:	fe 01       	movw	r30, r28
    257c:	eb 5a       	subi	r30, 0xAB	; 171
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2584:	82 e0       	ldi	r24, 0x02	; 2
    2586:	61 e0       	ldi	r22, 0x01	; 1
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    258e:	fe 01       	movw	r30, r28
    2590:	ef 5a       	subi	r30, 0xAF	; 175
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	a0 e8       	ldi	r26, 0x80	; 128
    259a:	bf e3       	ldi	r27, 0x3F	; 63
    259c:	80 83       	st	Z, r24
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	a2 83       	std	Z+2, r26	; 0x02
    25a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a4:	8e 01       	movw	r16, r28
    25a6:	03 5b       	subi	r16, 0xB3	; 179
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
    25aa:	fe 01       	movw	r30, r28
    25ac:	ef 5a       	subi	r30, 0xAF	; 175
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4a e7       	ldi	r20, 0x7A	; 122
    25be:	53 e4       	ldi	r21, 0x43	; 67
    25c0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	f8 01       	movw	r30, r16
    25ca:	80 83       	st	Z, r24
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	a2 83       	std	Z+2, r26	; 0x02
    25d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25d2:	fe 01       	movw	r30, r28
    25d4:	e3 5b       	subi	r30, 0xB3	; 179
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e8       	ldi	r20, 0x80	; 128
    25e6:	5f e3       	ldi	r21, 0x3F	; 63
    25e8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    25ec:	88 23       	and	r24, r24
    25ee:	44 f4       	brge	.+16     	; 0x2600 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    25f0:	fe 01       	movw	r30, r28
    25f2:	e5 5b       	subi	r30, 0xB5	; 181
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
    25fe:	64 c0       	rjmp	.+200    	; 0x26c8 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2600:	fe 01       	movw	r30, r28
    2602:	e3 5b       	subi	r30, 0xB3	; 179
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	3f ef       	ldi	r19, 0xFF	; 255
    2612:	4f e7       	ldi	r20, 0x7F	; 127
    2614:	57 e4       	ldi	r21, 0x47	; 71
    2616:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    261a:	18 16       	cp	r1, r24
    261c:	0c f0       	brlt	.+2      	; 0x2620 <LCD_displayCharacter+0x22e>
    261e:	43 c0       	rjmp	.+134    	; 0x26a6 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2620:	fe 01       	movw	r30, r28
    2622:	ef 5a       	subi	r30, 0xAF	; 175
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e2       	ldi	r20, 0x20	; 32
    2634:	51 e4       	ldi	r21, 0x41	; 65
    2636:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	8e 01       	movw	r16, r28
    2640:	05 5b       	subi	r16, 0xB5	; 181
    2642:	1f 4f       	sbci	r17, 0xFF	; 255
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	f8 01       	movw	r30, r16
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
    2656:	1f c0       	rjmp	.+62     	; 0x2696 <LCD_displayCharacter+0x2a4>
    2658:	fe 01       	movw	r30, r28
    265a:	e7 5b       	subi	r30, 0xB7	; 183
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	89 e1       	ldi	r24, 0x19	; 25
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	80 83       	st	Z, r24
    2666:	fe 01       	movw	r30, r28
    2668:	e7 5b       	subi	r30, 0xB7	; 183
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	91 81       	ldd	r25, Z+1	; 0x01
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <LCD_displayCharacter+0x27e>
    2674:	fe 01       	movw	r30, r28
    2676:	e7 5b       	subi	r30, 0xB7	; 183
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	de 01       	movw	r26, r28
    2680:	a5 5b       	subi	r26, 0xB5	; 181
    2682:	bf 4f       	sbci	r27, 0xFF	; 255
    2684:	fe 01       	movw	r30, r28
    2686:	e5 5b       	subi	r30, 0xB5	; 181
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	91 81       	ldd	r25, Z+1	; 0x01
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	9c 93       	st	X, r25
    2694:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2696:	fe 01       	movw	r30, r28
    2698:	e5 5b       	subi	r30, 0xB5	; 181
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 81       	ld	r24, Z
    269e:	91 81       	ldd	r25, Z+1	; 0x01
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	d1 f6       	brne	.-76     	; 0x2658 <LCD_displayCharacter+0x266>
    26a4:	27 c0       	rjmp	.+78     	; 0x26f4 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a6:	8e 01       	movw	r16, r28
    26a8:	05 5b       	subi	r16, 0xB5	; 181
    26aa:	1f 4f       	sbci	r17, 0xFF	; 255
    26ac:	fe 01       	movw	r30, r28
    26ae:	e3 5b       	subi	r30, 0xB3	; 179
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	60 81       	ld	r22, Z
    26b4:	71 81       	ldd	r23, Z+1	; 0x01
    26b6:	82 81       	ldd	r24, Z+2	; 0x02
    26b8:	93 81       	ldd	r25, Z+3	; 0x03
    26ba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	f8 01       	movw	r30, r16
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
    26c8:	de 01       	movw	r26, r28
    26ca:	a9 5b       	subi	r26, 0xB9	; 185
    26cc:	bf 4f       	sbci	r27, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	e5 5b       	subi	r30, 0xB5	; 181
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	8d 93       	st	X+, r24
    26da:	9c 93       	st	X, r25
    26dc:	fe 01       	movw	r30, r28
    26de:	e9 5b       	subi	r30, 0xB9	; 185
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	80 81       	ld	r24, Z
    26e4:	91 81       	ldd	r25, Z+1	; 0x01
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_displayCharacter+0x2f4>
    26ea:	fe 01       	movw	r30, r28
    26ec:	e9 5b       	subi	r30, 0xB9	; 185
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    26f4:	fe 01       	movw	r30, r28
    26f6:	ed 59       	subi	r30, 0x9D	; 157
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	80 81       	ld	r24, Z
    26fc:	88 2f       	mov	r24, r24
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	80 71       	andi	r24, 0x10	; 16
    2702:	90 70       	andi	r25, 0x00	; 0
    2704:	95 95       	asr	r25
    2706:	87 95       	ror	r24
    2708:	95 95       	asr	r25
    270a:	87 95       	ror	r24
    270c:	95 95       	asr	r25
    270e:	87 95       	ror	r24
    2710:	95 95       	asr	r25
    2712:	87 95       	ror	r24
    2714:	98 2f       	mov	r25, r24
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	49 2f       	mov	r20, r25
    271c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2720:	fe 01       	movw	r30, r28
    2722:	ed 59       	subi	r30, 0x9D	; 157
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	80 72       	andi	r24, 0x20	; 32
    272e:	90 70       	andi	r25, 0x00	; 0
    2730:	95 95       	asr	r25
    2732:	87 95       	ror	r24
    2734:	95 95       	asr	r25
    2736:	87 95       	ror	r24
    2738:	95 95       	asr	r25
    273a:	87 95       	ror	r24
    273c:	95 95       	asr	r25
    273e:	87 95       	ror	r24
    2740:	95 95       	asr	r25
    2742:	87 95       	ror	r24
    2744:	98 2f       	mov	r25, r24
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	49 2f       	mov	r20, r25
    274c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2750:	fe 01       	movw	r30, r28
    2752:	ed 59       	subi	r30, 0x9D	; 157
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	80 81       	ld	r24, Z
    2758:	88 2f       	mov	r24, r24
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	80 74       	andi	r24, 0x40	; 64
    275e:	90 70       	andi	r25, 0x00	; 0
    2760:	08 2e       	mov	r0, r24
    2762:	89 2f       	mov	r24, r25
    2764:	00 0c       	add	r0, r0
    2766:	88 1f       	adc	r24, r24
    2768:	99 0b       	sbc	r25, r25
    276a:	00 0c       	add	r0, r0
    276c:	88 1f       	adc	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	98 2f       	mov	r25, r24
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	62 e0       	ldi	r22, 0x02	; 2
    2776:	49 2f       	mov	r20, r25
    2778:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    277c:	fe 01       	movw	r30, r28
    277e:	ed 59       	subi	r30, 0x9D	; 157
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	98 2f       	mov	r25, r24
    2786:	99 1f       	adc	r25, r25
    2788:	99 27       	eor	r25, r25
    278a:	99 1f       	adc	r25, r25
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	63 e0       	ldi	r22, 0x03	; 3
    2790:	49 2f       	mov	r20, r25
    2792:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    2796:	fe 01       	movw	r30, r28
    2798:	ed 5b       	subi	r30, 0xBD	; 189
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	a0 e8       	ldi	r26, 0x80	; 128
    27a2:	bf e3       	ldi	r27, 0x3F	; 63
    27a4:	80 83       	st	Z, r24
    27a6:	91 83       	std	Z+1, r25	; 0x01
    27a8:	a2 83       	std	Z+2, r26	; 0x02
    27aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ac:	8e 01       	movw	r16, r28
    27ae:	01 5c       	subi	r16, 0xC1	; 193
    27b0:	1f 4f       	sbci	r17, 0xFF	; 255
    27b2:	fe 01       	movw	r30, r28
    27b4:	ed 5b       	subi	r30, 0xBD	; 189
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	60 81       	ld	r22, Z
    27ba:	71 81       	ldd	r23, Z+1	; 0x01
    27bc:	82 81       	ldd	r24, Z+2	; 0x02
    27be:	93 81       	ldd	r25, Z+3	; 0x03
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4a e7       	ldi	r20, 0x7A	; 122
    27c6:	53 e4       	ldi	r21, 0x43	; 67
    27c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	f8 01       	movw	r30, r16
    27d2:	80 83       	st	Z, r24
    27d4:	91 83       	std	Z+1, r25	; 0x01
    27d6:	a2 83       	std	Z+2, r26	; 0x02
    27d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27da:	fe 01       	movw	r30, r28
    27dc:	ff 96       	adiw	r30, 0x3f	; 63
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e8       	ldi	r20, 0x80	; 128
    27ec:	5f e3       	ldi	r21, 0x3F	; 63
    27ee:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    27f2:	88 23       	and	r24, r24
    27f4:	2c f4       	brge	.+10     	; 0x2800 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9e af       	std	Y+62, r25	; 0x3e
    27fc:	8d af       	std	Y+61, r24	; 0x3d
    27fe:	46 c0       	rjmp	.+140    	; 0x288c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2800:	fe 01       	movw	r30, r28
    2802:	ff 96       	adiw	r30, 0x3f	; 63
    2804:	60 81       	ld	r22, Z
    2806:	71 81       	ldd	r23, Z+1	; 0x01
    2808:	82 81       	ldd	r24, Z+2	; 0x02
    280a:	93 81       	ldd	r25, Z+3	; 0x03
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	3f ef       	ldi	r19, 0xFF	; 255
    2810:	4f e7       	ldi	r20, 0x7F	; 127
    2812:	57 e4       	ldi	r21, 0x47	; 71
    2814:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2818:	18 16       	cp	r1, r24
    281a:	64 f5       	brge	.+88     	; 0x2874 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281c:	fe 01       	movw	r30, r28
    281e:	ed 5b       	subi	r30, 0xBD	; 189
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e2       	ldi	r20, 0x20	; 32
    2830:	51 e4       	ldi	r21, 0x41	; 65
    2832:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9e af       	std	Y+62, r25	; 0x3e
    2848:	8d af       	std	Y+61, r24	; 0x3d
    284a:	0f c0       	rjmp	.+30     	; 0x286a <LCD_displayCharacter+0x478>
    284c:	89 e1       	ldi	r24, 0x19	; 25
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9c af       	std	Y+60, r25	; 0x3c
    2852:	8b af       	std	Y+59, r24	; 0x3b
    2854:	8b ad       	ldd	r24, Y+59	; 0x3b
    2856:	9c ad       	ldd	r25, Y+60	; 0x3c
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <LCD_displayCharacter+0x466>
    285c:	9c af       	std	Y+60, r25	; 0x3c
    285e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2860:	8d ad       	ldd	r24, Y+61	; 0x3d
    2862:	9e ad       	ldd	r25, Y+62	; 0x3e
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	9e af       	std	Y+62, r25	; 0x3e
    2868:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286a:	8d ad       	ldd	r24, Y+61	; 0x3d
    286c:	9e ad       	ldd	r25, Y+62	; 0x3e
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	69 f7       	brne	.-38     	; 0x284c <LCD_displayCharacter+0x45a>
    2872:	16 c0       	rjmp	.+44     	; 0x28a0 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2874:	fe 01       	movw	r30, r28
    2876:	ff 96       	adiw	r30, 0x3f	; 63
    2878:	60 81       	ld	r22, Z
    287a:	71 81       	ldd	r23, Z+1	; 0x01
    287c:	82 81       	ldd	r24, Z+2	; 0x02
    287e:	93 81       	ldd	r25, Z+3	; 0x03
    2880:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9e af       	std	Y+62, r25	; 0x3e
    288a:	8d af       	std	Y+61, r24	; 0x3d
    288c:	8d ad       	ldd	r24, Y+61	; 0x3d
    288e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2890:	9a af       	std	Y+58, r25	; 0x3a
    2892:	89 af       	std	Y+57, r24	; 0x39
    2894:	89 ad       	ldd	r24, Y+57	; 0x39
    2896:	9a ad       	ldd	r25, Y+58	; 0x3a
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <LCD_displayCharacter+0x4a6>
    289c:	9a af       	std	Y+58, r25	; 0x3a
    289e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28a0:	82 e0       	ldi	r24, 0x02	; 2
    28a2:	61 e0       	ldi	r22, 0x01	; 1
    28a4:	40 e0       	ldi	r20, 0x00	; 0
    28a6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a0 e8       	ldi	r26, 0x80	; 128
    28b0:	bf e3       	ldi	r27, 0x3F	; 63
    28b2:	8d ab       	std	Y+53, r24	; 0x35
    28b4:	9e ab       	std	Y+54, r25	; 0x36
    28b6:	af ab       	std	Y+55, r26	; 0x37
    28b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	6d a9       	ldd	r22, Y+53	; 0x35
    28bc:	7e a9       	ldd	r23, Y+54	; 0x36
    28be:	8f a9       	ldd	r24, Y+55	; 0x37
    28c0:	98 ad       	ldd	r25, Y+56	; 0x38
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a e7       	ldi	r20, 0x7A	; 122
    28c8:	53 e4       	ldi	r21, 0x43	; 67
    28ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	89 ab       	std	Y+49, r24	; 0x31
    28d4:	9a ab       	std	Y+50, r25	; 0x32
    28d6:	ab ab       	std	Y+51, r26	; 0x33
    28d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28da:	69 a9       	ldd	r22, Y+49	; 0x31
    28dc:	7a a9       	ldd	r23, Y+50	; 0x32
    28de:	8b a9       	ldd	r24, Y+51	; 0x33
    28e0:	9c a9       	ldd	r25, Y+52	; 0x34
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	2c f4       	brge	.+10     	; 0x28fc <LCD_displayCharacter+0x50a>
		__ticks = 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	98 ab       	std	Y+48, r25	; 0x30
    28f8:	8f a7       	std	Y+47, r24	; 0x2f
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    28fc:	69 a9       	ldd	r22, Y+49	; 0x31
    28fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2900:	8b a9       	ldd	r24, Y+51	; 0x33
    2902:	9c a9       	ldd	r25, Y+52	; 0x34
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	4c f5       	brge	.+82     	; 0x2966 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	6d a9       	ldd	r22, Y+53	; 0x35
    2916:	7e a9       	ldd	r23, Y+54	; 0x36
    2918:	8f a9       	ldd	r24, Y+55	; 0x37
    291a:	98 ad       	ldd	r25, Y+56	; 0x38
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e2       	ldi	r20, 0x20	; 32
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	98 ab       	std	Y+48, r25	; 0x30
    293a:	8f a7       	std	Y+47, r24	; 0x2f
    293c:	0f c0       	rjmp	.+30     	; 0x295c <LCD_displayCharacter+0x56a>
    293e:	89 e1       	ldi	r24, 0x19	; 25
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9e a7       	std	Y+46, r25	; 0x2e
    2944:	8d a7       	std	Y+45, r24	; 0x2d
    2946:	8d a5       	ldd	r24, Y+45	; 0x2d
    2948:	9e a5       	ldd	r25, Y+46	; 0x2e
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <LCD_displayCharacter+0x558>
    294e:	9e a7       	std	Y+46, r25	; 0x2e
    2950:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	8f a5       	ldd	r24, Y+47	; 0x2f
    2954:	98 a9       	ldd	r25, Y+48	; 0x30
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	98 ab       	std	Y+48, r25	; 0x30
    295a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	8f a5       	ldd	r24, Y+47	; 0x2f
    295e:	98 a9       	ldd	r25, Y+48	; 0x30
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	69 f7       	brne	.-38     	; 0x293e <LCD_displayCharacter+0x54c>
    2964:	14 c0       	rjmp	.+40     	; 0x298e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	69 a9       	ldd	r22, Y+49	; 0x31
    2968:	7a a9       	ldd	r23, Y+50	; 0x32
    296a:	8b a9       	ldd	r24, Y+51	; 0x33
    296c:	9c a9       	ldd	r25, Y+52	; 0x34
    296e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	98 ab       	std	Y+48, r25	; 0x30
    2978:	8f a7       	std	Y+47, r24	; 0x2f
    297a:	8f a5       	ldd	r24, Y+47	; 0x2f
    297c:	98 a9       	ldd	r25, Y+48	; 0x30
    297e:	9c a7       	std	Y+44, r25	; 0x2c
    2980:	8b a7       	std	Y+43, r24	; 0x2b
    2982:	8b a5       	ldd	r24, Y+43	; 0x2b
    2984:	9c a5       	ldd	r25, Y+44	; 0x2c
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <LCD_displayCharacter+0x594>
    298a:	9c a7       	std	Y+44, r25	; 0x2c
    298c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    298e:	82 e0       	ldi	r24, 0x02	; 2
    2990:	61 e0       	ldi	r22, 0x01	; 1
    2992:	41 e0       	ldi	r20, 0x01	; 1
    2994:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	a0 e8       	ldi	r26, 0x80	; 128
    299e:	bf e3       	ldi	r27, 0x3F	; 63
    29a0:	8f a3       	std	Y+39, r24	; 0x27
    29a2:	98 a7       	std	Y+40, r25	; 0x28
    29a4:	a9 a7       	std	Y+41, r26	; 0x29
    29a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a8:	6f a1       	ldd	r22, Y+39	; 0x27
    29aa:	78 a5       	ldd	r23, Y+40	; 0x28
    29ac:	89 a5       	ldd	r24, Y+41	; 0x29
    29ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	4a e7       	ldi	r20, 0x7A	; 122
    29b6:	53 e4       	ldi	r21, 0x43	; 67
    29b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	8b a3       	std	Y+35, r24	; 0x23
    29c2:	9c a3       	std	Y+36, r25	; 0x24
    29c4:	ad a3       	std	Y+37, r26	; 0x25
    29c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29c8:	6b a1       	ldd	r22, Y+35	; 0x23
    29ca:	7c a1       	ldd	r23, Y+36	; 0x24
    29cc:	8d a1       	ldd	r24, Y+37	; 0x25
    29ce:	9e a1       	ldd	r25, Y+38	; 0x26
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e8       	ldi	r20, 0x80	; 128
    29d6:	5f e3       	ldi	r21, 0x3F	; 63
    29d8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    29dc:	88 23       	and	r24, r24
    29de:	2c f4       	brge	.+10     	; 0x29ea <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9a a3       	std	Y+34, r25	; 0x22
    29e6:	89 a3       	std	Y+33, r24	; 0x21
    29e8:	3f c0       	rjmp	.+126    	; 0x2a68 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    29ea:	6b a1       	ldd	r22, Y+35	; 0x23
    29ec:	7c a1       	ldd	r23, Y+36	; 0x24
    29ee:	8d a1       	ldd	r24, Y+37	; 0x25
    29f0:	9e a1       	ldd	r25, Y+38	; 0x26
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	57 e4       	ldi	r21, 0x47	; 71
    29fa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	4c f5       	brge	.+82     	; 0x2a54 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a02:	6f a1       	ldd	r22, Y+39	; 0x27
    2a04:	78 a5       	ldd	r23, Y+40	; 0x28
    2a06:	89 a5       	ldd	r24, Y+41	; 0x29
    2a08:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e2       	ldi	r20, 0x20	; 32
    2a10:	51 e4       	ldi	r21, 0x41	; 65
    2a12:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9a a3       	std	Y+34, r25	; 0x22
    2a28:	89 a3       	std	Y+33, r24	; 0x21
    2a2a:	0f c0       	rjmp	.+30     	; 0x2a4a <LCD_displayCharacter+0x658>
    2a2c:	89 e1       	ldi	r24, 0x19	; 25
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	98 a3       	std	Y+32, r25	; 0x20
    2a32:	8f 8f       	std	Y+31, r24	; 0x1f
    2a34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a36:	98 a1       	ldd	r25, Y+32	; 0x20
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <LCD_displayCharacter+0x646>
    2a3c:	98 a3       	std	Y+32, r25	; 0x20
    2a3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a40:	89 a1       	ldd	r24, Y+33	; 0x21
    2a42:	9a a1       	ldd	r25, Y+34	; 0x22
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	9a a3       	std	Y+34, r25	; 0x22
    2a48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a4c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	69 f7       	brne	.-38     	; 0x2a2c <LCD_displayCharacter+0x63a>
    2a52:	14 c0       	rjmp	.+40     	; 0x2a7c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a54:	6b a1       	ldd	r22, Y+35	; 0x23
    2a56:	7c a1       	ldd	r23, Y+36	; 0x24
    2a58:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a5c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9a a3       	std	Y+34, r25	; 0x22
    2a66:	89 a3       	std	Y+33, r24	; 0x21
    2a68:	89 a1       	ldd	r24, Y+33	; 0x21
    2a6a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a6c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a6e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <LCD_displayCharacter+0x682>
    2a78:	9e 8f       	std	Y+30, r25	; 0x1e
    2a7a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	ed 59       	subi	r30, 0x9D	; 157
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 81       	ld	r24, Z
    2a84:	98 2f       	mov	r25, r24
    2a86:	91 70       	andi	r25, 0x01	; 1
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	49 2f       	mov	r20, r25
    2a8e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2a92:	fe 01       	movw	r30, r28
    2a94:	ed 59       	subi	r30, 0x9D	; 157
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	82 70       	andi	r24, 0x02	; 2
    2aa0:	90 70       	andi	r25, 0x00	; 0
    2aa2:	95 95       	asr	r25
    2aa4:	87 95       	ror	r24
    2aa6:	98 2f       	mov	r25, r24
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	61 e0       	ldi	r22, 0x01	; 1
    2aac:	49 2f       	mov	r20, r25
    2aae:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	ed 59       	subi	r30, 0x9D	; 157
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	88 2f       	mov	r24, r24
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	84 70       	andi	r24, 0x04	; 4
    2ac0:	90 70       	andi	r25, 0x00	; 0
    2ac2:	95 95       	asr	r25
    2ac4:	87 95       	ror	r24
    2ac6:	95 95       	asr	r25
    2ac8:	87 95       	ror	r24
    2aca:	98 2f       	mov	r25, r24
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	62 e0       	ldi	r22, 0x02	; 2
    2ad0:	49 2f       	mov	r20, r25
    2ad2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	ed 59       	subi	r30, 0x9D	; 157
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	80 81       	ld	r24, Z
    2ade:	88 2f       	mov	r24, r24
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	88 70       	andi	r24, 0x08	; 8
    2ae4:	90 70       	andi	r25, 0x00	; 0
    2ae6:	95 95       	asr	r25
    2ae8:	87 95       	ror	r24
    2aea:	95 95       	asr	r25
    2aec:	87 95       	ror	r24
    2aee:	95 95       	asr	r25
    2af0:	87 95       	ror	r24
    2af2:	98 2f       	mov	r25, r24
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	63 e0       	ldi	r22, 0x03	; 3
    2af8:	49 2f       	mov	r20, r25
    2afa:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	a0 e8       	ldi	r26, 0x80	; 128
    2b04:	bf e3       	ldi	r27, 0x3F	; 63
    2b06:	89 8f       	std	Y+25, r24	; 0x19
    2b08:	9a 8f       	std	Y+26, r25	; 0x1a
    2b0a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	4a e7       	ldi	r20, 0x7A	; 122
    2b1c:	53 e4       	ldi	r21, 0x43	; 67
    2b1e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	8d 8b       	std	Y+21, r24	; 0x15
    2b28:	9e 8b       	std	Y+22, r25	; 0x16
    2b2a:	af 8b       	std	Y+23, r26	; 0x17
    2b2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b30:	7e 89       	ldd	r23, Y+22	; 0x16
    2b32:	8f 89       	ldd	r24, Y+23	; 0x17
    2b34:	98 8d       	ldd	r25, Y+24	; 0x18
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e8       	ldi	r20, 0x80	; 128
    2b3c:	5f e3       	ldi	r21, 0x3F	; 63
    2b3e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2b42:	88 23       	and	r24, r24
    2b44:	2c f4       	brge	.+10     	; 0x2b50 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	9c 8b       	std	Y+20, r25	; 0x14
    2b4c:	8b 8b       	std	Y+19, r24	; 0x13
    2b4e:	3f c0       	rjmp	.+126    	; 0x2bce <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2b50:	6d 89       	ldd	r22, Y+21	; 0x15
    2b52:	7e 89       	ldd	r23, Y+22	; 0x16
    2b54:	8f 89       	ldd	r24, Y+23	; 0x17
    2b56:	98 8d       	ldd	r25, Y+24	; 0x18
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	3f ef       	ldi	r19, 0xFF	; 255
    2b5c:	4f e7       	ldi	r20, 0x7F	; 127
    2b5e:	57 e4       	ldi	r21, 0x47	; 71
    2b60:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2b64:	18 16       	cp	r1, r24
    2b66:	4c f5       	brge	.+82     	; 0x2bba <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b68:	69 8d       	ldd	r22, Y+25	; 0x19
    2b6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e2       	ldi	r20, 0x20	; 32
    2b76:	51 e4       	ldi	r21, 0x41	; 65
    2b78:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	bc 01       	movw	r22, r24
    2b82:	cd 01       	movw	r24, r26
    2b84:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	9c 8b       	std	Y+20, r25	; 0x14
    2b8e:	8b 8b       	std	Y+19, r24	; 0x13
    2b90:	0f c0       	rjmp	.+30     	; 0x2bb0 <LCD_displayCharacter+0x7be>
    2b92:	89 e1       	ldi	r24, 0x19	; 25
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	9a 8b       	std	Y+18, r25	; 0x12
    2b98:	89 8b       	std	Y+17, r24	; 0x11
    2b9a:	89 89       	ldd	r24, Y+17	; 0x11
    2b9c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <LCD_displayCharacter+0x7ac>
    2ba2:	9a 8b       	std	Y+18, r25	; 0x12
    2ba4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	9c 8b       	std	Y+20, r25	; 0x14
    2bae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	69 f7       	brne	.-38     	; 0x2b92 <LCD_displayCharacter+0x7a0>
    2bb8:	14 c0       	rjmp	.+40     	; 0x2be2 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bba:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	9c 8b       	std	Y+20, r25	; 0x14
    2bcc:	8b 8b       	std	Y+19, r24	; 0x13
    2bce:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd2:	98 8b       	std	Y+16, r25	; 0x10
    2bd4:	8f 87       	std	Y+15, r24	; 0x0f
    2bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd8:	98 89       	ldd	r25, Y+16	; 0x10
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <LCD_displayCharacter+0x7e8>
    2bde:	98 8b       	std	Y+16, r25	; 0x10
    2be0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	61 e0       	ldi	r22, 0x01	; 1
    2be6:	40 e0       	ldi	r20, 0x00	; 0
    2be8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a0 e8       	ldi	r26, 0x80	; 128
    2bf2:	bf e3       	ldi	r27, 0x3F	; 63
    2bf4:	8b 87       	std	Y+11, r24	; 0x0b
    2bf6:	9c 87       	std	Y+12, r25	; 0x0c
    2bf8:	ad 87       	std	Y+13, r26	; 0x0d
    2bfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	4a e7       	ldi	r20, 0x7A	; 122
    2c0a:	53 e4       	ldi	r21, 0x43	; 67
    2c0c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	8f 83       	std	Y+7, r24	; 0x07
    2c16:	98 87       	std	Y+8, r25	; 0x08
    2c18:	a9 87       	std	Y+9, r26	; 0x09
    2c1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1e:	78 85       	ldd	r23, Y+8	; 0x08
    2c20:	89 85       	ldd	r24, Y+9	; 0x09
    2c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e8       	ldi	r20, 0x80	; 128
    2c2a:	5f e3       	ldi	r21, 0x3F	; 63
    2c2c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2c30:	88 23       	and	r24, r24
    2c32:	2c f4       	brge	.+10     	; 0x2c3e <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	9e 83       	std	Y+6, r25	; 0x06
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
    2c3c:	3f c0       	rjmp	.+126    	; 0x2cbc <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c40:	78 85       	ldd	r23, Y+8	; 0x08
    2c42:	89 85       	ldd	r24, Y+9	; 0x09
    2c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	3f ef       	ldi	r19, 0xFF	; 255
    2c4a:	4f e7       	ldi	r20, 0x7F	; 127
    2c4c:	57 e4       	ldi	r21, 0x47	; 71
    2c4e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2c52:	18 16       	cp	r1, r24
    2c54:	4c f5       	brge	.+82     	; 0x2ca8 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e2       	ldi	r20, 0x20	; 32
    2c64:	51 e4       	ldi	r21, 0x41	; 65
    2c66:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	9e 83       	std	Y+6, r25	; 0x06
    2c7c:	8d 83       	std	Y+5, r24	; 0x05
    2c7e:	0f c0       	rjmp	.+30     	; 0x2c9e <LCD_displayCharacter+0x8ac>
    2c80:	89 e1       	ldi	r24, 0x19	; 25
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	9c 83       	std	Y+4, r25	; 0x04
    2c86:	8b 83       	std	Y+3, r24	; 0x03
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	f1 f7       	brne	.-4      	; 0x2c8c <LCD_displayCharacter+0x89a>
    2c90:	9c 83       	std	Y+4, r25	; 0x04
    2c92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c94:	8d 81       	ldd	r24, Y+5	; 0x05
    2c96:	9e 81       	ldd	r25, Y+6	; 0x06
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	69 f7       	brne	.-38     	; 0x2c80 <LCD_displayCharacter+0x88e>
    2ca6:	14 c0       	rjmp	.+40     	; 0x2cd0 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    2caa:	78 85       	ldd	r23, Y+8	; 0x08
    2cac:	89 85       	ldd	r24, Y+9	; 0x09
    2cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	9e 83       	std	Y+6, r25	; 0x06
    2cba:	8d 83       	std	Y+5, r24	; 0x05
    2cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc0:	9a 83       	std	Y+2, r25	; 0x02
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <LCD_displayCharacter+0x8d6>
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2cd0:	cd 59       	subi	r28, 0x9D	; 157
    2cd2:	df 4f       	sbci	r29, 0xFF	; 255
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	1f 91       	pop	r17
    2ce4:	0f 91       	pop	r16
    2ce6:	08 95       	ret

00002ce8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <LCD_displayString+0x6>
    2cee:	0f 92       	push	r0
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	9b 83       	std	Y+3, r25	; 0x03
    2cf6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cf8:	19 82       	std	Y+1, r1	; 0x01
    2cfa:	0e c0       	rjmp	.+28     	; 0x2d18 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	28 2f       	mov	r18, r24
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	9b 81       	ldd	r25, Y+3	; 0x03
    2d06:	fc 01       	movw	r30, r24
    2d08:	e2 0f       	add	r30, r18
    2d0a:	f3 1f       	adc	r31, r19
    2d0c:	80 81       	ld	r24, Z
    2d0e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_displayCharacter>
		i++;
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	8f 5f       	subi	r24, 0xFF	; 255
    2d16:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	28 2f       	mov	r18, r24
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	9b 81       	ldd	r25, Y+3	; 0x03
    2d22:	fc 01       	movw	r30, r24
    2d24:	e2 0f       	add	r30, r18
    2d26:	f3 1f       	adc	r31, r19
    2d28:	80 81       	ld	r24, Z
    2d2a:	88 23       	and	r24, r24
    2d2c:	39 f7       	brne	.-50     	; 0x2cfc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <LCD_moveCursor+0x6>
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <LCD_moveCursor+0x8>
    2d42:	0f 92       	push	r0
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	8a 83       	std	Y+2, r24	; 0x02
    2d4a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	28 2f       	mov	r18, r24
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	3d 83       	std	Y+5, r19	; 0x05
    2d54:	2c 83       	std	Y+4, r18	; 0x04
    2d56:	8c 81       	ldd	r24, Y+4	; 0x04
    2d58:	9d 81       	ldd	r25, Y+5	; 0x05
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	91 05       	cpc	r25, r1
    2d5e:	c1 f0       	breq	.+48     	; 0x2d90 <LCD_moveCursor+0x56>
    2d60:	2c 81       	ldd	r18, Y+4	; 0x04
    2d62:	3d 81       	ldd	r19, Y+5	; 0x05
    2d64:	22 30       	cpi	r18, 0x02	; 2
    2d66:	31 05       	cpc	r19, r1
    2d68:	2c f4       	brge	.+10     	; 0x2d74 <LCD_moveCursor+0x3a>
    2d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	61 f0       	breq	.+24     	; 0x2d8a <LCD_moveCursor+0x50>
    2d72:	19 c0       	rjmp	.+50     	; 0x2da6 <LCD_moveCursor+0x6c>
    2d74:	2c 81       	ldd	r18, Y+4	; 0x04
    2d76:	3d 81       	ldd	r19, Y+5	; 0x05
    2d78:	22 30       	cpi	r18, 0x02	; 2
    2d7a:	31 05       	cpc	r19, r1
    2d7c:	69 f0       	breq	.+26     	; 0x2d98 <LCD_moveCursor+0x5e>
    2d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d80:	9d 81       	ldd	r25, Y+5	; 0x05
    2d82:	83 30       	cpi	r24, 0x03	; 3
    2d84:	91 05       	cpc	r25, r1
    2d86:	61 f0       	breq	.+24     	; 0x2da0 <LCD_moveCursor+0x66>
    2d88:	0e c0       	rjmp	.+28     	; 0x2da6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	0b c0       	rjmp	.+22     	; 0x2da6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	80 5c       	subi	r24, 0xC0	; 192
    2d94:	89 83       	std	Y+1, r24	; 0x01
    2d96:	07 c0       	rjmp	.+14     	; 0x2da6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	80 5f       	subi	r24, 0xF0	; 240
    2d9c:	89 83       	std	Y+1, r24	; 0x01
    2d9e:	03 c0       	rjmp	.+6      	; 0x2da6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	80 5b       	subi	r24, 0xB0	; 176
    2da4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	80 68       	ori	r24, 0x80	; 128
    2daa:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <LCD_sendCommand>
}
    2dae:	0f 90       	pop	r0
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <LCD_displayStringRowColumn+0x6>
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <LCD_displayStringRowColumn+0x8>
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	6a 83       	std	Y+2, r22	; 0x02
    2dce:	5c 83       	std	Y+4, r21	; 0x04
    2dd0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	6a 81       	ldd	r22, Y+2	; 0x02
    2dd6:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dde:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
}
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	62 97       	sbiw	r28, 0x12	; 18
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
    2e04:	9a 8b       	std	Y+18, r25	; 0x12
    2e06:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e08:	89 89       	ldd	r24, Y+17	; 0x11
    2e0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e0c:	9e 01       	movw	r18, r28
    2e0e:	2f 5f       	subi	r18, 0xFF	; 255
    2e10:	3f 4f       	sbci	r19, 0xFF	; 255
    2e12:	b9 01       	movw	r22, r18
    2e14:	4a e0       	ldi	r20, 0x0A	; 10
    2e16:	50 e0       	ldi	r21, 0x00	; 0
    2e18:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <itoa>
   LCD_displayString(buff); /* Display the string */
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
}
    2e24:	62 96       	adiw	r28, 0x12	; 18
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2e36:	df 93       	push	r29
    2e38:	cf 93       	push	r28
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <LCD_sendCommand>
}
    2e44:	cf 91       	pop	r28
    2e46:	df 91       	pop	r29
    2e48:	08 95       	ret

00002e4a <LCD_displayFloat>:
void LCD_displayFloat(float number, uint8_t decimal_places) {
    2e4a:	0f 93       	push	r16
    2e4c:	1f 93       	push	r17
    2e4e:	df 93       	push	r29
    2e50:	cf 93       	push	r28
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	69 97       	sbiw	r28, 0x19	; 25
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	cd bf       	out	0x3d, r28	; 61
    2e62:	6d 8b       	std	Y+21, r22	; 0x15
    2e64:	7e 8b       	std	Y+22, r23	; 0x16
    2e66:	8f 8b       	std	Y+23, r24	; 0x17
    2e68:	98 8f       	std	Y+24, r25	; 0x18
    2e6a:	49 8f       	std	Y+25, r20	; 0x19
    // Convert float to string with specified decimal places
    char buffer[20];
    dtostrf(number, 5, decimal_places, buffer);
    2e6c:	89 8d       	ldd	r24, Y+25	; 0x19
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	8d 89       	ldd	r24, Y+21	; 0x15
    2e74:	9e 89       	ldd	r25, Y+22	; 0x16
    2e76:	af 89       	ldd	r26, Y+23	; 0x17
    2e78:	b8 8d       	ldd	r27, Y+24	; 0x18
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	45 e0       	ldi	r20, 0x05	; 5
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	fe 01       	movw	r30, r28
    2e84:	31 96       	adiw	r30, 0x01	; 1
    2e86:	8f 01       	movw	r16, r30
    2e88:	0e 94 31 35 	call	0x6a62	; 0x6a62 <dtostrf>

    // Display the string on LCD
    LCD_displayString(buffer);
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
}
    2e94:	69 96       	adiw	r28, 0x19	; 25
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	1f 91       	pop	r17
    2ea6:	0f 91       	pop	r16
    2ea8:	08 95       	ret

00002eaa <main>:
float max;

/*Ohmmeter*/

int main()
{
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <main+0x6>
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
	ADC_ConfigType config={
			ADC_VCC,ADC_PR64
	};
    2eb4:	19 82       	std	Y+1, r1	; 0x01
    2eb6:	86 e0       	ldi	r24, 0x06	; 6
    2eb8:	8a 83       	std	Y+2, r24	; 0x02
	ADC_init(&config);
    2eba:	ce 01       	movw	r24, r28
    2ebc:	01 96       	adiw	r24, 0x01	; 1
    2ebe:	0e 94 94 07 	call	0xf28	; 0xf28 <ADC_init>

	LCD_init();
    2ec2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_init>

    /*Keypad internal pull up*/
    PORTD|=(1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7);
    2ec6:	a2 e3       	ldi	r26, 0x32	; 50
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e2 e3       	ldi	r30, 0x32	; 50
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	80 6f       	ori	r24, 0xF0	; 240
    2ed2:	8c 93       	st	X, r24

	/*Mode selection*/
	DDRC|=(1<<PC4);
    2ed4:	a4 e3       	ldi	r26, 0x34	; 52
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e4 e3       	ldi	r30, 0x34	; 52
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	80 81       	ld	r24, Z
    2ede:	80 61       	ori	r24, 0x10	; 16
    2ee0:	8c 93       	st	X, r24
	DDRB|=(1<<PB7);
    2ee2:	a7 e3       	ldi	r26, 0x37	; 55
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e7 e3       	ldi	r30, 0x37	; 55
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	80 68       	ori	r24, 0x80	; 128
    2eee:	8c 93       	st	X, r24

	/*Voltmeter*/
    DDRC|=(1<<PC6)|(1<<PC7);
    2ef0:	a4 e3       	ldi	r26, 0x34	; 52
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	e4 e3       	ldi	r30, 0x34	; 52
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	80 6c       	ori	r24, 0xC0	; 192
    2efc:	8c 93       	st	X, r24
    DDRB|=(1<<PB4);
    2efe:	a7 e3       	ldi	r26, 0x37	; 55
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	e7 e3       	ldi	r30, 0x37	; 55
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	80 61       	ori	r24, 0x10	; 16
    2f0a:	8c 93       	st	X, r24

    /*Ammeter*/
    SET_BIT(DDRC,PC2);
    2f0c:	a4 e3       	ldi	r26, 0x34	; 52
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	e4 e3       	ldi	r30, 0x34	; 52
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	84 60       	ori	r24, 0x04	; 4
    2f18:	8c 93       	st	X, r24
    SET_BIT(DDRC,PC3);
    2f1a:	a4 e3       	ldi	r26, 0x34	; 52
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	e4 e3       	ldi	r30, 0x34	; 52
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	88 60       	ori	r24, 0x08	; 8
    2f26:	8c 93       	st	X, r24
    SET_BIT(DDRB,PIN0);
    2f28:	a7 e3       	ldi	r26, 0x37	; 55
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	e7 e3       	ldi	r30, 0x37	; 55
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	81 60       	ori	r24, 0x01	; 1
    2f34:	8c 93       	st	X, r24
    SET_BIT(DDRB,PIN1);
    2f36:	a7 e3       	ldi	r26, 0x37	; 55
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	e7 e3       	ldi	r30, 0x37	; 55
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	80 81       	ld	r24, Z
    2f40:	82 60       	ori	r24, 0x02	; 2
    2f42:	8c 93       	st	X, r24
    CLEAR_BIT(DDRB,PIN2);
    2f44:	a7 e3       	ldi	r26, 0x37	; 55
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e7 e3       	ldi	r30, 0x37	; 55
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	8b 7f       	andi	r24, 0xFB	; 251
    2f50:	8c 93       	st	X, r24
    CLEAR_BIT(DDRB,PIN3);
    2f52:	a7 e3       	ldi	r26, 0x37	; 55
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	e7 e3       	ldi	r30, 0x37	; 55
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 81       	ld	r24, Z
    2f5c:	87 7f       	andi	r24, 0xF7	; 247
    2f5e:	8c 93       	st	X, r24
    SET_BIT(DDRB,PIN7);
    2f60:	a7 e3       	ldi	r26, 0x37	; 55
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	e7 e3       	ldi	r30, 0x37	; 55
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	80 68       	ori	r24, 0x80	; 128
    2f6c:	8c 93       	st	X, r24
    SET_BIT(DDRC,PIN5);
    2f6e:	a4 e3       	ldi	r26, 0x34	; 52
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	e4 e3       	ldi	r30, 0x34	; 52
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	80 62       	ori	r24, 0x20	; 32
    2f7a:	8c 93       	st	X, r24
    SET_BIT(DDRA,PIN5);
    2f7c:	aa e3       	ldi	r26, 0x3A	; 58
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	ea e3       	ldi	r30, 0x3A	; 58
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	80 62       	ori	r24, 0x20	; 32
    2f88:	8c 93       	st	X, r24
    SET_BIT(DDRB,PIN5);
    2f8a:	a7 e3       	ldi	r26, 0x37	; 55
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	e7 e3       	ldi	r30, 0x37	; 55
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	80 62       	ori	r24, 0x20	; 32
    2f96:	8c 93       	st	X, r24
    SET_BIT(DDRB,PIN6);
    2f98:	a7 e3       	ldi	r26, 0x37	; 55
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	e7 e3       	ldi	r30, 0x37	; 55
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	80 64       	ori	r24, 0x40	; 64
    2fa4:	8c 93       	st	X, r24


while(1)
{
 MAIN_whichMode();
    2fa6:	0e 94 d6 17 	call	0x2fac	; 0x2fac <MAIN_whichMode>
    2faa:	fd cf       	rjmp	.-6      	; 0x2fa6 <main+0xfc>

00002fac <MAIN_whichMode>:
}
}
void MAIN_whichMode()
{
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62


	LCD_clearScreen();
    2fb4:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
	LCD_displayString("V=1 A=2 O=3");
    2fb8:	80 e6       	ldi	r24, 0x60	; 96
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    2fc0:	04 c0       	rjmp	.+8      	; 0x2fca <MAIN_whichMode+0x1e>
		while(num==0 || num==4)
		{
			num=KEYPAD_getPressedKey();
    2fc2:	0e 94 3f 0b 	call	0x167e	; 0x167e <KEYPAD_getPressedKey>
    2fc6:	80 93 22 02 	sts	0x0222, r24
{


	LCD_clearScreen();
	LCD_displayString("V=1 A=2 O=3");
		while(num==0 || num==4)
    2fca:	80 91 22 02 	lds	r24, 0x0222
    2fce:	88 23       	and	r24, r24
    2fd0:	c1 f3       	breq	.-16     	; 0x2fc2 <MAIN_whichMode+0x16>
    2fd2:	80 91 22 02 	lds	r24, 0x0222
    2fd6:	84 30       	cpi	r24, 0x04	; 4
    2fd8:	a1 f3       	breq	.-24     	; 0x2fc2 <MAIN_whichMode+0x16>
		{
			num=KEYPAD_getPressedKey();
		}


	if(num==1) //Voltmeter
    2fda:	80 91 22 02 	lds	r24, 0x0222
    2fde:	81 30       	cpi	r24, 0x01	; 1
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <MAIN_whichMode+0x38>
    2fe2:	56 c0       	rjmp	.+172    	; 0x3090 <MAIN_whichMode+0xe4>
	{
		num=0;
    2fe4:	10 92 22 02 	sts	0x0222, r1
		LCD_clearScreen();
    2fe8:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
		LCD_displayString("DC=1,AC=2");
    2fec:	8c e6       	ldi	r24, 0x6C	; 108
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    2ff4:	04 c0       	rjmp	.+8      	; 0x2ffe <MAIN_whichMode+0x52>
		while(num==0 || num==4)
		{
			num=KEYPAD_getPressedKey();
    2ff6:	0e 94 3f 0b 	call	0x167e	; 0x167e <KEYPAD_getPressedKey>
    2ffa:	80 93 22 02 	sts	0x0222, r24
	if(num==1) //Voltmeter
	{
		num=0;
		LCD_clearScreen();
		LCD_displayString("DC=1,AC=2");
		while(num==0 || num==4)
    2ffe:	80 91 22 02 	lds	r24, 0x0222
    3002:	88 23       	and	r24, r24
    3004:	c1 f3       	breq	.-16     	; 0x2ff6 <MAIN_whichMode+0x4a>
    3006:	80 91 22 02 	lds	r24, 0x0222
    300a:	84 30       	cpi	r24, 0x04	; 4
    300c:	a1 f3       	breq	.-24     	; 0x2ff6 <MAIN_whichMode+0x4a>
		{
			num=KEYPAD_getPressedKey();
		}
		if(num==1)
    300e:	80 91 22 02 	lds	r24, 0x0222
    3012:	81 30       	cpi	r24, 0x01	; 1
    3014:	c1 f4       	brne	.+48     	; 0x3046 <MAIN_whichMode+0x9a>
		{
			//Mode MUX
			PORTB&=~(1<<PB7);
    3016:	a8 e3       	ldi	r26, 0x38	; 56
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e8 e3       	ldi	r30, 0x38	; 56
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	8f 77       	andi	r24, 0x7F	; 127
    3022:	8c 93       	st	X, r24
			PORTC&=~(1<<PC4);
    3024:	a5 e3       	ldi	r26, 0x35	; 53
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	e5 e3       	ldi	r30, 0x35	; 53
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	8f 7e       	andi	r24, 0xEF	; 239
    3030:	8c 93       	st	X, r24

			PORTB&=~(1<<PB4);
    3032:	a8 e3       	ldi	r26, 0x38	; 56
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	e8 e3       	ldi	r30, 0x38	; 56
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	8f 7e       	andi	r24, 0xEF	; 239
    303e:	8c 93       	st	X, r24
			MAIN_whichRange();
    3040:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <MAIN_whichRange>
    3044:	1b c0       	rjmp	.+54     	; 0x307c <MAIN_whichMode+0xd0>
		}
		else if(num==2)
    3046:	80 91 22 02 	lds	r24, 0x0222
    304a:	82 30       	cpi	r24, 0x02	; 2
    304c:	b9 f4       	brne	.+46     	; 0x307c <MAIN_whichMode+0xd0>
		{
			//Mode MUX
			PORTB|=(1<<PB7);
    304e:	a8 e3       	ldi	r26, 0x38	; 56
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e8 e3       	ldi	r30, 0x38	; 56
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	80 68       	ori	r24, 0x80	; 128
    305a:	8c 93       	st	X, r24
			PORTC&=~(1<<PC4);
    305c:	a5 e3       	ldi	r26, 0x35	; 53
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	e5 e3       	ldi	r30, 0x35	; 53
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	80 81       	ld	r24, Z
    3066:	8f 7e       	andi	r24, 0xEF	; 239
    3068:	8c 93       	st	X, r24

			PORTB|=(1<<PB4);
    306a:	a8 e3       	ldi	r26, 0x38	; 56
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	e8 e3       	ldi	r30, 0x38	; 56
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	80 61       	ori	r24, 0x10	; 16
    3076:	8c 93       	st	X, r24
			MAIN_whichRange();
    3078:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <MAIN_whichRange>
		}

		if(num!=0||num!=1)
    307c:	80 91 22 02 	lds	r24, 0x0222
    3080:	88 23       	and	r24, r24
    3082:	21 f4       	brne	.+8      	; 0x308c <MAIN_whichMode+0xe0>
    3084:	80 91 22 02 	lds	r24, 0x0222
    3088:	81 30       	cpi	r24, 0x01	; 1
    308a:	11 f0       	breq	.+4      	; 0x3090 <MAIN_whichMode+0xe4>
			MAIN_whichMode();
    308c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <MAIN_whichMode>
	}  //Voltmeter

	if (num==2) //Ammeter
    3090:	80 91 22 02 	lds	r24, 0x0222
    3094:	82 30       	cpi	r24, 0x02	; 2
    3096:	21 f4       	brne	.+8      	; 0x30a0 <MAIN_whichMode+0xf4>
	{
		num=0;
    3098:	10 92 22 02 	sts	0x0222, r1
		AmmeterMode();
    309c:	0e 94 a7 1c 	call	0x394e	; 0x394e <AmmeterMode>
	}
}
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <MAIN_voltmeter>:




void MAIN_voltmeter()
{
    30a6:	df 93       	push	r29
    30a8:	cf 93       	push	r28
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
MAIN_whichMode();
    30ae:	0e 94 d6 17 	call	0x2fac	; 0x2fac <MAIN_whichMode>
}
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <MAIN_whichRange>:
void MAIN_whichRange()
{
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    30c0:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
	LCD_displayString("Select Range: ");
    30c4:	86 e7       	ldi	r24, 0x76	; 118
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    30cc:	04 c0       	rjmp	.+8      	; 0x30d6 <MAIN_whichRange+0x1e>
	while(num2==0 || num2==4)
	{
	num2=KEYPAD_getPressedKey();
    30ce:	0e 94 3f 0b 	call	0x167e	; 0x167e <KEYPAD_getPressedKey>
    30d2:	80 93 23 02 	sts	0x0223, r24
}
void MAIN_whichRange()
{
	LCD_clearScreen();
	LCD_displayString("Select Range: ");
	while(num2==0 || num2==4)
    30d6:	80 91 23 02 	lds	r24, 0x0223
    30da:	88 23       	and	r24, r24
    30dc:	c1 f3       	breq	.-16     	; 0x30ce <MAIN_whichRange+0x16>
    30de:	80 91 23 02 	lds	r24, 0x0223
    30e2:	84 30       	cpi	r24, 0x04	; 4
    30e4:	a1 f3       	breq	.-24     	; 0x30ce <MAIN_whichRange+0x16>
	{
	num2=KEYPAD_getPressedKey();
	}
	if(num2==1)
    30e6:	80 91 23 02 	lds	r24, 0x0223
    30ea:	81 30       	cpi	r24, 0x01	; 1
    30ec:	99 f4       	brne	.+38     	; 0x3114 <MAIN_whichRange+0x5c>
	{
		num2=0;
    30ee:	10 92 23 02 	sts	0x0223, r1
		PORTC&=~(1<<PC6);
    30f2:	a5 e3       	ldi	r26, 0x35	; 53
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	e5 e3       	ldi	r30, 0x35	; 53
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	8f 7b       	andi	r24, 0xBF	; 191
    30fe:	8c 93       	st	X, r24
		PORTC&=~(1<<PC7);
    3100:	a5 e3       	ldi	r26, 0x35	; 53
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e5 e3       	ldi	r30, 0x35	; 53
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	8f 77       	andi	r24, 0x7F	; 127
    310c:	8c 93       	st	X, r24
		MAIN_firstRange();
    310e:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <MAIN_firstRange>
    3112:	44 c0       	rjmp	.+136    	; 0x319c <MAIN_whichRange+0xe4>
	}
	else if(num2==2)
    3114:	80 91 23 02 	lds	r24, 0x0223
    3118:	82 30       	cpi	r24, 0x02	; 2
    311a:	99 f4       	brne	.+38     	; 0x3142 <MAIN_whichRange+0x8a>
	{
		num2=0;
    311c:	10 92 23 02 	sts	0x0223, r1
		PORTC|=(1<<PC6);
    3120:	a5 e3       	ldi	r26, 0x35	; 53
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e5 e3       	ldi	r30, 0x35	; 53
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	80 64       	ori	r24, 0x40	; 64
    312c:	8c 93       	st	X, r24
		PORTC&=~(1<<PC7);
    312e:	a5 e3       	ldi	r26, 0x35	; 53
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	e5 e3       	ldi	r30, 0x35	; 53
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	8f 77       	andi	r24, 0x7F	; 127
    313a:	8c 93       	st	X, r24
		MAIN_secondRange();
    313c:	0e 94 c8 19 	call	0x3390	; 0x3390 <MAIN_secondRange>
    3140:	2d c0       	rjmp	.+90     	; 0x319c <MAIN_whichRange+0xe4>
	}
	else if(num2==3)
    3142:	80 91 23 02 	lds	r24, 0x0223
    3146:	83 30       	cpi	r24, 0x03	; 3
    3148:	99 f4       	brne	.+38     	; 0x3170 <MAIN_whichRange+0xb8>
	{
		num2=0;
    314a:	10 92 23 02 	sts	0x0223, r1
		PORTC&=~(1<<PC6);
    314e:	a5 e3       	ldi	r26, 0x35	; 53
    3150:	b0 e0       	ldi	r27, 0x00	; 0
    3152:	e5 e3       	ldi	r30, 0x35	; 53
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 81       	ld	r24, Z
    3158:	8f 7b       	andi	r24, 0xBF	; 191
    315a:	8c 93       	st	X, r24
		PORTC|=(1<<PC7);
    315c:	a5 e3       	ldi	r26, 0x35	; 53
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	e5 e3       	ldi	r30, 0x35	; 53
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	80 68       	ori	r24, 0x80	; 128
    3168:	8c 93       	st	X, r24
		MAIN_thirdRange();
    316a:	0e 94 bd 1a 	call	0x357a	; 0x357a <MAIN_thirdRange>
    316e:	16 c0       	rjmp	.+44     	; 0x319c <MAIN_whichRange+0xe4>
	}
	else if(num2==5)
    3170:	80 91 23 02 	lds	r24, 0x0223
    3174:	85 30       	cpi	r24, 0x05	; 5
    3176:	91 f4       	brne	.+36     	; 0x319c <MAIN_whichRange+0xe4>
	{
		num2=0;
    3178:	10 92 23 02 	sts	0x0223, r1
		PORTC|=(1<<PC6);
    317c:	a5 e3       	ldi	r26, 0x35	; 53
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e5 e3       	ldi	r30, 0x35	; 53
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	80 64       	ori	r24, 0x40	; 64
    3188:	8c 93       	st	X, r24
		PORTC|=(1<<PC7);
    318a:	a5 e3       	ldi	r26, 0x35	; 53
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	e5 e3       	ldi	r30, 0x35	; 53
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	80 68       	ori	r24, 0x80	; 128
    3196:	8c 93       	st	X, r24
		MAIN_fourthRange();
    3198:	0e 94 b2 1b 	call	0x3764	; 0x3764 <MAIN_fourthRange>
	}
	MAIN_whichRange();
    319c:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <MAIN_whichRange>
}
    31a0:	cf 91       	pop	r28
    31a2:	df 91       	pop	r29
    31a4:	08 95       	ret

000031a6 <MAIN_firstRange>:
void MAIN_firstRange()
{
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	2e 97       	sbiw	r28, 0x0e	; 14
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    31ba:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
	LCD_displayString("FIRST");
    31be:	85 e8       	ldi	r24, 0x85	; 133
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	a8 e4       	ldi	r26, 0x48	; 72
    31cc:	b3 e4       	ldi	r27, 0x43	; 67
    31ce:	8b 87       	std	Y+11, r24	; 0x0b
    31d0:	9c 87       	std	Y+12, r25	; 0x0c
    31d2:	ad 87       	std	Y+13, r26	; 0x0d
    31d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31da:	8d 85       	ldd	r24, Y+13	; 0x0d
    31dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	4a e7       	ldi	r20, 0x7A	; 122
    31e4:	53 e4       	ldi	r21, 0x43	; 67
    31e6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	8f 83       	std	Y+7, r24	; 0x07
    31f0:	98 87       	std	Y+8, r25	; 0x08
    31f2:	a9 87       	std	Y+9, r26	; 0x09
    31f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31f6:	6f 81       	ldd	r22, Y+7	; 0x07
    31f8:	78 85       	ldd	r23, Y+8	; 0x08
    31fa:	89 85       	ldd	r24, Y+9	; 0x09
    31fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	40 e8       	ldi	r20, 0x80	; 128
    3204:	5f e3       	ldi	r21, 0x3F	; 63
    3206:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    320a:	88 23       	and	r24, r24
    320c:	2c f4       	brge	.+10     	; 0x3218 <MAIN_firstRange+0x72>
		__ticks = 1;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	9e 83       	std	Y+6, r25	; 0x06
    3214:	8d 83       	std	Y+5, r24	; 0x05
    3216:	3f c0       	rjmp	.+126    	; 0x3296 <MAIN_firstRange+0xf0>
	else if (__tmp > 65535)
    3218:	6f 81       	ldd	r22, Y+7	; 0x07
    321a:	78 85       	ldd	r23, Y+8	; 0x08
    321c:	89 85       	ldd	r24, Y+9	; 0x09
    321e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	3f ef       	ldi	r19, 0xFF	; 255
    3224:	4f e7       	ldi	r20, 0x7F	; 127
    3226:	57 e4       	ldi	r21, 0x47	; 71
    3228:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    322c:	18 16       	cp	r1, r24
    322e:	4c f5       	brge	.+82     	; 0x3282 <MAIN_firstRange+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3230:	6b 85       	ldd	r22, Y+11	; 0x0b
    3232:	7c 85       	ldd	r23, Y+12	; 0x0c
    3234:	8d 85       	ldd	r24, Y+13	; 0x0d
    3236:	9e 85       	ldd	r25, Y+14	; 0x0e
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	40 e2       	ldi	r20, 0x20	; 32
    323e:	51 e4       	ldi	r21, 0x41	; 65
    3240:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	bc 01       	movw	r22, r24
    324a:	cd 01       	movw	r24, r26
    324c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	0f c0       	rjmp	.+30     	; 0x3278 <MAIN_firstRange+0xd2>
    325a:	89 e1       	ldi	r24, 0x19	; 25
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	9c 83       	std	Y+4, r25	; 0x04
    3260:	8b 83       	std	Y+3, r24	; 0x03
    3262:	8b 81       	ldd	r24, Y+3	; 0x03
    3264:	9c 81       	ldd	r25, Y+4	; 0x04
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	f1 f7       	brne	.-4      	; 0x3266 <MAIN_firstRange+0xc0>
    326a:	9c 83       	std	Y+4, r25	; 0x04
    326c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326e:	8d 81       	ldd	r24, Y+5	; 0x05
    3270:	9e 81       	ldd	r25, Y+6	; 0x06
    3272:	01 97       	sbiw	r24, 0x01	; 1
    3274:	9e 83       	std	Y+6, r25	; 0x06
    3276:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3278:	8d 81       	ldd	r24, Y+5	; 0x05
    327a:	9e 81       	ldd	r25, Y+6	; 0x06
    327c:	00 97       	sbiw	r24, 0x00	; 0
    327e:	69 f7       	brne	.-38     	; 0x325a <MAIN_firstRange+0xb4>
    3280:	14 c0       	rjmp	.+40     	; 0x32aa <MAIN_firstRange+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3282:	6f 81       	ldd	r22, Y+7	; 0x07
    3284:	78 85       	ldd	r23, Y+8	; 0x08
    3286:	89 85       	ldd	r24, Y+9	; 0x09
    3288:	9a 85       	ldd	r25, Y+10	; 0x0a
    328a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	9e 83       	std	Y+6, r25	; 0x06
    3294:	8d 83       	std	Y+5, r24	; 0x05
    3296:	8d 81       	ldd	r24, Y+5	; 0x05
    3298:	9e 81       	ldd	r25, Y+6	; 0x06
    329a:	9a 83       	std	Y+2, r25	; 0x02
    329c:	89 83       	std	Y+1, r24	; 0x01
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	9a 81       	ldd	r25, Y+2	; 0x02
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <MAIN_firstRange+0xfc>
    32a6:	9a 83       	std	Y+2, r25	; 0x02
    32a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	LCD_clearScreen();
    32aa:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
    32ae:	5e c0       	rjmp	.+188    	; 0x336c <MAIN_firstRange+0x1c6>
	while(KEYPAD_getPressedKey()!='#')
	{
		LCD_clearScreen();
    32b0:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
		adc_value=ADC_readChannel(0);
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    32ba:	cc 01       	movw	r24, r24
    32bc:	a0 e0       	ldi	r26, 0x00	; 0
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	bc 01       	movw	r22, r24
    32c2:	cd 01       	movw	r24, r26
    32c4:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	80 93 2c 02 	sts	0x022C, r24
    32d0:	90 93 2d 02 	sts	0x022D, r25
    32d4:	a0 93 2e 02 	sts	0x022E, r26
    32d8:	b0 93 2f 02 	sts	0x022F, r27
		voltage=(adc_value*(5.0/1023))*2.59;
    32dc:	80 91 2c 02 	lds	r24, 0x022C
    32e0:	90 91 2d 02 	lds	r25, 0x022D
    32e4:	a0 91 2e 02 	lds	r26, 0x022E
    32e8:	b0 91 2f 02 	lds	r27, 0x022F
    32ec:	bc 01       	movw	r22, r24
    32ee:	cd 01       	movw	r24, r26
    32f0:	2a e0       	ldi	r18, 0x0A	; 10
    32f2:	38 e2       	ldi	r19, 0x28	; 40
    32f4:	40 ea       	ldi	r20, 0xA0	; 160
    32f6:	5b e3       	ldi	r21, 0x3B	; 59
    32f8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	bc 01       	movw	r22, r24
    3302:	cd 01       	movw	r24, r26
    3304:	2f e8       	ldi	r18, 0x8F	; 143
    3306:	32 ec       	ldi	r19, 0xC2	; 194
    3308:	45 e2       	ldi	r20, 0x25	; 37
    330a:	50 e4       	ldi	r21, 0x40	; 64
    330c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	80 93 28 02 	sts	0x0228, r24
    3318:	90 93 29 02 	sts	0x0229, r25
    331c:	a0 93 2a 02 	sts	0x022A, r26
    3320:	b0 93 2b 02 	sts	0x022B, r27
				if(voltage>=10)
    3324:	80 91 28 02 	lds	r24, 0x0228
    3328:	90 91 29 02 	lds	r25, 0x0229
    332c:	a0 91 2a 02 	lds	r26, 0x022A
    3330:	b0 91 2b 02 	lds	r27, 0x022B
    3334:	bc 01       	movw	r22, r24
    3336:	cd 01       	movw	r24, r26
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	40 e2       	ldi	r20, 0x20	; 32
    333e:	51 e4       	ldi	r21, 0x41	; 65
    3340:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
    3344:	88 23       	and	r24, r24
    3346:	2c f0       	brlt	.+10     	; 0x3352 <MAIN_firstRange+0x1ac>
					LCD_displayString("OUT OF RANGE");
    3348:	8b e8       	ldi	r24, 0x8B	; 139
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    3350:	0d c0       	rjmp	.+26     	; 0x336c <MAIN_firstRange+0x1c6>
				else
				{
					LCD_displayFloat(voltage,2);
    3352:	80 91 28 02 	lds	r24, 0x0228
    3356:	90 91 29 02 	lds	r25, 0x0229
    335a:	a0 91 2a 02 	lds	r26, 0x022A
    335e:	b0 91 2b 02 	lds	r27, 0x022B
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	42 e0       	ldi	r20, 0x02	; 2
    3368:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
{
	LCD_clearScreen();
	LCD_displayString("FIRST");
	_delay_ms(200);
	LCD_clearScreen();
	while(KEYPAD_getPressedKey()!='#')
    336c:	0e 94 3f 0b 	call	0x167e	; 0x167e <KEYPAD_getPressedKey>
    3370:	83 32       	cpi	r24, 0x23	; 35
    3372:	09 f0       	breq	.+2      	; 0x3376 <MAIN_firstRange+0x1d0>
    3374:	9d cf       	rjmp	.-198    	; 0x32b0 <MAIN_firstRange+0x10a>
				{
					LCD_displayFloat(voltage,2);

				}
	}
	num=0;
    3376:	10 92 22 02 	sts	0x0222, r1
	MAIN_whichMode();
    337a:	0e 94 d6 17 	call	0x2fac	; 0x2fac <MAIN_whichMode>
}
    337e:	2e 96       	adiw	r28, 0x0e	; 14
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	08 95       	ret

00003390 <MAIN_secondRange>:
void MAIN_secondRange()
{
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
    3398:	2e 97       	sbiw	r28, 0x0e	; 14
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	f8 94       	cli
    339e:	de bf       	out	0x3e, r29	; 62
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    33a4:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
	LCD_displayString("SECOND");
    33a8:	88 e9       	ldi	r24, 0x98	; 152
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	a8 e4       	ldi	r26, 0x48	; 72
    33b6:	b3 e4       	ldi	r27, 0x43	; 67
    33b8:	8b 87       	std	Y+11, r24	; 0x0b
    33ba:	9c 87       	std	Y+12, r25	; 0x0c
    33bc:	ad 87       	std	Y+13, r26	; 0x0d
    33be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	4a e7       	ldi	r20, 0x7A	; 122
    33ce:	53 e4       	ldi	r21, 0x43	; 67
    33d0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	8f 83       	std	Y+7, r24	; 0x07
    33da:	98 87       	std	Y+8, r25	; 0x08
    33dc:	a9 87       	std	Y+9, r26	; 0x09
    33de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33e0:	6f 81       	ldd	r22, Y+7	; 0x07
    33e2:	78 85       	ldd	r23, Y+8	; 0x08
    33e4:	89 85       	ldd	r24, Y+9	; 0x09
    33e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e8       	ldi	r20, 0x80	; 128
    33ee:	5f e3       	ldi	r21, 0x3F	; 63
    33f0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    33f4:	88 23       	and	r24, r24
    33f6:	2c f4       	brge	.+10     	; 0x3402 <MAIN_secondRange+0x72>
		__ticks = 1;
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	9e 83       	std	Y+6, r25	; 0x06
    33fe:	8d 83       	std	Y+5, r24	; 0x05
    3400:	3f c0       	rjmp	.+126    	; 0x3480 <MAIN_secondRange+0xf0>
	else if (__tmp > 65535)
    3402:	6f 81       	ldd	r22, Y+7	; 0x07
    3404:	78 85       	ldd	r23, Y+8	; 0x08
    3406:	89 85       	ldd	r24, Y+9	; 0x09
    3408:	9a 85       	ldd	r25, Y+10	; 0x0a
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	3f ef       	ldi	r19, 0xFF	; 255
    340e:	4f e7       	ldi	r20, 0x7F	; 127
    3410:	57 e4       	ldi	r21, 0x47	; 71
    3412:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3416:	18 16       	cp	r1, r24
    3418:	4c f5       	brge	.+82     	; 0x346c <MAIN_secondRange+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    341a:	6b 85       	ldd	r22, Y+11	; 0x0b
    341c:	7c 85       	ldd	r23, Y+12	; 0x0c
    341e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3420:	9e 85       	ldd	r25, Y+14	; 0x0e
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	40 e2       	ldi	r20, 0x20	; 32
    3428:	51 e4       	ldi	r21, 0x41	; 65
    342a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	bc 01       	movw	r22, r24
    3434:	cd 01       	movw	r24, r26
    3436:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	0f c0       	rjmp	.+30     	; 0x3462 <MAIN_secondRange+0xd2>
    3444:	89 e1       	ldi	r24, 0x19	; 25
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	9c 83       	std	Y+4, r25	; 0x04
    344a:	8b 83       	std	Y+3, r24	; 0x03
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	9c 81       	ldd	r25, Y+4	; 0x04
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	f1 f7       	brne	.-4      	; 0x3450 <MAIN_secondRange+0xc0>
    3454:	9c 83       	std	Y+4, r25	; 0x04
    3456:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3458:	8d 81       	ldd	r24, Y+5	; 0x05
    345a:	9e 81       	ldd	r25, Y+6	; 0x06
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	9e 83       	std	Y+6, r25	; 0x06
    3460:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3462:	8d 81       	ldd	r24, Y+5	; 0x05
    3464:	9e 81       	ldd	r25, Y+6	; 0x06
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	69 f7       	brne	.-38     	; 0x3444 <MAIN_secondRange+0xb4>
    346a:	14 c0       	rjmp	.+40     	; 0x3494 <MAIN_secondRange+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346c:	6f 81       	ldd	r22, Y+7	; 0x07
    346e:	78 85       	ldd	r23, Y+8	; 0x08
    3470:	89 85       	ldd	r24, Y+9	; 0x09
    3472:	9a 85       	ldd	r25, Y+10	; 0x0a
    3474:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	9e 83       	std	Y+6, r25	; 0x06
    347e:	8d 83       	std	Y+5, r24	; 0x05
    3480:	8d 81       	ldd	r24, Y+5	; 0x05
    3482:	9e 81       	ldd	r25, Y+6	; 0x06
    3484:	9a 83       	std	Y+2, r25	; 0x02
    3486:	89 83       	std	Y+1, r24	; 0x01
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	9a 81       	ldd	r25, Y+2	; 0x02
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <MAIN_secondRange+0xfc>
    3490:	9a 83       	std	Y+2, r25	; 0x02
    3492:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	LCD_clearScreen();
    3494:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
    3498:	5e c0       	rjmp	.+188    	; 0x3556 <MAIN_secondRange+0x1c6>
	while(KEYPAD_getPressedKey()!='#')
	{
		LCD_clearScreen();
    349a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
	adc_value=ADC_readChannel(0);
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    34a4:	cc 01       	movw	r24, r24
    34a6:	a0 e0       	ldi	r26, 0x00	; 0
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	bc 01       	movw	r22, r24
    34ac:	cd 01       	movw	r24, r26
    34ae:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	80 93 2c 02 	sts	0x022C, r24
    34ba:	90 93 2d 02 	sts	0x022D, r25
    34be:	a0 93 2e 02 	sts	0x022E, r26
    34c2:	b0 93 2f 02 	sts	0x022F, r27
	voltage=(adc_value*(5.0/1023))*11.11;
    34c6:	80 91 2c 02 	lds	r24, 0x022C
    34ca:	90 91 2d 02 	lds	r25, 0x022D
    34ce:	a0 91 2e 02 	lds	r26, 0x022E
    34d2:	b0 91 2f 02 	lds	r27, 0x022F
    34d6:	bc 01       	movw	r22, r24
    34d8:	cd 01       	movw	r24, r26
    34da:	2a e0       	ldi	r18, 0x0A	; 10
    34dc:	38 e2       	ldi	r19, 0x28	; 40
    34de:	40 ea       	ldi	r20, 0xA0	; 160
    34e0:	5b e3       	ldi	r21, 0x3B	; 59
    34e2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	bc 01       	movw	r22, r24
    34ec:	cd 01       	movw	r24, r26
    34ee:	2f e8       	ldi	r18, 0x8F	; 143
    34f0:	32 ec       	ldi	r19, 0xC2	; 194
    34f2:	41 e3       	ldi	r20, 0x31	; 49
    34f4:	51 e4       	ldi	r21, 0x41	; 65
    34f6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	80 93 28 02 	sts	0x0228, r24
    3502:	90 93 29 02 	sts	0x0229, r25
    3506:	a0 93 2a 02 	sts	0x022A, r26
    350a:	b0 93 2b 02 	sts	0x022B, r27
			if(voltage>=50)
    350e:	80 91 28 02 	lds	r24, 0x0228
    3512:	90 91 29 02 	lds	r25, 0x0229
    3516:	a0 91 2a 02 	lds	r26, 0x022A
    351a:	b0 91 2b 02 	lds	r27, 0x022B
    351e:	bc 01       	movw	r22, r24
    3520:	cd 01       	movw	r24, r26
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	48 e4       	ldi	r20, 0x48	; 72
    3528:	52 e4       	ldi	r21, 0x42	; 66
    352a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
    352e:	88 23       	and	r24, r24
    3530:	2c f0       	brlt	.+10     	; 0x353c <MAIN_secondRange+0x1ac>
				LCD_displayString("OUT OF RANGE");
    3532:	8b e8       	ldi	r24, 0x8B	; 139
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    353a:	0d c0       	rjmp	.+26     	; 0x3556 <MAIN_secondRange+0x1c6>
			else
			{
			LCD_displayFloat(voltage,2);
    353c:	80 91 28 02 	lds	r24, 0x0228
    3540:	90 91 29 02 	lds	r25, 0x0229
    3544:	a0 91 2a 02 	lds	r26, 0x022A
    3548:	b0 91 2b 02 	lds	r27, 0x022B
    354c:	bc 01       	movw	r22, r24
    354e:	cd 01       	movw	r24, r26
    3550:	42 e0       	ldi	r20, 0x02	; 2
    3552:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
{
	LCD_clearScreen();
	LCD_displayString("SECOND");
	_delay_ms(200);
	LCD_clearScreen();
	while(KEYPAD_getPressedKey()!='#')
    3556:	0e 94 3f 0b 	call	0x167e	; 0x167e <KEYPAD_getPressedKey>
    355a:	83 32       	cpi	r24, 0x23	; 35
    355c:	09 f0       	breq	.+2      	; 0x3560 <MAIN_secondRange+0x1d0>
    355e:	9d cf       	rjmp	.-198    	; 0x349a <MAIN_secondRange+0x10a>
			{
			LCD_displayFloat(voltage,2);

			}
}
	num=0;
    3560:	10 92 22 02 	sts	0x0222, r1
	MAIN_whichMode();
    3564:	0e 94 d6 17 	call	0x2fac	; 0x2fac <MAIN_whichMode>
}
    3568:	2e 96       	adiw	r28, 0x0e	; 14
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <MAIN_thirdRange>:
void MAIN_thirdRange()
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
    3582:	2e 97       	sbiw	r28, 0x0e	; 14
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	f8 94       	cli
    3588:	de bf       	out	0x3e, r29	; 62
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    358e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
	LCD_displayString("THIRD");
    3592:	8f e9       	ldi	r24, 0x9F	; 159
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	a8 e4       	ldi	r26, 0x48	; 72
    35a0:	b3 e4       	ldi	r27, 0x43	; 67
    35a2:	8b 87       	std	Y+11, r24	; 0x0b
    35a4:	9c 87       	std	Y+12, r25	; 0x0c
    35a6:	ad 87       	std	Y+13, r26	; 0x0d
    35a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	4a e7       	ldi	r20, 0x7A	; 122
    35b8:	53 e4       	ldi	r21, 0x43	; 67
    35ba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	8f 83       	std	Y+7, r24	; 0x07
    35c4:	98 87       	std	Y+8, r25	; 0x08
    35c6:	a9 87       	std	Y+9, r26	; 0x09
    35c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ca:	6f 81       	ldd	r22, Y+7	; 0x07
    35cc:	78 85       	ldd	r23, Y+8	; 0x08
    35ce:	89 85       	ldd	r24, Y+9	; 0x09
    35d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	40 e8       	ldi	r20, 0x80	; 128
    35d8:	5f e3       	ldi	r21, 0x3F	; 63
    35da:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    35de:	88 23       	and	r24, r24
    35e0:	2c f4       	brge	.+10     	; 0x35ec <MAIN_thirdRange+0x72>
		__ticks = 1;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	3f c0       	rjmp	.+126    	; 0x366a <MAIN_thirdRange+0xf0>
	else if (__tmp > 65535)
    35ec:	6f 81       	ldd	r22, Y+7	; 0x07
    35ee:	78 85       	ldd	r23, Y+8	; 0x08
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	3f ef       	ldi	r19, 0xFF	; 255
    35f8:	4f e7       	ldi	r20, 0x7F	; 127
    35fa:	57 e4       	ldi	r21, 0x47	; 71
    35fc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3600:	18 16       	cp	r1, r24
    3602:	4c f5       	brge	.+82     	; 0x3656 <MAIN_thirdRange+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3604:	6b 85       	ldd	r22, Y+11	; 0x0b
    3606:	7c 85       	ldd	r23, Y+12	; 0x0c
    3608:	8d 85       	ldd	r24, Y+13	; 0x0d
    360a:	9e 85       	ldd	r25, Y+14	; 0x0e
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e2       	ldi	r20, 0x20	; 32
    3612:	51 e4       	ldi	r21, 0x41	; 65
    3614:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	bc 01       	movw	r22, r24
    361e:	cd 01       	movw	r24, r26
    3620:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	9e 83       	std	Y+6, r25	; 0x06
    362a:	8d 83       	std	Y+5, r24	; 0x05
    362c:	0f c0       	rjmp	.+30     	; 0x364c <MAIN_thirdRange+0xd2>
    362e:	89 e1       	ldi	r24, 0x19	; 25
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	9c 83       	std	Y+4, r25	; 0x04
    3634:	8b 83       	std	Y+3, r24	; 0x03
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	9c 81       	ldd	r25, Y+4	; 0x04
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	f1 f7       	brne	.-4      	; 0x363a <MAIN_thirdRange+0xc0>
    363e:	9c 83       	std	Y+4, r25	; 0x04
    3640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3642:	8d 81       	ldd	r24, Y+5	; 0x05
    3644:	9e 81       	ldd	r25, Y+6	; 0x06
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	9e 83       	std	Y+6, r25	; 0x06
    364a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    364c:	8d 81       	ldd	r24, Y+5	; 0x05
    364e:	9e 81       	ldd	r25, Y+6	; 0x06
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	69 f7       	brne	.-38     	; 0x362e <MAIN_thirdRange+0xb4>
    3654:	14 c0       	rjmp	.+40     	; 0x367e <MAIN_thirdRange+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3656:	6f 81       	ldd	r22, Y+7	; 0x07
    3658:	78 85       	ldd	r23, Y+8	; 0x08
    365a:	89 85       	ldd	r24, Y+9	; 0x09
    365c:	9a 85       	ldd	r25, Y+10	; 0x0a
    365e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	9e 83       	std	Y+6, r25	; 0x06
    3668:	8d 83       	std	Y+5, r24	; 0x05
    366a:	8d 81       	ldd	r24, Y+5	; 0x05
    366c:	9e 81       	ldd	r25, Y+6	; 0x06
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	f1 f7       	brne	.-4      	; 0x3676 <MAIN_thirdRange+0xfc>
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	LCD_clearScreen();
    367e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
    3682:	5e c0       	rjmp	.+188    	; 0x3740 <MAIN_thirdRange+0x1c6>
while(KEYPAD_getPressedKey()!='#')
{
	LCD_clearScreen();
    3684:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
	adc_value=ADC_readChannel(0);
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    368e:	cc 01       	movw	r24, r24
    3690:	a0 e0       	ldi	r26, 0x00	; 0
    3692:	b0 e0       	ldi	r27, 0x00	; 0
    3694:	bc 01       	movw	r22, r24
    3696:	cd 01       	movw	r24, r26
    3698:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	80 93 2c 02 	sts	0x022C, r24
    36a4:	90 93 2d 02 	sts	0x022D, r25
    36a8:	a0 93 2e 02 	sts	0x022E, r26
    36ac:	b0 93 2f 02 	sts	0x022F, r27
	voltage=adc_value*(5.0/1023)*25.54;
    36b0:	80 91 2c 02 	lds	r24, 0x022C
    36b4:	90 91 2d 02 	lds	r25, 0x022D
    36b8:	a0 91 2e 02 	lds	r26, 0x022E
    36bc:	b0 91 2f 02 	lds	r27, 0x022F
    36c0:	bc 01       	movw	r22, r24
    36c2:	cd 01       	movw	r24, r26
    36c4:	2a e0       	ldi	r18, 0x0A	; 10
    36c6:	38 e2       	ldi	r19, 0x28	; 40
    36c8:	40 ea       	ldi	r20, 0xA0	; 160
    36ca:	5b e3       	ldi	r21, 0x3B	; 59
    36cc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	bc 01       	movw	r22, r24
    36d6:	cd 01       	movw	r24, r26
    36d8:	2c ee       	ldi	r18, 0xEC	; 236
    36da:	31 e5       	ldi	r19, 0x51	; 81
    36dc:	4c ec       	ldi	r20, 0xCC	; 204
    36de:	51 e4       	ldi	r21, 0x41	; 65
    36e0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	80 93 28 02 	sts	0x0228, r24
    36ec:	90 93 29 02 	sts	0x0229, r25
    36f0:	a0 93 2a 02 	sts	0x022A, r26
    36f4:	b0 93 2b 02 	sts	0x022B, r27
			if(voltage>=100)
    36f8:	80 91 28 02 	lds	r24, 0x0228
    36fc:	90 91 29 02 	lds	r25, 0x0229
    3700:	a0 91 2a 02 	lds	r26, 0x022A
    3704:	b0 91 2b 02 	lds	r27, 0x022B
    3708:	bc 01       	movw	r22, r24
    370a:	cd 01       	movw	r24, r26
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	48 ec       	ldi	r20, 0xC8	; 200
    3712:	52 e4       	ldi	r21, 0x42	; 66
    3714:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
    3718:	88 23       	and	r24, r24
    371a:	2c f0       	brlt	.+10     	; 0x3726 <MAIN_thirdRange+0x1ac>
				LCD_displayString("OUT OF RANGE");
    371c:	8b e8       	ldi	r24, 0x8B	; 139
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    3724:	0d c0       	rjmp	.+26     	; 0x3740 <MAIN_thirdRange+0x1c6>
			else
			{
				LCD_displayFloat(voltage,2);
    3726:	80 91 28 02 	lds	r24, 0x0228
    372a:	90 91 29 02 	lds	r25, 0x0229
    372e:	a0 91 2a 02 	lds	r26, 0x022A
    3732:	b0 91 2b 02 	lds	r27, 0x022B
    3736:	bc 01       	movw	r22, r24
    3738:	cd 01       	movw	r24, r26
    373a:	42 e0       	ldi	r20, 0x02	; 2
    373c:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
{
	LCD_clearScreen();
	LCD_displayString("THIRD");
	_delay_ms(200);
	LCD_clearScreen();
while(KEYPAD_getPressedKey()!='#')
    3740:	0e 94 3f 0b 	call	0x167e	; 0x167e <KEYPAD_getPressedKey>
    3744:	83 32       	cpi	r24, 0x23	; 35
    3746:	09 f0       	breq	.+2      	; 0x374a <MAIN_thirdRange+0x1d0>
    3748:	9d cf       	rjmp	.-198    	; 0x3684 <MAIN_thirdRange+0x10a>
			{
				LCD_displayFloat(voltage,2);

			}
}
num=0;
    374a:	10 92 22 02 	sts	0x0222, r1
MAIN_whichMode();
    374e:	0e 94 d6 17 	call	0x2fac	; 0x2fac <MAIN_whichMode>
}
    3752:	2e 96       	adiw	r28, 0x0e	; 14
    3754:	0f b6       	in	r0, 0x3f	; 63
    3756:	f8 94       	cli
    3758:	de bf       	out	0x3e, r29	; 62
    375a:	0f be       	out	0x3f, r0	; 63
    375c:	cd bf       	out	0x3d, r28	; 61
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	08 95       	ret

00003764 <MAIN_fourthRange>:
void MAIN_fourthRange()
{
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
    376c:	2e 97       	sbiw	r28, 0x0e	; 14
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	0f be       	out	0x3f, r0	; 63
    3776:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    3778:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
	LCD_displayString("FOURTH");
    377c:	85 ea       	ldi	r24, 0xA5	; 165
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	a8 e4       	ldi	r26, 0x48	; 72
    378a:	b3 e4       	ldi	r27, 0x43	; 67
    378c:	8b 87       	std	Y+11, r24	; 0x0b
    378e:	9c 87       	std	Y+12, r25	; 0x0c
    3790:	ad 87       	std	Y+13, r26	; 0x0d
    3792:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3794:	6b 85       	ldd	r22, Y+11	; 0x0b
    3796:	7c 85       	ldd	r23, Y+12	; 0x0c
    3798:	8d 85       	ldd	r24, Y+13	; 0x0d
    379a:	9e 85       	ldd	r25, Y+14	; 0x0e
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	4a e7       	ldi	r20, 0x7A	; 122
    37a2:	53 e4       	ldi	r21, 0x43	; 67
    37a4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	8f 83       	std	Y+7, r24	; 0x07
    37ae:	98 87       	std	Y+8, r25	; 0x08
    37b0:	a9 87       	std	Y+9, r26	; 0x09
    37b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37b4:	6f 81       	ldd	r22, Y+7	; 0x07
    37b6:	78 85       	ldd	r23, Y+8	; 0x08
    37b8:	89 85       	ldd	r24, Y+9	; 0x09
    37ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	40 e8       	ldi	r20, 0x80	; 128
    37c2:	5f e3       	ldi	r21, 0x3F	; 63
    37c4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    37c8:	88 23       	and	r24, r24
    37ca:	2c f4       	brge	.+10     	; 0x37d6 <MAIN_fourthRange+0x72>
		__ticks = 1;
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	9e 83       	std	Y+6, r25	; 0x06
    37d2:	8d 83       	std	Y+5, r24	; 0x05
    37d4:	3f c0       	rjmp	.+126    	; 0x3854 <MAIN_fourthRange+0xf0>
	else if (__tmp > 65535)
    37d6:	6f 81       	ldd	r22, Y+7	; 0x07
    37d8:	78 85       	ldd	r23, Y+8	; 0x08
    37da:	89 85       	ldd	r24, Y+9	; 0x09
    37dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	3f ef       	ldi	r19, 0xFF	; 255
    37e2:	4f e7       	ldi	r20, 0x7F	; 127
    37e4:	57 e4       	ldi	r21, 0x47	; 71
    37e6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    37ea:	18 16       	cp	r1, r24
    37ec:	4c f5       	brge	.+82     	; 0x3840 <MAIN_fourthRange+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	40 e2       	ldi	r20, 0x20	; 32
    37fc:	51 e4       	ldi	r21, 0x41	; 65
    37fe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
    3816:	0f c0       	rjmp	.+30     	; 0x3836 <MAIN_fourthRange+0xd2>
    3818:	89 e1       	ldi	r24, 0x19	; 25
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	9c 83       	std	Y+4, r25	; 0x04
    381e:	8b 83       	std	Y+3, r24	; 0x03
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	9c 81       	ldd	r25, Y+4	; 0x04
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	f1 f7       	brne	.-4      	; 0x3824 <MAIN_fourthRange+0xc0>
    3828:	9c 83       	std	Y+4, r25	; 0x04
    382a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382c:	8d 81       	ldd	r24, Y+5	; 0x05
    382e:	9e 81       	ldd	r25, Y+6	; 0x06
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	9e 83       	std	Y+6, r25	; 0x06
    3834:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3836:	8d 81       	ldd	r24, Y+5	; 0x05
    3838:	9e 81       	ldd	r25, Y+6	; 0x06
    383a:	00 97       	sbiw	r24, 0x00	; 0
    383c:	69 f7       	brne	.-38     	; 0x3818 <MAIN_fourthRange+0xb4>
    383e:	14 c0       	rjmp	.+40     	; 0x3868 <MAIN_fourthRange+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3840:	6f 81       	ldd	r22, Y+7	; 0x07
    3842:	78 85       	ldd	r23, Y+8	; 0x08
    3844:	89 85       	ldd	r24, Y+9	; 0x09
    3846:	9a 85       	ldd	r25, Y+10	; 0x0a
    3848:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	9e 83       	std	Y+6, r25	; 0x06
    3852:	8d 83       	std	Y+5, r24	; 0x05
    3854:	8d 81       	ldd	r24, Y+5	; 0x05
    3856:	9e 81       	ldd	r25, Y+6	; 0x06
    3858:	9a 83       	std	Y+2, r25	; 0x02
    385a:	89 83       	std	Y+1, r24	; 0x01
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	9a 81       	ldd	r25, Y+2	; 0x02
    3860:	01 97       	sbiw	r24, 0x01	; 1
    3862:	f1 f7       	brne	.-4      	; 0x3860 <MAIN_fourthRange+0xfc>
    3864:	9a 83       	std	Y+2, r25	; 0x02
    3866:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	LCD_clearScreen();
    3868:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
    386c:	5e c0       	rjmp	.+188    	; 0x392a <MAIN_fourthRange+0x1c6>
	while(KEYPAD_getPressedKey()!='#')
	{
	LCD_clearScreen();
    386e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
	adc_value=ADC_readChannel(0);
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    3878:	cc 01       	movw	r24, r24
    387a:	a0 e0       	ldi	r26, 0x00	; 0
    387c:	b0 e0       	ldi	r27, 0x00	; 0
    387e:	bc 01       	movw	r22, r24
    3880:	cd 01       	movw	r24, r26
    3882:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	80 93 2c 02 	sts	0x022C, r24
    388e:	90 93 2d 02 	sts	0x022D, r25
    3892:	a0 93 2e 02 	sts	0x022E, r26
    3896:	b0 93 2f 02 	sts	0x022F, r27
	voltage=(adc_value*(5.0/1023))*53.6;
    389a:	80 91 2c 02 	lds	r24, 0x022C
    389e:	90 91 2d 02 	lds	r25, 0x022D
    38a2:	a0 91 2e 02 	lds	r26, 0x022E
    38a6:	b0 91 2f 02 	lds	r27, 0x022F
    38aa:	bc 01       	movw	r22, r24
    38ac:	cd 01       	movw	r24, r26
    38ae:	2a e0       	ldi	r18, 0x0A	; 10
    38b0:	38 e2       	ldi	r19, 0x28	; 40
    38b2:	40 ea       	ldi	r20, 0xA0	; 160
    38b4:	5b e3       	ldi	r21, 0x3B	; 59
    38b6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	bc 01       	movw	r22, r24
    38c0:	cd 01       	movw	r24, r26
    38c2:	26 e6       	ldi	r18, 0x66	; 102
    38c4:	36 e6       	ldi	r19, 0x66	; 102
    38c6:	46 e5       	ldi	r20, 0x56	; 86
    38c8:	52 e4       	ldi	r21, 0x42	; 66
    38ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	80 93 28 02 	sts	0x0228, r24
    38d6:	90 93 29 02 	sts	0x0229, r25
    38da:	a0 93 2a 02 	sts	0x022A, r26
    38de:	b0 93 2b 02 	sts	0x022B, r27
			if(voltage>200)
    38e2:	80 91 28 02 	lds	r24, 0x0228
    38e6:	90 91 29 02 	lds	r25, 0x0229
    38ea:	a0 91 2a 02 	lds	r26, 0x022A
    38ee:	b0 91 2b 02 	lds	r27, 0x022B
    38f2:	bc 01       	movw	r22, r24
    38f4:	cd 01       	movw	r24, r26
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	48 e4       	ldi	r20, 0x48	; 72
    38fc:	53 e4       	ldi	r21, 0x43	; 67
    38fe:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3902:	18 16       	cp	r1, r24
    3904:	2c f4       	brge	.+10     	; 0x3910 <MAIN_fourthRange+0x1ac>
				LCD_displayString("OUT OF RANGE");
    3906:	8b e8       	ldi	r24, 0x8B	; 139
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    390e:	0d c0       	rjmp	.+26     	; 0x392a <MAIN_fourthRange+0x1c6>
			else
			{
				LCD_displayFloat(voltage,2);
    3910:	80 91 28 02 	lds	r24, 0x0228
    3914:	90 91 29 02 	lds	r25, 0x0229
    3918:	a0 91 2a 02 	lds	r26, 0x022A
    391c:	b0 91 2b 02 	lds	r27, 0x022B
    3920:	bc 01       	movw	r22, r24
    3922:	cd 01       	movw	r24, r26
    3924:	42 e0       	ldi	r20, 0x02	; 2
    3926:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
{
	LCD_clearScreen();
	LCD_displayString("FOURTH");
	_delay_ms(200);
	LCD_clearScreen();
	while(KEYPAD_getPressedKey()!='#')
    392a:	0e 94 3f 0b 	call	0x167e	; 0x167e <KEYPAD_getPressedKey>
    392e:	83 32       	cpi	r24, 0x23	; 35
    3930:	09 f0       	breq	.+2      	; 0x3934 <MAIN_fourthRange+0x1d0>
    3932:	9d cf       	rjmp	.-198    	; 0x386e <MAIN_fourthRange+0x10a>
			{
				LCD_displayFloat(voltage,2);

			}
}
	num=0;
    3934:	10 92 22 02 	sts	0x0222, r1
	MAIN_whichMode();
    3938:	0e 94 d6 17 	call	0x2fac	; 0x2fac <MAIN_whichMode>
}
    393c:	2e 96       	adiw	r28, 0x0e	; 14
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	de bf       	out	0x3e, r29	; 62
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	cf 91       	pop	r28
    394a:	df 91       	pop	r29
    394c:	08 95       	ret

0000394e <AmmeterMode>:



void AmmeterMode(){
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	df 93       	push	r29
    3954:	cf 93       	push	r28
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	cc 59       	subi	r28, 0x9C	; 156
    395c:	d1 40       	sbci	r29, 0x01	; 1
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	cd bf       	out	0x3d, r28	; 61

	//Reset keypad value
	num=0;
    3968:	10 92 22 02 	sts	0x0222, r1

	LCD_clearScreen();
    396c:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
	LCD_displayString("A: DC=1 AC=2");
    3970:	8c ea       	ldi	r24, 0xAC	; 172
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    3978:	04 c0       	rjmp	.+8      	; 0x3982 <AmmeterMode+0x34>
	while(num==0 || num==4)
	{
		num=KEYPAD_getPressedKey();
    397a:	0e 94 3f 0b 	call	0x167e	; 0x167e <KEYPAD_getPressedKey>
    397e:	80 93 22 02 	sts	0x0222, r24
	//Reset keypad value
	num=0;

	LCD_clearScreen();
	LCD_displayString("A: DC=1 AC=2");
	while(num==0 || num==4)
    3982:	80 91 22 02 	lds	r24, 0x0222
    3986:	88 23       	and	r24, r24
    3988:	c1 f3       	breq	.-16     	; 0x397a <AmmeterMode+0x2c>
    398a:	80 91 22 02 	lds	r24, 0x0222
    398e:	84 30       	cpi	r24, 0x04	; 4
    3990:	a1 f3       	breq	.-24     	; 0x397a <AmmeterMode+0x2c>
	{
		num=KEYPAD_getPressedKey();
	}

	if(num==1)
    3992:	80 91 22 02 	lds	r24, 0x0222
    3996:	81 30       	cpi	r24, 0x01	; 1
    3998:	11 f0       	breq	.+4      	; 0x399e <AmmeterMode+0x50>
    399a:	0c 94 30 29 	jmp	0x5260	; 0x5260 <AmmeterMode+0x1912>
	{
		LCD_clearScreen();
    399e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
			LCD_displayString("out&=");
    39a2:	89 eb       	ldi	r24, 0xB9	; 185
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
			LCD_displayFloat(num,2);
    39aa:	80 91 22 02 	lds	r24, 0x0222
    39ae:	88 2f       	mov	r24, r24
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	a0 e0       	ldi	r26, 0x00	; 0
    39b4:	b0 e0       	ldi	r27, 0x00	; 0
    39b6:	bc 01       	movw	r22, r24
    39b8:	cd 01       	movw	r24, r26
    39ba:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	bc 01       	movw	r22, r24
    39c4:	cd 01       	movw	r24, r26
    39c6:	42 e0       	ldi	r20, 0x02	; 2
    39c8:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    39cc:	fe 01       	movw	r30, r28
    39ce:	ed 56       	subi	r30, 0x6D	; 109
    39d0:	fe 4f       	sbci	r31, 0xFE	; 254
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	a6 e9       	ldi	r26, 0x96	; 150
    39d8:	b3 e4       	ldi	r27, 0x43	; 67
    39da:	80 83       	st	Z, r24
    39dc:	91 83       	std	Z+1, r25	; 0x01
    39de:	a2 83       	std	Z+2, r26	; 0x02
    39e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e2:	8e 01       	movw	r16, r28
    39e4:	01 57       	subi	r16, 0x71	; 113
    39e6:	1e 4f       	sbci	r17, 0xFE	; 254
    39e8:	fe 01       	movw	r30, r28
    39ea:	ed 56       	subi	r30, 0x6D	; 109
    39ec:	fe 4f       	sbci	r31, 0xFE	; 254
    39ee:	60 81       	ld	r22, Z
    39f0:	71 81       	ldd	r23, Z+1	; 0x01
    39f2:	82 81       	ldd	r24, Z+2	; 0x02
    39f4:	93 81       	ldd	r25, Z+3	; 0x03
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	4a e7       	ldi	r20, 0x7A	; 122
    39fc:	53 e4       	ldi	r21, 0x43	; 67
    39fe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	f8 01       	movw	r30, r16
    3a08:	80 83       	st	Z, r24
    3a0a:	91 83       	std	Z+1, r25	; 0x01
    3a0c:	a2 83       	std	Z+2, r26	; 0x02
    3a0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a10:	fe 01       	movw	r30, r28
    3a12:	e1 57       	subi	r30, 0x71	; 113
    3a14:	fe 4f       	sbci	r31, 0xFE	; 254
    3a16:	60 81       	ld	r22, Z
    3a18:	71 81       	ldd	r23, Z+1	; 0x01
    3a1a:	82 81       	ldd	r24, Z+2	; 0x02
    3a1c:	93 81       	ldd	r25, Z+3	; 0x03
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	40 e8       	ldi	r20, 0x80	; 128
    3a24:	5f e3       	ldi	r21, 0x3F	; 63
    3a26:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3a2a:	88 23       	and	r24, r24
    3a2c:	44 f4       	brge	.+16     	; 0x3a3e <AmmeterMode+0xf0>
		__ticks = 1;
    3a2e:	fe 01       	movw	r30, r28
    3a30:	e3 57       	subi	r30, 0x73	; 115
    3a32:	fe 4f       	sbci	r31, 0xFE	; 254
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	91 83       	std	Z+1, r25	; 0x01
    3a3a:	80 83       	st	Z, r24
    3a3c:	64 c0       	rjmp	.+200    	; 0x3b06 <AmmeterMode+0x1b8>
	else if (__tmp > 65535)
    3a3e:	fe 01       	movw	r30, r28
    3a40:	e1 57       	subi	r30, 0x71	; 113
    3a42:	fe 4f       	sbci	r31, 0xFE	; 254
    3a44:	60 81       	ld	r22, Z
    3a46:	71 81       	ldd	r23, Z+1	; 0x01
    3a48:	82 81       	ldd	r24, Z+2	; 0x02
    3a4a:	93 81       	ldd	r25, Z+3	; 0x03
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	3f ef       	ldi	r19, 0xFF	; 255
    3a50:	4f e7       	ldi	r20, 0x7F	; 127
    3a52:	57 e4       	ldi	r21, 0x47	; 71
    3a54:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3a58:	18 16       	cp	r1, r24
    3a5a:	0c f0       	brlt	.+2      	; 0x3a5e <AmmeterMode+0x110>
    3a5c:	43 c0       	rjmp	.+134    	; 0x3ae4 <AmmeterMode+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5e:	fe 01       	movw	r30, r28
    3a60:	ed 56       	subi	r30, 0x6D	; 109
    3a62:	fe 4f       	sbci	r31, 0xFE	; 254
    3a64:	60 81       	ld	r22, Z
    3a66:	71 81       	ldd	r23, Z+1	; 0x01
    3a68:	82 81       	ldd	r24, Z+2	; 0x02
    3a6a:	93 81       	ldd	r25, Z+3	; 0x03
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	40 e2       	ldi	r20, 0x20	; 32
    3a72:	51 e4       	ldi	r21, 0x41	; 65
    3a74:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3a78:	dc 01       	movw	r26, r24
    3a7a:	cb 01       	movw	r24, r22
    3a7c:	8e 01       	movw	r16, r28
    3a7e:	03 57       	subi	r16, 0x73	; 115
    3a80:	1e 4f       	sbci	r17, 0xFE	; 254
    3a82:	bc 01       	movw	r22, r24
    3a84:	cd 01       	movw	r24, r26
    3a86:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	f8 01       	movw	r30, r16
    3a90:	91 83       	std	Z+1, r25	; 0x01
    3a92:	80 83       	st	Z, r24
    3a94:	1f c0       	rjmp	.+62     	; 0x3ad4 <AmmeterMode+0x186>
    3a96:	fe 01       	movw	r30, r28
    3a98:	e5 57       	subi	r30, 0x75	; 117
    3a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a9c:	89 e1       	ldi	r24, 0x19	; 25
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	91 83       	std	Z+1, r25	; 0x01
    3aa2:	80 83       	st	Z, r24
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	e5 57       	subi	r30, 0x75	; 117
    3aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aaa:	80 81       	ld	r24, Z
    3aac:	91 81       	ldd	r25, Z+1	; 0x01
    3aae:	01 97       	sbiw	r24, 0x01	; 1
    3ab0:	f1 f7       	brne	.-4      	; 0x3aae <AmmeterMode+0x160>
    3ab2:	fe 01       	movw	r30, r28
    3ab4:	e5 57       	subi	r30, 0x75	; 117
    3ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ab8:	91 83       	std	Z+1, r25	; 0x01
    3aba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3abc:	de 01       	movw	r26, r28
    3abe:	a3 57       	subi	r26, 0x73	; 115
    3ac0:	be 4f       	sbci	r27, 0xFE	; 254
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e3 57       	subi	r30, 0x73	; 115
    3ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac8:	80 81       	ld	r24, Z
    3aca:	91 81       	ldd	r25, Z+1	; 0x01
    3acc:	01 97       	sbiw	r24, 0x01	; 1
    3ace:	11 96       	adiw	r26, 0x01	; 1
    3ad0:	9c 93       	st	X, r25
    3ad2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	e3 57       	subi	r30, 0x73	; 115
    3ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    3ada:	80 81       	ld	r24, Z
    3adc:	91 81       	ldd	r25, Z+1	; 0x01
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	d1 f6       	brne	.-76     	; 0x3a96 <AmmeterMode+0x148>
    3ae2:	27 c0       	rjmp	.+78     	; 0x3b32 <AmmeterMode+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae4:	8e 01       	movw	r16, r28
    3ae6:	03 57       	subi	r16, 0x73	; 115
    3ae8:	1e 4f       	sbci	r17, 0xFE	; 254
    3aea:	fe 01       	movw	r30, r28
    3aec:	e1 57       	subi	r30, 0x71	; 113
    3aee:	fe 4f       	sbci	r31, 0xFE	; 254
    3af0:	60 81       	ld	r22, Z
    3af2:	71 81       	ldd	r23, Z+1	; 0x01
    3af4:	82 81       	ldd	r24, Z+2	; 0x02
    3af6:	93 81       	ldd	r25, Z+3	; 0x03
    3af8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	f8 01       	movw	r30, r16
    3b02:	91 83       	std	Z+1, r25	; 0x01
    3b04:	80 83       	st	Z, r24
    3b06:	de 01       	movw	r26, r28
    3b08:	a7 57       	subi	r26, 0x77	; 119
    3b0a:	be 4f       	sbci	r27, 0xFE	; 254
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e3 57       	subi	r30, 0x73	; 115
    3b10:	fe 4f       	sbci	r31, 0xFE	; 254
    3b12:	80 81       	ld	r24, Z
    3b14:	91 81       	ldd	r25, Z+1	; 0x01
    3b16:	8d 93       	st	X+, r24
    3b18:	9c 93       	st	X, r25
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	e7 57       	subi	r30, 0x77	; 119
    3b1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b20:	80 81       	ld	r24, Z
    3b22:	91 81       	ldd	r25, Z+1	; 0x01
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	f1 f7       	brne	.-4      	; 0x3b24 <AmmeterMode+0x1d6>
    3b28:	fe 01       	movw	r30, r28
    3b2a:	e7 57       	subi	r30, 0x77	; 119
    3b2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b2e:	91 83       	std	Z+1, r25	; 0x01
    3b30:	80 83       	st	Z, r24
			_delay_ms(300);

			LCD_clearScreen();
    3b32:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
		    LCD_displayString("Auto range 3");
    3b36:	8f eb       	ldi	r24, 0xBF	; 191
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    3b3e:	fe 01       	movw	r30, r28
    3b40:	eb 57       	subi	r30, 0x7B	; 123
    3b42:	fe 4f       	sbci	r31, 0xFE	; 254
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	a8 e4       	ldi	r26, 0x48	; 72
    3b4a:	b3 e4       	ldi	r27, 0x43	; 67
    3b4c:	80 83       	st	Z, r24
    3b4e:	91 83       	std	Z+1, r25	; 0x01
    3b50:	a2 83       	std	Z+2, r26	; 0x02
    3b52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b54:	8e 01       	movw	r16, r28
    3b56:	0f 57       	subi	r16, 0x7F	; 127
    3b58:	1e 4f       	sbci	r17, 0xFE	; 254
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	eb 57       	subi	r30, 0x7B	; 123
    3b5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b60:	60 81       	ld	r22, Z
    3b62:	71 81       	ldd	r23, Z+1	; 0x01
    3b64:	82 81       	ldd	r24, Z+2	; 0x02
    3b66:	93 81       	ldd	r25, Z+3	; 0x03
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	4a e7       	ldi	r20, 0x7A	; 122
    3b6e:	53 e4       	ldi	r21, 0x43	; 67
    3b70:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	f8 01       	movw	r30, r16
    3b7a:	80 83       	st	Z, r24
    3b7c:	91 83       	std	Z+1, r25	; 0x01
    3b7e:	a2 83       	std	Z+2, r26	; 0x02
    3b80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b82:	fe 01       	movw	r30, r28
    3b84:	ef 57       	subi	r30, 0x7F	; 127
    3b86:	fe 4f       	sbci	r31, 0xFE	; 254
    3b88:	60 81       	ld	r22, Z
    3b8a:	71 81       	ldd	r23, Z+1	; 0x01
    3b8c:	82 81       	ldd	r24, Z+2	; 0x02
    3b8e:	93 81       	ldd	r25, Z+3	; 0x03
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e8       	ldi	r20, 0x80	; 128
    3b96:	5f e3       	ldi	r21, 0x3F	; 63
    3b98:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3b9c:	88 23       	and	r24, r24
    3b9e:	44 f4       	brge	.+16     	; 0x3bb0 <AmmeterMode+0x262>
		__ticks = 1;
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	e1 58       	subi	r30, 0x81	; 129
    3ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	80 83       	st	Z, r24
    3bae:	64 c0       	rjmp	.+200    	; 0x3c78 <AmmeterMode+0x32a>
	else if (__tmp > 65535)
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	ef 57       	subi	r30, 0x7F	; 127
    3bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb6:	60 81       	ld	r22, Z
    3bb8:	71 81       	ldd	r23, Z+1	; 0x01
    3bba:	82 81       	ldd	r24, Z+2	; 0x02
    3bbc:	93 81       	ldd	r25, Z+3	; 0x03
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	3f ef       	ldi	r19, 0xFF	; 255
    3bc2:	4f e7       	ldi	r20, 0x7F	; 127
    3bc4:	57 e4       	ldi	r21, 0x47	; 71
    3bc6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3bca:	18 16       	cp	r1, r24
    3bcc:	0c f0       	brlt	.+2      	; 0x3bd0 <AmmeterMode+0x282>
    3bce:	43 c0       	rjmp	.+134    	; 0x3c56 <AmmeterMode+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd0:	fe 01       	movw	r30, r28
    3bd2:	eb 57       	subi	r30, 0x7B	; 123
    3bd4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd6:	60 81       	ld	r22, Z
    3bd8:	71 81       	ldd	r23, Z+1	; 0x01
    3bda:	82 81       	ldd	r24, Z+2	; 0x02
    3bdc:	93 81       	ldd	r25, Z+3	; 0x03
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	40 e2       	ldi	r20, 0x20	; 32
    3be4:	51 e4       	ldi	r21, 0x41	; 65
    3be6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	8e 01       	movw	r16, r28
    3bf0:	01 58       	subi	r16, 0x81	; 129
    3bf2:	1e 4f       	sbci	r17, 0xFE	; 254
    3bf4:	bc 01       	movw	r22, r24
    3bf6:	cd 01       	movw	r24, r26
    3bf8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	f8 01       	movw	r30, r16
    3c02:	91 83       	std	Z+1, r25	; 0x01
    3c04:	80 83       	st	Z, r24
    3c06:	1f c0       	rjmp	.+62     	; 0x3c46 <AmmeterMode+0x2f8>
    3c08:	fe 01       	movw	r30, r28
    3c0a:	e3 58       	subi	r30, 0x83	; 131
    3c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0e:	89 e1       	ldi	r24, 0x19	; 25
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	91 83       	std	Z+1, r25	; 0x01
    3c14:	80 83       	st	Z, r24
    3c16:	fe 01       	movw	r30, r28
    3c18:	e3 58       	subi	r30, 0x83	; 131
    3c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c1c:	80 81       	ld	r24, Z
    3c1e:	91 81       	ldd	r25, Z+1	; 0x01
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	f1 f7       	brne	.-4      	; 0x3c20 <AmmeterMode+0x2d2>
    3c24:	fe 01       	movw	r30, r28
    3c26:	e3 58       	subi	r30, 0x83	; 131
    3c28:	fe 4f       	sbci	r31, 0xFE	; 254
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2e:	de 01       	movw	r26, r28
    3c30:	a1 58       	subi	r26, 0x81	; 129
    3c32:	be 4f       	sbci	r27, 0xFE	; 254
    3c34:	fe 01       	movw	r30, r28
    3c36:	e1 58       	subi	r30, 0x81	; 129
    3c38:	fe 4f       	sbci	r31, 0xFE	; 254
    3c3a:	80 81       	ld	r24, Z
    3c3c:	91 81       	ldd	r25, Z+1	; 0x01
    3c3e:	01 97       	sbiw	r24, 0x01	; 1
    3c40:	11 96       	adiw	r26, 0x01	; 1
    3c42:	9c 93       	st	X, r25
    3c44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c46:	fe 01       	movw	r30, r28
    3c48:	e1 58       	subi	r30, 0x81	; 129
    3c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c4c:	80 81       	ld	r24, Z
    3c4e:	91 81       	ldd	r25, Z+1	; 0x01
    3c50:	00 97       	sbiw	r24, 0x00	; 0
    3c52:	d1 f6       	brne	.-76     	; 0x3c08 <AmmeterMode+0x2ba>
    3c54:	27 c0       	rjmp	.+78     	; 0x3ca4 <AmmeterMode+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c56:	8e 01       	movw	r16, r28
    3c58:	01 58       	subi	r16, 0x81	; 129
    3c5a:	1e 4f       	sbci	r17, 0xFE	; 254
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	ef 57       	subi	r30, 0x7F	; 127
    3c60:	fe 4f       	sbci	r31, 0xFE	; 254
    3c62:	60 81       	ld	r22, Z
    3c64:	71 81       	ldd	r23, Z+1	; 0x01
    3c66:	82 81       	ldd	r24, Z+2	; 0x02
    3c68:	93 81       	ldd	r25, Z+3	; 0x03
    3c6a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	f8 01       	movw	r30, r16
    3c74:	91 83       	std	Z+1, r25	; 0x01
    3c76:	80 83       	st	Z, r24
    3c78:	de 01       	movw	r26, r28
    3c7a:	a5 58       	subi	r26, 0x85	; 133
    3c7c:	be 4f       	sbci	r27, 0xFE	; 254
    3c7e:	fe 01       	movw	r30, r28
    3c80:	e1 58       	subi	r30, 0x81	; 129
    3c82:	fe 4f       	sbci	r31, 0xFE	; 254
    3c84:	80 81       	ld	r24, Z
    3c86:	91 81       	ldd	r25, Z+1	; 0x01
    3c88:	8d 93       	st	X+, r24
    3c8a:	9c 93       	st	X, r25
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	e5 58       	subi	r30, 0x85	; 133
    3c90:	fe 4f       	sbci	r31, 0xFE	; 254
    3c92:	80 81       	ld	r24, Z
    3c94:	91 81       	ldd	r25, Z+1	; 0x01
    3c96:	01 97       	sbiw	r24, 0x01	; 1
    3c98:	f1 f7       	brne	.-4      	; 0x3c96 <AmmeterMode+0x348>
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	e5 58       	subi	r30, 0x85	; 133
    3c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	80 83       	st	Z, r24
			_delay_ms(200);

			GPIO_writePin(PORTA_ID, PIN5_ID, 0);
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	65 e0       	ldi	r22, 0x05	; 5
    3ca8:	40 e0       	ldi	r20, 0x00	; 0
    3caa:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
			GPIO_writePin(PORTB_ID, PIN5_ID, 0);
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	65 e0       	ldi	r22, 0x05	; 5
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
			GPIO_writePin(PORTB_ID, PIN6_ID, 1);
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	66 e0       	ldi	r22, 0x06	; 6
    3cbc:	41 e0       	ldi	r20, 0x01	; 1
    3cbe:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    3cc2:	fe 01       	movw	r30, r28
    3cc4:	e9 58       	subi	r30, 0x89	; 137
    3cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	a8 ec       	ldi	r26, 0xC8	; 200
    3cce:	b2 e4       	ldi	r27, 0x42	; 66
    3cd0:	80 83       	st	Z, r24
    3cd2:	91 83       	std	Z+1, r25	; 0x01
    3cd4:	a2 83       	std	Z+2, r26	; 0x02
    3cd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cd8:	8e 01       	movw	r16, r28
    3cda:	0d 58       	subi	r16, 0x8D	; 141
    3cdc:	1e 4f       	sbci	r17, 0xFE	; 254
    3cde:	fe 01       	movw	r30, r28
    3ce0:	e9 58       	subi	r30, 0x89	; 137
    3ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ce4:	60 81       	ld	r22, Z
    3ce6:	71 81       	ldd	r23, Z+1	; 0x01
    3ce8:	82 81       	ldd	r24, Z+2	; 0x02
    3cea:	93 81       	ldd	r25, Z+3	; 0x03
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	4a e7       	ldi	r20, 0x7A	; 122
    3cf2:	53 e4       	ldi	r21, 0x43	; 67
    3cf4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	f8 01       	movw	r30, r16
    3cfe:	80 83       	st	Z, r24
    3d00:	91 83       	std	Z+1, r25	; 0x01
    3d02:	a2 83       	std	Z+2, r26	; 0x02
    3d04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d06:	fe 01       	movw	r30, r28
    3d08:	ed 58       	subi	r30, 0x8D	; 141
    3d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d0c:	60 81       	ld	r22, Z
    3d0e:	71 81       	ldd	r23, Z+1	; 0x01
    3d10:	82 81       	ldd	r24, Z+2	; 0x02
    3d12:	93 81       	ldd	r25, Z+3	; 0x03
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	40 e8       	ldi	r20, 0x80	; 128
    3d1a:	5f e3       	ldi	r21, 0x3F	; 63
    3d1c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3d20:	88 23       	and	r24, r24
    3d22:	44 f4       	brge	.+16     	; 0x3d34 <AmmeterMode+0x3e6>
		__ticks = 1;
    3d24:	fe 01       	movw	r30, r28
    3d26:	ef 58       	subi	r30, 0x8F	; 143
    3d28:	fe 4f       	sbci	r31, 0xFE	; 254
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	91 83       	std	Z+1, r25	; 0x01
    3d30:	80 83       	st	Z, r24
    3d32:	64 c0       	rjmp	.+200    	; 0x3dfc <AmmeterMode+0x4ae>
	else if (__tmp > 65535)
    3d34:	fe 01       	movw	r30, r28
    3d36:	ed 58       	subi	r30, 0x8D	; 141
    3d38:	fe 4f       	sbci	r31, 0xFE	; 254
    3d3a:	60 81       	ld	r22, Z
    3d3c:	71 81       	ldd	r23, Z+1	; 0x01
    3d3e:	82 81       	ldd	r24, Z+2	; 0x02
    3d40:	93 81       	ldd	r25, Z+3	; 0x03
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	3f ef       	ldi	r19, 0xFF	; 255
    3d46:	4f e7       	ldi	r20, 0x7F	; 127
    3d48:	57 e4       	ldi	r21, 0x47	; 71
    3d4a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3d4e:	18 16       	cp	r1, r24
    3d50:	0c f0       	brlt	.+2      	; 0x3d54 <AmmeterMode+0x406>
    3d52:	43 c0       	rjmp	.+134    	; 0x3dda <AmmeterMode+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d54:	fe 01       	movw	r30, r28
    3d56:	e9 58       	subi	r30, 0x89	; 137
    3d58:	fe 4f       	sbci	r31, 0xFE	; 254
    3d5a:	60 81       	ld	r22, Z
    3d5c:	71 81       	ldd	r23, Z+1	; 0x01
    3d5e:	82 81       	ldd	r24, Z+2	; 0x02
    3d60:	93 81       	ldd	r25, Z+3	; 0x03
    3d62:	20 e0       	ldi	r18, 0x00	; 0
    3d64:	30 e0       	ldi	r19, 0x00	; 0
    3d66:	40 e2       	ldi	r20, 0x20	; 32
    3d68:	51 e4       	ldi	r21, 0x41	; 65
    3d6a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3d6e:	dc 01       	movw	r26, r24
    3d70:	cb 01       	movw	r24, r22
    3d72:	8e 01       	movw	r16, r28
    3d74:	0f 58       	subi	r16, 0x8F	; 143
    3d76:	1e 4f       	sbci	r17, 0xFE	; 254
    3d78:	bc 01       	movw	r22, r24
    3d7a:	cd 01       	movw	r24, r26
    3d7c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	f8 01       	movw	r30, r16
    3d86:	91 83       	std	Z+1, r25	; 0x01
    3d88:	80 83       	st	Z, r24
    3d8a:	1f c0       	rjmp	.+62     	; 0x3dca <AmmeterMode+0x47c>
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	e1 59       	subi	r30, 0x91	; 145
    3d90:	fe 4f       	sbci	r31, 0xFE	; 254
    3d92:	89 e1       	ldi	r24, 0x19	; 25
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	91 83       	std	Z+1, r25	; 0x01
    3d98:	80 83       	st	Z, r24
    3d9a:	fe 01       	movw	r30, r28
    3d9c:	e1 59       	subi	r30, 0x91	; 145
    3d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3da0:	80 81       	ld	r24, Z
    3da2:	91 81       	ldd	r25, Z+1	; 0x01
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	f1 f7       	brne	.-4      	; 0x3da4 <AmmeterMode+0x456>
    3da8:	fe 01       	movw	r30, r28
    3daa:	e1 59       	subi	r30, 0x91	; 145
    3dac:	fe 4f       	sbci	r31, 0xFE	; 254
    3dae:	91 83       	std	Z+1, r25	; 0x01
    3db0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db2:	de 01       	movw	r26, r28
    3db4:	af 58       	subi	r26, 0x8F	; 143
    3db6:	be 4f       	sbci	r27, 0xFE	; 254
    3db8:	fe 01       	movw	r30, r28
    3dba:	ef 58       	subi	r30, 0x8F	; 143
    3dbc:	fe 4f       	sbci	r31, 0xFE	; 254
    3dbe:	80 81       	ld	r24, Z
    3dc0:	91 81       	ldd	r25, Z+1	; 0x01
    3dc2:	01 97       	sbiw	r24, 0x01	; 1
    3dc4:	11 96       	adiw	r26, 0x01	; 1
    3dc6:	9c 93       	st	X, r25
    3dc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dca:	fe 01       	movw	r30, r28
    3dcc:	ef 58       	subi	r30, 0x8F	; 143
    3dce:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd0:	80 81       	ld	r24, Z
    3dd2:	91 81       	ldd	r25, Z+1	; 0x01
    3dd4:	00 97       	sbiw	r24, 0x00	; 0
    3dd6:	d1 f6       	brne	.-76     	; 0x3d8c <AmmeterMode+0x43e>
    3dd8:	27 c0       	rjmp	.+78     	; 0x3e28 <AmmeterMode+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dda:	8e 01       	movw	r16, r28
    3ddc:	0f 58       	subi	r16, 0x8F	; 143
    3dde:	1e 4f       	sbci	r17, 0xFE	; 254
    3de0:	fe 01       	movw	r30, r28
    3de2:	ed 58       	subi	r30, 0x8D	; 141
    3de4:	fe 4f       	sbci	r31, 0xFE	; 254
    3de6:	60 81       	ld	r22, Z
    3de8:	71 81       	ldd	r23, Z+1	; 0x01
    3dea:	82 81       	ldd	r24, Z+2	; 0x02
    3dec:	93 81       	ldd	r25, Z+3	; 0x03
    3dee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	f8 01       	movw	r30, r16
    3df8:	91 83       	std	Z+1, r25	; 0x01
    3dfa:	80 83       	st	Z, r24
    3dfc:	de 01       	movw	r26, r28
    3dfe:	a3 59       	subi	r26, 0x93	; 147
    3e00:	be 4f       	sbci	r27, 0xFE	; 254
    3e02:	fe 01       	movw	r30, r28
    3e04:	ef 58       	subi	r30, 0x8F	; 143
    3e06:	fe 4f       	sbci	r31, 0xFE	; 254
    3e08:	80 81       	ld	r24, Z
    3e0a:	91 81       	ldd	r25, Z+1	; 0x01
    3e0c:	8d 93       	st	X+, r24
    3e0e:	9c 93       	st	X, r25
    3e10:	fe 01       	movw	r30, r28
    3e12:	e3 59       	subi	r30, 0x93	; 147
    3e14:	fe 4f       	sbci	r31, 0xFE	; 254
    3e16:	80 81       	ld	r24, Z
    3e18:	91 81       	ldd	r25, Z+1	; 0x01
    3e1a:	01 97       	sbiw	r24, 0x01	; 1
    3e1c:	f1 f7       	brne	.-4      	; 0x3e1a <AmmeterMode+0x4cc>
    3e1e:	fe 01       	movw	r30, r28
    3e20:	e3 59       	subi	r30, 0x93	; 147
    3e22:	fe 4f       	sbci	r31, 0xFE	; 254
    3e24:	91 83       	std	Z+1, r25	; 0x01
    3e26:	80 83       	st	Z, r24
			_delay_ms(100);

			adc1=ADC_readChannel(1);
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    3e2e:	cc 01       	movw	r24, r24
    3e30:	a0 e0       	ldi	r26, 0x00	; 0
    3e32:	b0 e0       	ldi	r27, 0x00	; 0
    3e34:	bc 01       	movw	r22, r24
    3e36:	cd 01       	movw	r24, r26
    3e38:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	80 93 30 02 	sts	0x0230, r24
    3e44:	90 93 31 02 	sts	0x0231, r25
    3e48:	a0 93 32 02 	sts	0x0232, r26
    3e4c:	b0 93 33 02 	sts	0x0233, r27
			LCD_clearScreen();
    3e50:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
			LCD_displayString("ADC=");
    3e54:	8c ec       	ldi	r24, 0xCC	; 204
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
			LCD_displayFloat(adc1,2);
    3e5c:	80 91 30 02 	lds	r24, 0x0230
    3e60:	90 91 31 02 	lds	r25, 0x0231
    3e64:	a0 91 32 02 	lds	r26, 0x0232
    3e68:	b0 91 33 02 	lds	r27, 0x0233
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	cd 01       	movw	r24, r26
    3e70:	42 e0       	ldi	r20, 0x02	; 2
    3e72:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    3e76:	fe 01       	movw	r30, r28
    3e78:	e7 59       	subi	r30, 0x97	; 151
    3e7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	aa e7       	ldi	r26, 0x7A	; 122
    3e82:	b4 e4       	ldi	r27, 0x44	; 68
    3e84:	80 83       	st	Z, r24
    3e86:	91 83       	std	Z+1, r25	; 0x01
    3e88:	a2 83       	std	Z+2, r26	; 0x02
    3e8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8c:	8e 01       	movw	r16, r28
    3e8e:	0b 59       	subi	r16, 0x9B	; 155
    3e90:	1e 4f       	sbci	r17, 0xFE	; 254
    3e92:	fe 01       	movw	r30, r28
    3e94:	e7 59       	subi	r30, 0x97	; 151
    3e96:	fe 4f       	sbci	r31, 0xFE	; 254
    3e98:	60 81       	ld	r22, Z
    3e9a:	71 81       	ldd	r23, Z+1	; 0x01
    3e9c:	82 81       	ldd	r24, Z+2	; 0x02
    3e9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	4a e7       	ldi	r20, 0x7A	; 122
    3ea6:	53 e4       	ldi	r21, 0x43	; 67
    3ea8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	f8 01       	movw	r30, r16
    3eb2:	80 83       	st	Z, r24
    3eb4:	91 83       	std	Z+1, r25	; 0x01
    3eb6:	a2 83       	std	Z+2, r26	; 0x02
    3eb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3eba:	fe 01       	movw	r30, r28
    3ebc:	eb 59       	subi	r30, 0x9B	; 155
    3ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec0:	60 81       	ld	r22, Z
    3ec2:	71 81       	ldd	r23, Z+1	; 0x01
    3ec4:	82 81       	ldd	r24, Z+2	; 0x02
    3ec6:	93 81       	ldd	r25, Z+3	; 0x03
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	40 e8       	ldi	r20, 0x80	; 128
    3ece:	5f e3       	ldi	r21, 0x3F	; 63
    3ed0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3ed4:	88 23       	and	r24, r24
    3ed6:	44 f4       	brge	.+16     	; 0x3ee8 <AmmeterMode+0x59a>
		__ticks = 1;
    3ed8:	fe 01       	movw	r30, r28
    3eda:	ed 59       	subi	r30, 0x9D	; 157
    3edc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	91 83       	std	Z+1, r25	; 0x01
    3ee4:	80 83       	st	Z, r24
    3ee6:	64 c0       	rjmp	.+200    	; 0x3fb0 <AmmeterMode+0x662>
	else if (__tmp > 65535)
    3ee8:	fe 01       	movw	r30, r28
    3eea:	eb 59       	subi	r30, 0x9B	; 155
    3eec:	fe 4f       	sbci	r31, 0xFE	; 254
    3eee:	60 81       	ld	r22, Z
    3ef0:	71 81       	ldd	r23, Z+1	; 0x01
    3ef2:	82 81       	ldd	r24, Z+2	; 0x02
    3ef4:	93 81       	ldd	r25, Z+3	; 0x03
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	3f ef       	ldi	r19, 0xFF	; 255
    3efa:	4f e7       	ldi	r20, 0x7F	; 127
    3efc:	57 e4       	ldi	r21, 0x47	; 71
    3efe:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3f02:	18 16       	cp	r1, r24
    3f04:	0c f0       	brlt	.+2      	; 0x3f08 <AmmeterMode+0x5ba>
    3f06:	43 c0       	rjmp	.+134    	; 0x3f8e <AmmeterMode+0x640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e7 59       	subi	r30, 0x97	; 151
    3f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f0e:	60 81       	ld	r22, Z
    3f10:	71 81       	ldd	r23, Z+1	; 0x01
    3f12:	82 81       	ldd	r24, Z+2	; 0x02
    3f14:	93 81       	ldd	r25, Z+3	; 0x03
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e2       	ldi	r20, 0x20	; 32
    3f1c:	51 e4       	ldi	r21, 0x41	; 65
    3f1e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	8e 01       	movw	r16, r28
    3f28:	0d 59       	subi	r16, 0x9D	; 157
    3f2a:	1e 4f       	sbci	r17, 0xFE	; 254
    3f2c:	bc 01       	movw	r22, r24
    3f2e:	cd 01       	movw	r24, r26
    3f30:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3f34:	dc 01       	movw	r26, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	f8 01       	movw	r30, r16
    3f3a:	91 83       	std	Z+1, r25	; 0x01
    3f3c:	80 83       	st	Z, r24
    3f3e:	1f c0       	rjmp	.+62     	; 0x3f7e <AmmeterMode+0x630>
    3f40:	fe 01       	movw	r30, r28
    3f42:	ef 59       	subi	r30, 0x9F	; 159
    3f44:	fe 4f       	sbci	r31, 0xFE	; 254
    3f46:	89 e1       	ldi	r24, 0x19	; 25
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	80 83       	st	Z, r24
    3f4e:	fe 01       	movw	r30, r28
    3f50:	ef 59       	subi	r30, 0x9F	; 159
    3f52:	fe 4f       	sbci	r31, 0xFE	; 254
    3f54:	80 81       	ld	r24, Z
    3f56:	91 81       	ldd	r25, Z+1	; 0x01
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	f1 f7       	brne	.-4      	; 0x3f58 <AmmeterMode+0x60a>
    3f5c:	fe 01       	movw	r30, r28
    3f5e:	ef 59       	subi	r30, 0x9F	; 159
    3f60:	fe 4f       	sbci	r31, 0xFE	; 254
    3f62:	91 83       	std	Z+1, r25	; 0x01
    3f64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f66:	de 01       	movw	r26, r28
    3f68:	ad 59       	subi	r26, 0x9D	; 157
    3f6a:	be 4f       	sbci	r27, 0xFE	; 254
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	ed 59       	subi	r30, 0x9D	; 157
    3f70:	fe 4f       	sbci	r31, 0xFE	; 254
    3f72:	80 81       	ld	r24, Z
    3f74:	91 81       	ldd	r25, Z+1	; 0x01
    3f76:	01 97       	sbiw	r24, 0x01	; 1
    3f78:	11 96       	adiw	r26, 0x01	; 1
    3f7a:	9c 93       	st	X, r25
    3f7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f7e:	fe 01       	movw	r30, r28
    3f80:	ed 59       	subi	r30, 0x9D	; 157
    3f82:	fe 4f       	sbci	r31, 0xFE	; 254
    3f84:	80 81       	ld	r24, Z
    3f86:	91 81       	ldd	r25, Z+1	; 0x01
    3f88:	00 97       	sbiw	r24, 0x00	; 0
    3f8a:	d1 f6       	brne	.-76     	; 0x3f40 <AmmeterMode+0x5f2>
    3f8c:	27 c0       	rjmp	.+78     	; 0x3fdc <AmmeterMode+0x68e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f8e:	8e 01       	movw	r16, r28
    3f90:	0d 59       	subi	r16, 0x9D	; 157
    3f92:	1e 4f       	sbci	r17, 0xFE	; 254
    3f94:	fe 01       	movw	r30, r28
    3f96:	eb 59       	subi	r30, 0x9B	; 155
    3f98:	fe 4f       	sbci	r31, 0xFE	; 254
    3f9a:	60 81       	ld	r22, Z
    3f9c:	71 81       	ldd	r23, Z+1	; 0x01
    3f9e:	82 81       	ldd	r24, Z+2	; 0x02
    3fa0:	93 81       	ldd	r25, Z+3	; 0x03
    3fa2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3fa6:	dc 01       	movw	r26, r24
    3fa8:	cb 01       	movw	r24, r22
    3faa:	f8 01       	movw	r30, r16
    3fac:	91 83       	std	Z+1, r25	; 0x01
    3fae:	80 83       	st	Z, r24
    3fb0:	de 01       	movw	r26, r28
    3fb2:	a1 5a       	subi	r26, 0xA1	; 161
    3fb4:	be 4f       	sbci	r27, 0xFE	; 254
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	ed 59       	subi	r30, 0x9D	; 157
    3fba:	fe 4f       	sbci	r31, 0xFE	; 254
    3fbc:	80 81       	ld	r24, Z
    3fbe:	91 81       	ldd	r25, Z+1	; 0x01
    3fc0:	8d 93       	st	X+, r24
    3fc2:	9c 93       	st	X, r25
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	e1 5a       	subi	r30, 0xA1	; 161
    3fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fca:	80 81       	ld	r24, Z
    3fcc:	91 81       	ldd	r25, Z+1	; 0x01
    3fce:	01 97       	sbiw	r24, 0x01	; 1
    3fd0:	f1 f7       	brne	.-4      	; 0x3fce <AmmeterMode+0x680>
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	e1 5a       	subi	r30, 0xA1	; 161
    3fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	80 83       	st	Z, r24
			_delay_ms(1000);

			if(adc1>=90){
    3fdc:	80 91 30 02 	lds	r24, 0x0230
    3fe0:	90 91 31 02 	lds	r25, 0x0231
    3fe4:	a0 91 32 02 	lds	r26, 0x0232
    3fe8:	b0 91 33 02 	lds	r27, 0x0233
    3fec:	bc 01       	movw	r22, r24
    3fee:	cd 01       	movw	r24, r26
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	44 eb       	ldi	r20, 0xB4	; 180
    3ff6:	52 e4       	ldi	r21, 0x42	; 66
    3ff8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
    3ffc:	88 23       	and	r24, r24
    3ffe:	0c f4       	brge	.+2      	; 0x4002 <AmmeterMode+0x6b4>
    4000:	b9 c1       	rjmp	.+882    	; 0x4374 <AmmeterMode+0xa26>
				LCD_clearScreen();
    4002:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
				LCD_displayString("3rd range");
    4006:	81 ed       	ldi	r24, 0xD1	; 209
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    400e:	fe 01       	movw	r30, r28
    4010:	e5 5a       	subi	r30, 0xA5	; 165
    4012:	fe 4f       	sbci	r31, 0xFE	; 254
    4014:	80 e0       	ldi	r24, 0x00	; 0
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	aa e7       	ldi	r26, 0x7A	; 122
    401a:	b4 e4       	ldi	r27, 0x44	; 68
    401c:	80 83       	st	Z, r24
    401e:	91 83       	std	Z+1, r25	; 0x01
    4020:	a2 83       	std	Z+2, r26	; 0x02
    4022:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4024:	8e 01       	movw	r16, r28
    4026:	09 5a       	subi	r16, 0xA9	; 169
    4028:	1e 4f       	sbci	r17, 0xFE	; 254
    402a:	fe 01       	movw	r30, r28
    402c:	e5 5a       	subi	r30, 0xA5	; 165
    402e:	fe 4f       	sbci	r31, 0xFE	; 254
    4030:	60 81       	ld	r22, Z
    4032:	71 81       	ldd	r23, Z+1	; 0x01
    4034:	82 81       	ldd	r24, Z+2	; 0x02
    4036:	93 81       	ldd	r25, Z+3	; 0x03
    4038:	20 e0       	ldi	r18, 0x00	; 0
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	4a e7       	ldi	r20, 0x7A	; 122
    403e:	53 e4       	ldi	r21, 0x43	; 67
    4040:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	f8 01       	movw	r30, r16
    404a:	80 83       	st	Z, r24
    404c:	91 83       	std	Z+1, r25	; 0x01
    404e:	a2 83       	std	Z+2, r26	; 0x02
    4050:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4052:	fe 01       	movw	r30, r28
    4054:	e9 5a       	subi	r30, 0xA9	; 169
    4056:	fe 4f       	sbci	r31, 0xFE	; 254
    4058:	60 81       	ld	r22, Z
    405a:	71 81       	ldd	r23, Z+1	; 0x01
    405c:	82 81       	ldd	r24, Z+2	; 0x02
    405e:	93 81       	ldd	r25, Z+3	; 0x03
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	40 e8       	ldi	r20, 0x80	; 128
    4066:	5f e3       	ldi	r21, 0x3F	; 63
    4068:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    406c:	88 23       	and	r24, r24
    406e:	44 f4       	brge	.+16     	; 0x4080 <AmmeterMode+0x732>
		__ticks = 1;
    4070:	fe 01       	movw	r30, r28
    4072:	eb 5a       	subi	r30, 0xAB	; 171
    4074:	fe 4f       	sbci	r31, 0xFE	; 254
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	91 83       	std	Z+1, r25	; 0x01
    407c:	80 83       	st	Z, r24
    407e:	64 c0       	rjmp	.+200    	; 0x4148 <AmmeterMode+0x7fa>
	else if (__tmp > 65535)
    4080:	fe 01       	movw	r30, r28
    4082:	e9 5a       	subi	r30, 0xA9	; 169
    4084:	fe 4f       	sbci	r31, 0xFE	; 254
    4086:	60 81       	ld	r22, Z
    4088:	71 81       	ldd	r23, Z+1	; 0x01
    408a:	82 81       	ldd	r24, Z+2	; 0x02
    408c:	93 81       	ldd	r25, Z+3	; 0x03
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	3f ef       	ldi	r19, 0xFF	; 255
    4092:	4f e7       	ldi	r20, 0x7F	; 127
    4094:	57 e4       	ldi	r21, 0x47	; 71
    4096:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    409a:	18 16       	cp	r1, r24
    409c:	0c f0       	brlt	.+2      	; 0x40a0 <AmmeterMode+0x752>
    409e:	43 c0       	rjmp	.+134    	; 0x4126 <AmmeterMode+0x7d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a0:	fe 01       	movw	r30, r28
    40a2:	e5 5a       	subi	r30, 0xA5	; 165
    40a4:	fe 4f       	sbci	r31, 0xFE	; 254
    40a6:	60 81       	ld	r22, Z
    40a8:	71 81       	ldd	r23, Z+1	; 0x01
    40aa:	82 81       	ldd	r24, Z+2	; 0x02
    40ac:	93 81       	ldd	r25, Z+3	; 0x03
    40ae:	20 e0       	ldi	r18, 0x00	; 0
    40b0:	30 e0       	ldi	r19, 0x00	; 0
    40b2:	40 e2       	ldi	r20, 0x20	; 32
    40b4:	51 e4       	ldi	r21, 0x41	; 65
    40b6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    40ba:	dc 01       	movw	r26, r24
    40bc:	cb 01       	movw	r24, r22
    40be:	8e 01       	movw	r16, r28
    40c0:	0b 5a       	subi	r16, 0xAB	; 171
    40c2:	1e 4f       	sbci	r17, 0xFE	; 254
    40c4:	bc 01       	movw	r22, r24
    40c6:	cd 01       	movw	r24, r26
    40c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	f8 01       	movw	r30, r16
    40d2:	91 83       	std	Z+1, r25	; 0x01
    40d4:	80 83       	st	Z, r24
    40d6:	1f c0       	rjmp	.+62     	; 0x4116 <AmmeterMode+0x7c8>
    40d8:	fe 01       	movw	r30, r28
    40da:	ed 5a       	subi	r30, 0xAD	; 173
    40dc:	fe 4f       	sbci	r31, 0xFE	; 254
    40de:	89 e1       	ldi	r24, 0x19	; 25
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	91 83       	std	Z+1, r25	; 0x01
    40e4:	80 83       	st	Z, r24
    40e6:	fe 01       	movw	r30, r28
    40e8:	ed 5a       	subi	r30, 0xAD	; 173
    40ea:	fe 4f       	sbci	r31, 0xFE	; 254
    40ec:	80 81       	ld	r24, Z
    40ee:	91 81       	ldd	r25, Z+1	; 0x01
    40f0:	01 97       	sbiw	r24, 0x01	; 1
    40f2:	f1 f7       	brne	.-4      	; 0x40f0 <AmmeterMode+0x7a2>
    40f4:	fe 01       	movw	r30, r28
    40f6:	ed 5a       	subi	r30, 0xAD	; 173
    40f8:	fe 4f       	sbci	r31, 0xFE	; 254
    40fa:	91 83       	std	Z+1, r25	; 0x01
    40fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40fe:	de 01       	movw	r26, r28
    4100:	ab 5a       	subi	r26, 0xAB	; 171
    4102:	be 4f       	sbci	r27, 0xFE	; 254
    4104:	fe 01       	movw	r30, r28
    4106:	eb 5a       	subi	r30, 0xAB	; 171
    4108:	fe 4f       	sbci	r31, 0xFE	; 254
    410a:	80 81       	ld	r24, Z
    410c:	91 81       	ldd	r25, Z+1	; 0x01
    410e:	01 97       	sbiw	r24, 0x01	; 1
    4110:	11 96       	adiw	r26, 0x01	; 1
    4112:	9c 93       	st	X, r25
    4114:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4116:	fe 01       	movw	r30, r28
    4118:	eb 5a       	subi	r30, 0xAB	; 171
    411a:	fe 4f       	sbci	r31, 0xFE	; 254
    411c:	80 81       	ld	r24, Z
    411e:	91 81       	ldd	r25, Z+1	; 0x01
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	d1 f6       	brne	.-76     	; 0x40d8 <AmmeterMode+0x78a>
    4124:	27 c0       	rjmp	.+78     	; 0x4174 <AmmeterMode+0x826>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4126:	8e 01       	movw	r16, r28
    4128:	0b 5a       	subi	r16, 0xAB	; 171
    412a:	1e 4f       	sbci	r17, 0xFE	; 254
    412c:	fe 01       	movw	r30, r28
    412e:	e9 5a       	subi	r30, 0xA9	; 169
    4130:	fe 4f       	sbci	r31, 0xFE	; 254
    4132:	60 81       	ld	r22, Z
    4134:	71 81       	ldd	r23, Z+1	; 0x01
    4136:	82 81       	ldd	r24, Z+2	; 0x02
    4138:	93 81       	ldd	r25, Z+3	; 0x03
    413a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    413e:	dc 01       	movw	r26, r24
    4140:	cb 01       	movw	r24, r22
    4142:	f8 01       	movw	r30, r16
    4144:	91 83       	std	Z+1, r25	; 0x01
    4146:	80 83       	st	Z, r24
    4148:	de 01       	movw	r26, r28
    414a:	af 5a       	subi	r26, 0xAF	; 175
    414c:	be 4f       	sbci	r27, 0xFE	; 254
    414e:	fe 01       	movw	r30, r28
    4150:	eb 5a       	subi	r30, 0xAB	; 171
    4152:	fe 4f       	sbci	r31, 0xFE	; 254
    4154:	80 81       	ld	r24, Z
    4156:	91 81       	ldd	r25, Z+1	; 0x01
    4158:	8d 93       	st	X+, r24
    415a:	9c 93       	st	X, r25
    415c:	fe 01       	movw	r30, r28
    415e:	ef 5a       	subi	r30, 0xAF	; 175
    4160:	fe 4f       	sbci	r31, 0xFE	; 254
    4162:	80 81       	ld	r24, Z
    4164:	91 81       	ldd	r25, Z+1	; 0x01
    4166:	01 97       	sbiw	r24, 0x01	; 1
    4168:	f1 f7       	brne	.-4      	; 0x4166 <AmmeterMode+0x818>
    416a:	fe 01       	movw	r30, r28
    416c:	ef 5a       	subi	r30, 0xAF	; 175
    416e:	fe 4f       	sbci	r31, 0xFE	; 254
    4170:	91 83       	std	Z+1, r25	; 0x01
    4172:	80 83       	st	Z, r24
				_delay_ms(1000);

				Vout = adc1*(5.0/1023);
    4174:	80 91 30 02 	lds	r24, 0x0230
    4178:	90 91 31 02 	lds	r25, 0x0231
    417c:	a0 91 32 02 	lds	r26, 0x0232
    4180:	b0 91 33 02 	lds	r27, 0x0233
    4184:	bc 01       	movw	r22, r24
    4186:	cd 01       	movw	r24, r26
    4188:	2a e0       	ldi	r18, 0x0A	; 10
    418a:	38 e2       	ldi	r19, 0x28	; 40
    418c:	40 ea       	ldi	r20, 0xA0	; 160
    418e:	5b e3       	ldi	r21, 0x3B	; 59
    4190:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	80 93 38 02 	sts	0x0238, r24
    419c:	90 93 39 02 	sts	0x0239, r25
    41a0:	a0 93 3a 02 	sts	0x023A, r26
    41a4:	b0 93 3b 02 	sts	0x023B, r27
				amp=Vout/(10.0*0.4); //Range 100mA:1A (Rs=0.4)
    41a8:	80 91 38 02 	lds	r24, 0x0238
    41ac:	90 91 39 02 	lds	r25, 0x0239
    41b0:	a0 91 3a 02 	lds	r26, 0x023A
    41b4:	b0 91 3b 02 	lds	r27, 0x023B
    41b8:	bc 01       	movw	r22, r24
    41ba:	cd 01       	movw	r24, r26
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	40 e8       	ldi	r20, 0x80	; 128
    41c2:	50 e4       	ldi	r21, 0x40	; 64
    41c4:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	80 93 24 02 	sts	0x0224, r24
    41d0:	90 93 25 02 	sts	0x0225, r25
    41d4:	a0 93 26 02 	sts	0x0226, r26
    41d8:	b0 93 27 02 	sts	0x0227, r27
				LCD_clearScreen();
    41dc:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
				LCD_displayString("Amp=");
    41e0:	8b ed       	ldi	r24, 0xDB	; 219
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
				LCD_displayFloat(amp,5);
    41e8:	80 91 24 02 	lds	r24, 0x0224
    41ec:	90 91 25 02 	lds	r25, 0x0225
    41f0:	a0 91 26 02 	lds	r26, 0x0226
    41f4:	b0 91 27 02 	lds	r27, 0x0227
    41f8:	bc 01       	movw	r22, r24
    41fa:	cd 01       	movw	r24, r26
    41fc:	45 e0       	ldi	r20, 0x05	; 5
    41fe:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    4202:	fe 01       	movw	r30, r28
    4204:	e3 5b       	subi	r30, 0xB3	; 179
    4206:	fe 4f       	sbci	r31, 0xFE	; 254
    4208:	80 e0       	ldi	r24, 0x00	; 0
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	aa e7       	ldi	r26, 0x7A	; 122
    420e:	b4 e4       	ldi	r27, 0x44	; 68
    4210:	80 83       	st	Z, r24
    4212:	91 83       	std	Z+1, r25	; 0x01
    4214:	a2 83       	std	Z+2, r26	; 0x02
    4216:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4218:	8e 01       	movw	r16, r28
    421a:	07 5b       	subi	r16, 0xB7	; 183
    421c:	1e 4f       	sbci	r17, 0xFE	; 254
    421e:	fe 01       	movw	r30, r28
    4220:	e3 5b       	subi	r30, 0xB3	; 179
    4222:	fe 4f       	sbci	r31, 0xFE	; 254
    4224:	60 81       	ld	r22, Z
    4226:	71 81       	ldd	r23, Z+1	; 0x01
    4228:	82 81       	ldd	r24, Z+2	; 0x02
    422a:	93 81       	ldd	r25, Z+3	; 0x03
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	4a e7       	ldi	r20, 0x7A	; 122
    4232:	53 e4       	ldi	r21, 0x43	; 67
    4234:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	f8 01       	movw	r30, r16
    423e:	80 83       	st	Z, r24
    4240:	91 83       	std	Z+1, r25	; 0x01
    4242:	a2 83       	std	Z+2, r26	; 0x02
    4244:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4246:	fe 01       	movw	r30, r28
    4248:	e7 5b       	subi	r30, 0xB7	; 183
    424a:	fe 4f       	sbci	r31, 0xFE	; 254
    424c:	60 81       	ld	r22, Z
    424e:	71 81       	ldd	r23, Z+1	; 0x01
    4250:	82 81       	ldd	r24, Z+2	; 0x02
    4252:	93 81       	ldd	r25, Z+3	; 0x03
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	40 e8       	ldi	r20, 0x80	; 128
    425a:	5f e3       	ldi	r21, 0x3F	; 63
    425c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4260:	88 23       	and	r24, r24
    4262:	44 f4       	brge	.+16     	; 0x4274 <AmmeterMode+0x926>
		__ticks = 1;
    4264:	fe 01       	movw	r30, r28
    4266:	e9 5b       	subi	r30, 0xB9	; 185
    4268:	fe 4f       	sbci	r31, 0xFE	; 254
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	91 83       	std	Z+1, r25	; 0x01
    4270:	80 83       	st	Z, r24
    4272:	64 c0       	rjmp	.+200    	; 0x433c <AmmeterMode+0x9ee>
	else if (__tmp > 65535)
    4274:	fe 01       	movw	r30, r28
    4276:	e7 5b       	subi	r30, 0xB7	; 183
    4278:	fe 4f       	sbci	r31, 0xFE	; 254
    427a:	60 81       	ld	r22, Z
    427c:	71 81       	ldd	r23, Z+1	; 0x01
    427e:	82 81       	ldd	r24, Z+2	; 0x02
    4280:	93 81       	ldd	r25, Z+3	; 0x03
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	3f ef       	ldi	r19, 0xFF	; 255
    4286:	4f e7       	ldi	r20, 0x7F	; 127
    4288:	57 e4       	ldi	r21, 0x47	; 71
    428a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    428e:	18 16       	cp	r1, r24
    4290:	0c f0       	brlt	.+2      	; 0x4294 <AmmeterMode+0x946>
    4292:	43 c0       	rjmp	.+134    	; 0x431a <AmmeterMode+0x9cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4294:	fe 01       	movw	r30, r28
    4296:	e3 5b       	subi	r30, 0xB3	; 179
    4298:	fe 4f       	sbci	r31, 0xFE	; 254
    429a:	60 81       	ld	r22, Z
    429c:	71 81       	ldd	r23, Z+1	; 0x01
    429e:	82 81       	ldd	r24, Z+2	; 0x02
    42a0:	93 81       	ldd	r25, Z+3	; 0x03
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	40 e2       	ldi	r20, 0x20	; 32
    42a8:	51 e4       	ldi	r21, 0x41	; 65
    42aa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	8e 01       	movw	r16, r28
    42b4:	09 5b       	subi	r16, 0xB9	; 185
    42b6:	1e 4f       	sbci	r17, 0xFE	; 254
    42b8:	bc 01       	movw	r22, r24
    42ba:	cd 01       	movw	r24, r26
    42bc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	f8 01       	movw	r30, r16
    42c6:	91 83       	std	Z+1, r25	; 0x01
    42c8:	80 83       	st	Z, r24
    42ca:	1f c0       	rjmp	.+62     	; 0x430a <AmmeterMode+0x9bc>
    42cc:	fe 01       	movw	r30, r28
    42ce:	eb 5b       	subi	r30, 0xBB	; 187
    42d0:	fe 4f       	sbci	r31, 0xFE	; 254
    42d2:	89 e1       	ldi	r24, 0x19	; 25
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	91 83       	std	Z+1, r25	; 0x01
    42d8:	80 83       	st	Z, r24
    42da:	fe 01       	movw	r30, r28
    42dc:	eb 5b       	subi	r30, 0xBB	; 187
    42de:	fe 4f       	sbci	r31, 0xFE	; 254
    42e0:	80 81       	ld	r24, Z
    42e2:	91 81       	ldd	r25, Z+1	; 0x01
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	f1 f7       	brne	.-4      	; 0x42e4 <AmmeterMode+0x996>
    42e8:	fe 01       	movw	r30, r28
    42ea:	eb 5b       	subi	r30, 0xBB	; 187
    42ec:	fe 4f       	sbci	r31, 0xFE	; 254
    42ee:	91 83       	std	Z+1, r25	; 0x01
    42f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42f2:	de 01       	movw	r26, r28
    42f4:	a9 5b       	subi	r26, 0xB9	; 185
    42f6:	be 4f       	sbci	r27, 0xFE	; 254
    42f8:	fe 01       	movw	r30, r28
    42fa:	e9 5b       	subi	r30, 0xB9	; 185
    42fc:	fe 4f       	sbci	r31, 0xFE	; 254
    42fe:	80 81       	ld	r24, Z
    4300:	91 81       	ldd	r25, Z+1	; 0x01
    4302:	01 97       	sbiw	r24, 0x01	; 1
    4304:	11 96       	adiw	r26, 0x01	; 1
    4306:	9c 93       	st	X, r25
    4308:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    430a:	fe 01       	movw	r30, r28
    430c:	e9 5b       	subi	r30, 0xB9	; 185
    430e:	fe 4f       	sbci	r31, 0xFE	; 254
    4310:	80 81       	ld	r24, Z
    4312:	91 81       	ldd	r25, Z+1	; 0x01
    4314:	00 97       	sbiw	r24, 0x00	; 0
    4316:	d1 f6       	brne	.-76     	; 0x42cc <AmmeterMode+0x97e>
    4318:	27 c0       	rjmp	.+78     	; 0x4368 <AmmeterMode+0xa1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    431a:	8e 01       	movw	r16, r28
    431c:	09 5b       	subi	r16, 0xB9	; 185
    431e:	1e 4f       	sbci	r17, 0xFE	; 254
    4320:	fe 01       	movw	r30, r28
    4322:	e7 5b       	subi	r30, 0xB7	; 183
    4324:	fe 4f       	sbci	r31, 0xFE	; 254
    4326:	60 81       	ld	r22, Z
    4328:	71 81       	ldd	r23, Z+1	; 0x01
    432a:	82 81       	ldd	r24, Z+2	; 0x02
    432c:	93 81       	ldd	r25, Z+3	; 0x03
    432e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4332:	dc 01       	movw	r26, r24
    4334:	cb 01       	movw	r24, r22
    4336:	f8 01       	movw	r30, r16
    4338:	91 83       	std	Z+1, r25	; 0x01
    433a:	80 83       	st	Z, r24
    433c:	de 01       	movw	r26, r28
    433e:	ad 5b       	subi	r26, 0xBD	; 189
    4340:	be 4f       	sbci	r27, 0xFE	; 254
    4342:	fe 01       	movw	r30, r28
    4344:	e9 5b       	subi	r30, 0xB9	; 185
    4346:	fe 4f       	sbci	r31, 0xFE	; 254
    4348:	80 81       	ld	r24, Z
    434a:	91 81       	ldd	r25, Z+1	; 0x01
    434c:	8d 93       	st	X+, r24
    434e:	9c 93       	st	X, r25
    4350:	fe 01       	movw	r30, r28
    4352:	ed 5b       	subi	r30, 0xBD	; 189
    4354:	fe 4f       	sbci	r31, 0xFE	; 254
    4356:	80 81       	ld	r24, Z
    4358:	91 81       	ldd	r25, Z+1	; 0x01
    435a:	01 97       	sbiw	r24, 0x01	; 1
    435c:	f1 f7       	brne	.-4      	; 0x435a <AmmeterMode+0xa0c>
    435e:	fe 01       	movw	r30, r28
    4360:	ed 5b       	subi	r30, 0xBD	; 189
    4362:	fe 4f       	sbci	r31, 0xFE	; 254
    4364:	91 83       	std	Z+1, r25	; 0x01
    4366:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_clearScreen();
    4368:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
				num=0;
    436c:	10 92 22 02 	sts	0x0222, r1
    4370:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <AmmeterMode+0x308e>
			}
			else
			{

				LCD_clearScreen();
    4374:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
				LCD_displayString("Auto range 2");
    4378:	80 ee       	ldi	r24, 0xE0	; 224
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    4380:	fe 01       	movw	r30, r28
    4382:	e1 5c       	subi	r30, 0xC1	; 193
    4384:	fe 4f       	sbci	r31, 0xFE	; 254
    4386:	80 e0       	ldi	r24, 0x00	; 0
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	a8 e4       	ldi	r26, 0x48	; 72
    438c:	b3 e4       	ldi	r27, 0x43	; 67
    438e:	80 83       	st	Z, r24
    4390:	91 83       	std	Z+1, r25	; 0x01
    4392:	a2 83       	std	Z+2, r26	; 0x02
    4394:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4396:	8e 01       	movw	r16, r28
    4398:	05 5c       	subi	r16, 0xC5	; 197
    439a:	1e 4f       	sbci	r17, 0xFE	; 254
    439c:	fe 01       	movw	r30, r28
    439e:	e1 5c       	subi	r30, 0xC1	; 193
    43a0:	fe 4f       	sbci	r31, 0xFE	; 254
    43a2:	60 81       	ld	r22, Z
    43a4:	71 81       	ldd	r23, Z+1	; 0x01
    43a6:	82 81       	ldd	r24, Z+2	; 0x02
    43a8:	93 81       	ldd	r25, Z+3	; 0x03
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	4a e7       	ldi	r20, 0x7A	; 122
    43b0:	53 e4       	ldi	r21, 0x43	; 67
    43b2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	f8 01       	movw	r30, r16
    43bc:	80 83       	st	Z, r24
    43be:	91 83       	std	Z+1, r25	; 0x01
    43c0:	a2 83       	std	Z+2, r26	; 0x02
    43c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43c4:	fe 01       	movw	r30, r28
    43c6:	e5 5c       	subi	r30, 0xC5	; 197
    43c8:	fe 4f       	sbci	r31, 0xFE	; 254
    43ca:	60 81       	ld	r22, Z
    43cc:	71 81       	ldd	r23, Z+1	; 0x01
    43ce:	82 81       	ldd	r24, Z+2	; 0x02
    43d0:	93 81       	ldd	r25, Z+3	; 0x03
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	40 e8       	ldi	r20, 0x80	; 128
    43d8:	5f e3       	ldi	r21, 0x3F	; 63
    43da:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    43de:	88 23       	and	r24, r24
    43e0:	44 f4       	brge	.+16     	; 0x43f2 <AmmeterMode+0xaa4>
		__ticks = 1;
    43e2:	fe 01       	movw	r30, r28
    43e4:	e7 5c       	subi	r30, 0xC7	; 199
    43e6:	fe 4f       	sbci	r31, 0xFE	; 254
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	91 83       	std	Z+1, r25	; 0x01
    43ee:	80 83       	st	Z, r24
    43f0:	64 c0       	rjmp	.+200    	; 0x44ba <AmmeterMode+0xb6c>
	else if (__tmp > 65535)
    43f2:	fe 01       	movw	r30, r28
    43f4:	e5 5c       	subi	r30, 0xC5	; 197
    43f6:	fe 4f       	sbci	r31, 0xFE	; 254
    43f8:	60 81       	ld	r22, Z
    43fa:	71 81       	ldd	r23, Z+1	; 0x01
    43fc:	82 81       	ldd	r24, Z+2	; 0x02
    43fe:	93 81       	ldd	r25, Z+3	; 0x03
    4400:	20 e0       	ldi	r18, 0x00	; 0
    4402:	3f ef       	ldi	r19, 0xFF	; 255
    4404:	4f e7       	ldi	r20, 0x7F	; 127
    4406:	57 e4       	ldi	r21, 0x47	; 71
    4408:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    440c:	18 16       	cp	r1, r24
    440e:	0c f0       	brlt	.+2      	; 0x4412 <AmmeterMode+0xac4>
    4410:	43 c0       	rjmp	.+134    	; 0x4498 <AmmeterMode+0xb4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4412:	fe 01       	movw	r30, r28
    4414:	e1 5c       	subi	r30, 0xC1	; 193
    4416:	fe 4f       	sbci	r31, 0xFE	; 254
    4418:	60 81       	ld	r22, Z
    441a:	71 81       	ldd	r23, Z+1	; 0x01
    441c:	82 81       	ldd	r24, Z+2	; 0x02
    441e:	93 81       	ldd	r25, Z+3	; 0x03
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e2       	ldi	r20, 0x20	; 32
    4426:	51 e4       	ldi	r21, 0x41	; 65
    4428:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    442c:	dc 01       	movw	r26, r24
    442e:	cb 01       	movw	r24, r22
    4430:	8e 01       	movw	r16, r28
    4432:	07 5c       	subi	r16, 0xC7	; 199
    4434:	1e 4f       	sbci	r17, 0xFE	; 254
    4436:	bc 01       	movw	r22, r24
    4438:	cd 01       	movw	r24, r26
    443a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    443e:	dc 01       	movw	r26, r24
    4440:	cb 01       	movw	r24, r22
    4442:	f8 01       	movw	r30, r16
    4444:	91 83       	std	Z+1, r25	; 0x01
    4446:	80 83       	st	Z, r24
    4448:	1f c0       	rjmp	.+62     	; 0x4488 <AmmeterMode+0xb3a>
    444a:	fe 01       	movw	r30, r28
    444c:	e9 5c       	subi	r30, 0xC9	; 201
    444e:	fe 4f       	sbci	r31, 0xFE	; 254
    4450:	89 e1       	ldi	r24, 0x19	; 25
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	91 83       	std	Z+1, r25	; 0x01
    4456:	80 83       	st	Z, r24
    4458:	fe 01       	movw	r30, r28
    445a:	e9 5c       	subi	r30, 0xC9	; 201
    445c:	fe 4f       	sbci	r31, 0xFE	; 254
    445e:	80 81       	ld	r24, Z
    4460:	91 81       	ldd	r25, Z+1	; 0x01
    4462:	01 97       	sbiw	r24, 0x01	; 1
    4464:	f1 f7       	brne	.-4      	; 0x4462 <AmmeterMode+0xb14>
    4466:	fe 01       	movw	r30, r28
    4468:	e9 5c       	subi	r30, 0xC9	; 201
    446a:	fe 4f       	sbci	r31, 0xFE	; 254
    446c:	91 83       	std	Z+1, r25	; 0x01
    446e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4470:	de 01       	movw	r26, r28
    4472:	a7 5c       	subi	r26, 0xC7	; 199
    4474:	be 4f       	sbci	r27, 0xFE	; 254
    4476:	fe 01       	movw	r30, r28
    4478:	e7 5c       	subi	r30, 0xC7	; 199
    447a:	fe 4f       	sbci	r31, 0xFE	; 254
    447c:	80 81       	ld	r24, Z
    447e:	91 81       	ldd	r25, Z+1	; 0x01
    4480:	01 97       	sbiw	r24, 0x01	; 1
    4482:	11 96       	adiw	r26, 0x01	; 1
    4484:	9c 93       	st	X, r25
    4486:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4488:	fe 01       	movw	r30, r28
    448a:	e7 5c       	subi	r30, 0xC7	; 199
    448c:	fe 4f       	sbci	r31, 0xFE	; 254
    448e:	80 81       	ld	r24, Z
    4490:	91 81       	ldd	r25, Z+1	; 0x01
    4492:	00 97       	sbiw	r24, 0x00	; 0
    4494:	d1 f6       	brne	.-76     	; 0x444a <AmmeterMode+0xafc>
    4496:	27 c0       	rjmp	.+78     	; 0x44e6 <AmmeterMode+0xb98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4498:	8e 01       	movw	r16, r28
    449a:	07 5c       	subi	r16, 0xC7	; 199
    449c:	1e 4f       	sbci	r17, 0xFE	; 254
    449e:	fe 01       	movw	r30, r28
    44a0:	e5 5c       	subi	r30, 0xC5	; 197
    44a2:	fe 4f       	sbci	r31, 0xFE	; 254
    44a4:	60 81       	ld	r22, Z
    44a6:	71 81       	ldd	r23, Z+1	; 0x01
    44a8:	82 81       	ldd	r24, Z+2	; 0x02
    44aa:	93 81       	ldd	r25, Z+3	; 0x03
    44ac:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	f8 01       	movw	r30, r16
    44b6:	91 83       	std	Z+1, r25	; 0x01
    44b8:	80 83       	st	Z, r24
    44ba:	de 01       	movw	r26, r28
    44bc:	ab 5c       	subi	r26, 0xCB	; 203
    44be:	be 4f       	sbci	r27, 0xFE	; 254
    44c0:	fe 01       	movw	r30, r28
    44c2:	e7 5c       	subi	r30, 0xC7	; 199
    44c4:	fe 4f       	sbci	r31, 0xFE	; 254
    44c6:	80 81       	ld	r24, Z
    44c8:	91 81       	ldd	r25, Z+1	; 0x01
    44ca:	8d 93       	st	X+, r24
    44cc:	9c 93       	st	X, r25
    44ce:	fe 01       	movw	r30, r28
    44d0:	eb 5c       	subi	r30, 0xCB	; 203
    44d2:	fe 4f       	sbci	r31, 0xFE	; 254
    44d4:	80 81       	ld	r24, Z
    44d6:	91 81       	ldd	r25, Z+1	; 0x01
    44d8:	01 97       	sbiw	r24, 0x01	; 1
    44da:	f1 f7       	brne	.-4      	; 0x44d8 <AmmeterMode+0xb8a>
    44dc:	fe 01       	movw	r30, r28
    44de:	eb 5c       	subi	r30, 0xCB	; 203
    44e0:	fe 4f       	sbci	r31, 0xFE	; 254
    44e2:	91 83       	std	Z+1, r25	; 0x01
    44e4:	80 83       	st	Z, r24
				_delay_ms(200);

				GPIO_writePin(PORTA_ID, PIN5_ID, 0);
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	65 e0       	ldi	r22, 0x05	; 5
    44ea:	40 e0       	ldi	r20, 0x00	; 0
    44ec:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
				GPIO_writePin(PORTB_ID, PIN5_ID, 1);
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	65 e0       	ldi	r22, 0x05	; 5
    44f4:	41 e0       	ldi	r20, 0x01	; 1
    44f6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
				GPIO_writePin(PORTB_ID, PIN6_ID, 0);
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	66 e0       	ldi	r22, 0x06	; 6
    44fe:	40 e0       	ldi	r20, 0x00	; 0
    4500:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    4504:	fe 01       	movw	r30, r28
    4506:	ef 5c       	subi	r30, 0xCF	; 207
    4508:	fe 4f       	sbci	r31, 0xFE	; 254
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	a8 ec       	ldi	r26, 0xC8	; 200
    4510:	b2 e4       	ldi	r27, 0x42	; 66
    4512:	80 83       	st	Z, r24
    4514:	91 83       	std	Z+1, r25	; 0x01
    4516:	a2 83       	std	Z+2, r26	; 0x02
    4518:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    451a:	8e 01       	movw	r16, r28
    451c:	03 5d       	subi	r16, 0xD3	; 211
    451e:	1e 4f       	sbci	r17, 0xFE	; 254
    4520:	fe 01       	movw	r30, r28
    4522:	ef 5c       	subi	r30, 0xCF	; 207
    4524:	fe 4f       	sbci	r31, 0xFE	; 254
    4526:	60 81       	ld	r22, Z
    4528:	71 81       	ldd	r23, Z+1	; 0x01
    452a:	82 81       	ldd	r24, Z+2	; 0x02
    452c:	93 81       	ldd	r25, Z+3	; 0x03
    452e:	20 e0       	ldi	r18, 0x00	; 0
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	4a e7       	ldi	r20, 0x7A	; 122
    4534:	53 e4       	ldi	r21, 0x43	; 67
    4536:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    453a:	dc 01       	movw	r26, r24
    453c:	cb 01       	movw	r24, r22
    453e:	f8 01       	movw	r30, r16
    4540:	80 83       	st	Z, r24
    4542:	91 83       	std	Z+1, r25	; 0x01
    4544:	a2 83       	std	Z+2, r26	; 0x02
    4546:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4548:	fe 01       	movw	r30, r28
    454a:	e3 5d       	subi	r30, 0xD3	; 211
    454c:	fe 4f       	sbci	r31, 0xFE	; 254
    454e:	60 81       	ld	r22, Z
    4550:	71 81       	ldd	r23, Z+1	; 0x01
    4552:	82 81       	ldd	r24, Z+2	; 0x02
    4554:	93 81       	ldd	r25, Z+3	; 0x03
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	40 e8       	ldi	r20, 0x80	; 128
    455c:	5f e3       	ldi	r21, 0x3F	; 63
    455e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4562:	88 23       	and	r24, r24
    4564:	44 f4       	brge	.+16     	; 0x4576 <AmmeterMode+0xc28>
		__ticks = 1;
    4566:	fe 01       	movw	r30, r28
    4568:	e5 5d       	subi	r30, 0xD5	; 213
    456a:	fe 4f       	sbci	r31, 0xFE	; 254
    456c:	81 e0       	ldi	r24, 0x01	; 1
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	91 83       	std	Z+1, r25	; 0x01
    4572:	80 83       	st	Z, r24
    4574:	64 c0       	rjmp	.+200    	; 0x463e <AmmeterMode+0xcf0>
	else if (__tmp > 65535)
    4576:	fe 01       	movw	r30, r28
    4578:	e3 5d       	subi	r30, 0xD3	; 211
    457a:	fe 4f       	sbci	r31, 0xFE	; 254
    457c:	60 81       	ld	r22, Z
    457e:	71 81       	ldd	r23, Z+1	; 0x01
    4580:	82 81       	ldd	r24, Z+2	; 0x02
    4582:	93 81       	ldd	r25, Z+3	; 0x03
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	3f ef       	ldi	r19, 0xFF	; 255
    4588:	4f e7       	ldi	r20, 0x7F	; 127
    458a:	57 e4       	ldi	r21, 0x47	; 71
    458c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4590:	18 16       	cp	r1, r24
    4592:	0c f0       	brlt	.+2      	; 0x4596 <AmmeterMode+0xc48>
    4594:	43 c0       	rjmp	.+134    	; 0x461c <AmmeterMode+0xcce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4596:	fe 01       	movw	r30, r28
    4598:	ef 5c       	subi	r30, 0xCF	; 207
    459a:	fe 4f       	sbci	r31, 0xFE	; 254
    459c:	60 81       	ld	r22, Z
    459e:	71 81       	ldd	r23, Z+1	; 0x01
    45a0:	82 81       	ldd	r24, Z+2	; 0x02
    45a2:	93 81       	ldd	r25, Z+3	; 0x03
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e2       	ldi	r20, 0x20	; 32
    45aa:	51 e4       	ldi	r21, 0x41	; 65
    45ac:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	8e 01       	movw	r16, r28
    45b6:	05 5d       	subi	r16, 0xD5	; 213
    45b8:	1e 4f       	sbci	r17, 0xFE	; 254
    45ba:	bc 01       	movw	r22, r24
    45bc:	cd 01       	movw	r24, r26
    45be:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	f8 01       	movw	r30, r16
    45c8:	91 83       	std	Z+1, r25	; 0x01
    45ca:	80 83       	st	Z, r24
    45cc:	1f c0       	rjmp	.+62     	; 0x460c <AmmeterMode+0xcbe>
    45ce:	fe 01       	movw	r30, r28
    45d0:	e7 5d       	subi	r30, 0xD7	; 215
    45d2:	fe 4f       	sbci	r31, 0xFE	; 254
    45d4:	89 e1       	ldi	r24, 0x19	; 25
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	91 83       	std	Z+1, r25	; 0x01
    45da:	80 83       	st	Z, r24
    45dc:	fe 01       	movw	r30, r28
    45de:	e7 5d       	subi	r30, 0xD7	; 215
    45e0:	fe 4f       	sbci	r31, 0xFE	; 254
    45e2:	80 81       	ld	r24, Z
    45e4:	91 81       	ldd	r25, Z+1	; 0x01
    45e6:	01 97       	sbiw	r24, 0x01	; 1
    45e8:	f1 f7       	brne	.-4      	; 0x45e6 <AmmeterMode+0xc98>
    45ea:	fe 01       	movw	r30, r28
    45ec:	e7 5d       	subi	r30, 0xD7	; 215
    45ee:	fe 4f       	sbci	r31, 0xFE	; 254
    45f0:	91 83       	std	Z+1, r25	; 0x01
    45f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f4:	de 01       	movw	r26, r28
    45f6:	a5 5d       	subi	r26, 0xD5	; 213
    45f8:	be 4f       	sbci	r27, 0xFE	; 254
    45fa:	fe 01       	movw	r30, r28
    45fc:	e5 5d       	subi	r30, 0xD5	; 213
    45fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4600:	80 81       	ld	r24, Z
    4602:	91 81       	ldd	r25, Z+1	; 0x01
    4604:	01 97       	sbiw	r24, 0x01	; 1
    4606:	11 96       	adiw	r26, 0x01	; 1
    4608:	9c 93       	st	X, r25
    460a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    460c:	fe 01       	movw	r30, r28
    460e:	e5 5d       	subi	r30, 0xD5	; 213
    4610:	fe 4f       	sbci	r31, 0xFE	; 254
    4612:	80 81       	ld	r24, Z
    4614:	91 81       	ldd	r25, Z+1	; 0x01
    4616:	00 97       	sbiw	r24, 0x00	; 0
    4618:	d1 f6       	brne	.-76     	; 0x45ce <AmmeterMode+0xc80>
    461a:	27 c0       	rjmp	.+78     	; 0x466a <AmmeterMode+0xd1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    461c:	8e 01       	movw	r16, r28
    461e:	05 5d       	subi	r16, 0xD5	; 213
    4620:	1e 4f       	sbci	r17, 0xFE	; 254
    4622:	fe 01       	movw	r30, r28
    4624:	e3 5d       	subi	r30, 0xD3	; 211
    4626:	fe 4f       	sbci	r31, 0xFE	; 254
    4628:	60 81       	ld	r22, Z
    462a:	71 81       	ldd	r23, Z+1	; 0x01
    462c:	82 81       	ldd	r24, Z+2	; 0x02
    462e:	93 81       	ldd	r25, Z+3	; 0x03
    4630:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	f8 01       	movw	r30, r16
    463a:	91 83       	std	Z+1, r25	; 0x01
    463c:	80 83       	st	Z, r24
    463e:	de 01       	movw	r26, r28
    4640:	a9 5d       	subi	r26, 0xD9	; 217
    4642:	be 4f       	sbci	r27, 0xFE	; 254
    4644:	fe 01       	movw	r30, r28
    4646:	e5 5d       	subi	r30, 0xD5	; 213
    4648:	fe 4f       	sbci	r31, 0xFE	; 254
    464a:	80 81       	ld	r24, Z
    464c:	91 81       	ldd	r25, Z+1	; 0x01
    464e:	8d 93       	st	X+, r24
    4650:	9c 93       	st	X, r25
    4652:	fe 01       	movw	r30, r28
    4654:	e9 5d       	subi	r30, 0xD9	; 217
    4656:	fe 4f       	sbci	r31, 0xFE	; 254
    4658:	80 81       	ld	r24, Z
    465a:	91 81       	ldd	r25, Z+1	; 0x01
    465c:	01 97       	sbiw	r24, 0x01	; 1
    465e:	f1 f7       	brne	.-4      	; 0x465c <AmmeterMode+0xd0e>
    4660:	fe 01       	movw	r30, r28
    4662:	e9 5d       	subi	r30, 0xD9	; 217
    4664:	fe 4f       	sbci	r31, 0xFE	; 254
    4666:	91 83       	std	Z+1, r25	; 0x01
    4668:	80 83       	st	Z, r24
				_delay_ms(100);

				adc1=ADC_readChannel(1);
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    4670:	cc 01       	movw	r24, r24
    4672:	a0 e0       	ldi	r26, 0x00	; 0
    4674:	b0 e0       	ldi	r27, 0x00	; 0
    4676:	bc 01       	movw	r22, r24
    4678:	cd 01       	movw	r24, r26
    467a:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	80 93 30 02 	sts	0x0230, r24
    4686:	90 93 31 02 	sts	0x0231, r25
    468a:	a0 93 32 02 	sts	0x0232, r26
    468e:	b0 93 33 02 	sts	0x0233, r27
				LCD_clearScreen();
    4692:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
				LCD_displayString("ADC=");
    4696:	8c ec       	ldi	r24, 0xCC	; 204
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
				LCD_displayFloat(adc1,2);
    469e:	80 91 30 02 	lds	r24, 0x0230
    46a2:	90 91 31 02 	lds	r25, 0x0231
    46a6:	a0 91 32 02 	lds	r26, 0x0232
    46aa:	b0 91 33 02 	lds	r27, 0x0233
    46ae:	bc 01       	movw	r22, r24
    46b0:	cd 01       	movw	r24, r26
    46b2:	42 e0       	ldi	r20, 0x02	; 2
    46b4:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    46b8:	fe 01       	movw	r30, r28
    46ba:	ed 5d       	subi	r30, 0xDD	; 221
    46bc:	fe 4f       	sbci	r31, 0xFE	; 254
    46be:	80 e0       	ldi	r24, 0x00	; 0
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	aa e7       	ldi	r26, 0x7A	; 122
    46c4:	b4 e4       	ldi	r27, 0x44	; 68
    46c6:	80 83       	st	Z, r24
    46c8:	91 83       	std	Z+1, r25	; 0x01
    46ca:	a2 83       	std	Z+2, r26	; 0x02
    46cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ce:	8e 01       	movw	r16, r28
    46d0:	01 5e       	subi	r16, 0xE1	; 225
    46d2:	1e 4f       	sbci	r17, 0xFE	; 254
    46d4:	fe 01       	movw	r30, r28
    46d6:	ed 5d       	subi	r30, 0xDD	; 221
    46d8:	fe 4f       	sbci	r31, 0xFE	; 254
    46da:	60 81       	ld	r22, Z
    46dc:	71 81       	ldd	r23, Z+1	; 0x01
    46de:	82 81       	ldd	r24, Z+2	; 0x02
    46e0:	93 81       	ldd	r25, Z+3	; 0x03
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	30 e0       	ldi	r19, 0x00	; 0
    46e6:	4a e7       	ldi	r20, 0x7A	; 122
    46e8:	53 e4       	ldi	r21, 0x43	; 67
    46ea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    46ee:	dc 01       	movw	r26, r24
    46f0:	cb 01       	movw	r24, r22
    46f2:	f8 01       	movw	r30, r16
    46f4:	80 83       	st	Z, r24
    46f6:	91 83       	std	Z+1, r25	; 0x01
    46f8:	a2 83       	std	Z+2, r26	; 0x02
    46fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46fc:	fe 01       	movw	r30, r28
    46fe:	e1 5e       	subi	r30, 0xE1	; 225
    4700:	fe 4f       	sbci	r31, 0xFE	; 254
    4702:	60 81       	ld	r22, Z
    4704:	71 81       	ldd	r23, Z+1	; 0x01
    4706:	82 81       	ldd	r24, Z+2	; 0x02
    4708:	93 81       	ldd	r25, Z+3	; 0x03
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	40 e8       	ldi	r20, 0x80	; 128
    4710:	5f e3       	ldi	r21, 0x3F	; 63
    4712:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4716:	88 23       	and	r24, r24
    4718:	44 f4       	brge	.+16     	; 0x472a <AmmeterMode+0xddc>
		__ticks = 1;
    471a:	fe 01       	movw	r30, r28
    471c:	e3 5e       	subi	r30, 0xE3	; 227
    471e:	fe 4f       	sbci	r31, 0xFE	; 254
    4720:	81 e0       	ldi	r24, 0x01	; 1
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	91 83       	std	Z+1, r25	; 0x01
    4726:	80 83       	st	Z, r24
    4728:	64 c0       	rjmp	.+200    	; 0x47f2 <AmmeterMode+0xea4>
	else if (__tmp > 65535)
    472a:	fe 01       	movw	r30, r28
    472c:	e1 5e       	subi	r30, 0xE1	; 225
    472e:	fe 4f       	sbci	r31, 0xFE	; 254
    4730:	60 81       	ld	r22, Z
    4732:	71 81       	ldd	r23, Z+1	; 0x01
    4734:	82 81       	ldd	r24, Z+2	; 0x02
    4736:	93 81       	ldd	r25, Z+3	; 0x03
    4738:	20 e0       	ldi	r18, 0x00	; 0
    473a:	3f ef       	ldi	r19, 0xFF	; 255
    473c:	4f e7       	ldi	r20, 0x7F	; 127
    473e:	57 e4       	ldi	r21, 0x47	; 71
    4740:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4744:	18 16       	cp	r1, r24
    4746:	0c f0       	brlt	.+2      	; 0x474a <AmmeterMode+0xdfc>
    4748:	43 c0       	rjmp	.+134    	; 0x47d0 <AmmeterMode+0xe82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    474a:	fe 01       	movw	r30, r28
    474c:	ed 5d       	subi	r30, 0xDD	; 221
    474e:	fe 4f       	sbci	r31, 0xFE	; 254
    4750:	60 81       	ld	r22, Z
    4752:	71 81       	ldd	r23, Z+1	; 0x01
    4754:	82 81       	ldd	r24, Z+2	; 0x02
    4756:	93 81       	ldd	r25, Z+3	; 0x03
    4758:	20 e0       	ldi	r18, 0x00	; 0
    475a:	30 e0       	ldi	r19, 0x00	; 0
    475c:	40 e2       	ldi	r20, 0x20	; 32
    475e:	51 e4       	ldi	r21, 0x41	; 65
    4760:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4764:	dc 01       	movw	r26, r24
    4766:	cb 01       	movw	r24, r22
    4768:	8e 01       	movw	r16, r28
    476a:	03 5e       	subi	r16, 0xE3	; 227
    476c:	1e 4f       	sbci	r17, 0xFE	; 254
    476e:	bc 01       	movw	r22, r24
    4770:	cd 01       	movw	r24, r26
    4772:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	f8 01       	movw	r30, r16
    477c:	91 83       	std	Z+1, r25	; 0x01
    477e:	80 83       	st	Z, r24
    4780:	1f c0       	rjmp	.+62     	; 0x47c0 <AmmeterMode+0xe72>
    4782:	fe 01       	movw	r30, r28
    4784:	e5 5e       	subi	r30, 0xE5	; 229
    4786:	fe 4f       	sbci	r31, 0xFE	; 254
    4788:	89 e1       	ldi	r24, 0x19	; 25
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	91 83       	std	Z+1, r25	; 0x01
    478e:	80 83       	st	Z, r24
    4790:	fe 01       	movw	r30, r28
    4792:	e5 5e       	subi	r30, 0xE5	; 229
    4794:	fe 4f       	sbci	r31, 0xFE	; 254
    4796:	80 81       	ld	r24, Z
    4798:	91 81       	ldd	r25, Z+1	; 0x01
    479a:	01 97       	sbiw	r24, 0x01	; 1
    479c:	f1 f7       	brne	.-4      	; 0x479a <AmmeterMode+0xe4c>
    479e:	fe 01       	movw	r30, r28
    47a0:	e5 5e       	subi	r30, 0xE5	; 229
    47a2:	fe 4f       	sbci	r31, 0xFE	; 254
    47a4:	91 83       	std	Z+1, r25	; 0x01
    47a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47a8:	de 01       	movw	r26, r28
    47aa:	a3 5e       	subi	r26, 0xE3	; 227
    47ac:	be 4f       	sbci	r27, 0xFE	; 254
    47ae:	fe 01       	movw	r30, r28
    47b0:	e3 5e       	subi	r30, 0xE3	; 227
    47b2:	fe 4f       	sbci	r31, 0xFE	; 254
    47b4:	80 81       	ld	r24, Z
    47b6:	91 81       	ldd	r25, Z+1	; 0x01
    47b8:	01 97       	sbiw	r24, 0x01	; 1
    47ba:	11 96       	adiw	r26, 0x01	; 1
    47bc:	9c 93       	st	X, r25
    47be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c0:	fe 01       	movw	r30, r28
    47c2:	e3 5e       	subi	r30, 0xE3	; 227
    47c4:	fe 4f       	sbci	r31, 0xFE	; 254
    47c6:	80 81       	ld	r24, Z
    47c8:	91 81       	ldd	r25, Z+1	; 0x01
    47ca:	00 97       	sbiw	r24, 0x00	; 0
    47cc:	d1 f6       	brne	.-76     	; 0x4782 <AmmeterMode+0xe34>
    47ce:	27 c0       	rjmp	.+78     	; 0x481e <AmmeterMode+0xed0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47d0:	8e 01       	movw	r16, r28
    47d2:	03 5e       	subi	r16, 0xE3	; 227
    47d4:	1e 4f       	sbci	r17, 0xFE	; 254
    47d6:	fe 01       	movw	r30, r28
    47d8:	e1 5e       	subi	r30, 0xE1	; 225
    47da:	fe 4f       	sbci	r31, 0xFE	; 254
    47dc:	60 81       	ld	r22, Z
    47de:	71 81       	ldd	r23, Z+1	; 0x01
    47e0:	82 81       	ldd	r24, Z+2	; 0x02
    47e2:	93 81       	ldd	r25, Z+3	; 0x03
    47e4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	f8 01       	movw	r30, r16
    47ee:	91 83       	std	Z+1, r25	; 0x01
    47f0:	80 83       	st	Z, r24
    47f2:	de 01       	movw	r26, r28
    47f4:	a7 5e       	subi	r26, 0xE7	; 231
    47f6:	be 4f       	sbci	r27, 0xFE	; 254
    47f8:	fe 01       	movw	r30, r28
    47fa:	e3 5e       	subi	r30, 0xE3	; 227
    47fc:	fe 4f       	sbci	r31, 0xFE	; 254
    47fe:	80 81       	ld	r24, Z
    4800:	91 81       	ldd	r25, Z+1	; 0x01
    4802:	8d 93       	st	X+, r24
    4804:	9c 93       	st	X, r25
    4806:	fe 01       	movw	r30, r28
    4808:	e7 5e       	subi	r30, 0xE7	; 231
    480a:	fe 4f       	sbci	r31, 0xFE	; 254
    480c:	80 81       	ld	r24, Z
    480e:	91 81       	ldd	r25, Z+1	; 0x01
    4810:	01 97       	sbiw	r24, 0x01	; 1
    4812:	f1 f7       	brne	.-4      	; 0x4810 <AmmeterMode+0xec2>
    4814:	fe 01       	movw	r30, r28
    4816:	e7 5e       	subi	r30, 0xE7	; 231
    4818:	fe 4f       	sbci	r31, 0xFE	; 254
    481a:	91 83       	std	Z+1, r25	; 0x01
    481c:	80 83       	st	Z, r24
				_delay_ms(1000);
				if (adc1>=100)
    481e:	80 91 30 02 	lds	r24, 0x0230
    4822:	90 91 31 02 	lds	r25, 0x0231
    4826:	a0 91 32 02 	lds	r26, 0x0232
    482a:	b0 91 33 02 	lds	r27, 0x0233
    482e:	bc 01       	movw	r22, r24
    4830:	cd 01       	movw	r24, r26
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	48 ec       	ldi	r20, 0xC8	; 200
    4838:	52 e4       	ldi	r21, 0x42	; 66
    483a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
    483e:	88 23       	and	r24, r24
    4840:	0c f4       	brge	.+2      	; 0x4844 <AmmeterMode+0xef6>
    4842:	b9 c1       	rjmp	.+882    	; 0x4bb6 <AmmeterMode+0x1268>
				{
					LCD_clearScreen();
    4844:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
					LCD_displayString("2nd range");
    4848:	8d ee       	ldi	r24, 0xED	; 237
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    4850:	fe 01       	movw	r30, r28
    4852:	eb 5e       	subi	r30, 0xEB	; 235
    4854:	fe 4f       	sbci	r31, 0xFE	; 254
    4856:	80 e0       	ldi	r24, 0x00	; 0
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	a8 e4       	ldi	r26, 0x48	; 72
    485c:	b3 e4       	ldi	r27, 0x43	; 67
    485e:	80 83       	st	Z, r24
    4860:	91 83       	std	Z+1, r25	; 0x01
    4862:	a2 83       	std	Z+2, r26	; 0x02
    4864:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4866:	8e 01       	movw	r16, r28
    4868:	0f 5e       	subi	r16, 0xEF	; 239
    486a:	1e 4f       	sbci	r17, 0xFE	; 254
    486c:	fe 01       	movw	r30, r28
    486e:	eb 5e       	subi	r30, 0xEB	; 235
    4870:	fe 4f       	sbci	r31, 0xFE	; 254
    4872:	60 81       	ld	r22, Z
    4874:	71 81       	ldd	r23, Z+1	; 0x01
    4876:	82 81       	ldd	r24, Z+2	; 0x02
    4878:	93 81       	ldd	r25, Z+3	; 0x03
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	4a e7       	ldi	r20, 0x7A	; 122
    4880:	53 e4       	ldi	r21, 0x43	; 67
    4882:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4886:	dc 01       	movw	r26, r24
    4888:	cb 01       	movw	r24, r22
    488a:	f8 01       	movw	r30, r16
    488c:	80 83       	st	Z, r24
    488e:	91 83       	std	Z+1, r25	; 0x01
    4890:	a2 83       	std	Z+2, r26	; 0x02
    4892:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4894:	fe 01       	movw	r30, r28
    4896:	ef 5e       	subi	r30, 0xEF	; 239
    4898:	fe 4f       	sbci	r31, 0xFE	; 254
    489a:	60 81       	ld	r22, Z
    489c:	71 81       	ldd	r23, Z+1	; 0x01
    489e:	82 81       	ldd	r24, Z+2	; 0x02
    48a0:	93 81       	ldd	r25, Z+3	; 0x03
    48a2:	20 e0       	ldi	r18, 0x00	; 0
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	40 e8       	ldi	r20, 0x80	; 128
    48a8:	5f e3       	ldi	r21, 0x3F	; 63
    48aa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    48ae:	88 23       	and	r24, r24
    48b0:	44 f4       	brge	.+16     	; 0x48c2 <AmmeterMode+0xf74>
		__ticks = 1;
    48b2:	fe 01       	movw	r30, r28
    48b4:	e1 5f       	subi	r30, 0xF1	; 241
    48b6:	fe 4f       	sbci	r31, 0xFE	; 254
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	91 83       	std	Z+1, r25	; 0x01
    48be:	80 83       	st	Z, r24
    48c0:	64 c0       	rjmp	.+200    	; 0x498a <AmmeterMode+0x103c>
	else if (__tmp > 65535)
    48c2:	fe 01       	movw	r30, r28
    48c4:	ef 5e       	subi	r30, 0xEF	; 239
    48c6:	fe 4f       	sbci	r31, 0xFE	; 254
    48c8:	60 81       	ld	r22, Z
    48ca:	71 81       	ldd	r23, Z+1	; 0x01
    48cc:	82 81       	ldd	r24, Z+2	; 0x02
    48ce:	93 81       	ldd	r25, Z+3	; 0x03
    48d0:	20 e0       	ldi	r18, 0x00	; 0
    48d2:	3f ef       	ldi	r19, 0xFF	; 255
    48d4:	4f e7       	ldi	r20, 0x7F	; 127
    48d6:	57 e4       	ldi	r21, 0x47	; 71
    48d8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    48dc:	18 16       	cp	r1, r24
    48de:	0c f0       	brlt	.+2      	; 0x48e2 <AmmeterMode+0xf94>
    48e0:	43 c0       	rjmp	.+134    	; 0x4968 <AmmeterMode+0x101a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48e2:	fe 01       	movw	r30, r28
    48e4:	eb 5e       	subi	r30, 0xEB	; 235
    48e6:	fe 4f       	sbci	r31, 0xFE	; 254
    48e8:	60 81       	ld	r22, Z
    48ea:	71 81       	ldd	r23, Z+1	; 0x01
    48ec:	82 81       	ldd	r24, Z+2	; 0x02
    48ee:	93 81       	ldd	r25, Z+3	; 0x03
    48f0:	20 e0       	ldi	r18, 0x00	; 0
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	40 e2       	ldi	r20, 0x20	; 32
    48f6:	51 e4       	ldi	r21, 0x41	; 65
    48f8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    48fc:	dc 01       	movw	r26, r24
    48fe:	cb 01       	movw	r24, r22
    4900:	8e 01       	movw	r16, r28
    4902:	01 5f       	subi	r16, 0xF1	; 241
    4904:	1e 4f       	sbci	r17, 0xFE	; 254
    4906:	bc 01       	movw	r22, r24
    4908:	cd 01       	movw	r24, r26
    490a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    490e:	dc 01       	movw	r26, r24
    4910:	cb 01       	movw	r24, r22
    4912:	f8 01       	movw	r30, r16
    4914:	91 83       	std	Z+1, r25	; 0x01
    4916:	80 83       	st	Z, r24
    4918:	1f c0       	rjmp	.+62     	; 0x4958 <AmmeterMode+0x100a>
    491a:	fe 01       	movw	r30, r28
    491c:	e3 5f       	subi	r30, 0xF3	; 243
    491e:	fe 4f       	sbci	r31, 0xFE	; 254
    4920:	89 e1       	ldi	r24, 0x19	; 25
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	91 83       	std	Z+1, r25	; 0x01
    4926:	80 83       	st	Z, r24
    4928:	fe 01       	movw	r30, r28
    492a:	e3 5f       	subi	r30, 0xF3	; 243
    492c:	fe 4f       	sbci	r31, 0xFE	; 254
    492e:	80 81       	ld	r24, Z
    4930:	91 81       	ldd	r25, Z+1	; 0x01
    4932:	01 97       	sbiw	r24, 0x01	; 1
    4934:	f1 f7       	brne	.-4      	; 0x4932 <AmmeterMode+0xfe4>
    4936:	fe 01       	movw	r30, r28
    4938:	e3 5f       	subi	r30, 0xF3	; 243
    493a:	fe 4f       	sbci	r31, 0xFE	; 254
    493c:	91 83       	std	Z+1, r25	; 0x01
    493e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4940:	de 01       	movw	r26, r28
    4942:	a1 5f       	subi	r26, 0xF1	; 241
    4944:	be 4f       	sbci	r27, 0xFE	; 254
    4946:	fe 01       	movw	r30, r28
    4948:	e1 5f       	subi	r30, 0xF1	; 241
    494a:	fe 4f       	sbci	r31, 0xFE	; 254
    494c:	80 81       	ld	r24, Z
    494e:	91 81       	ldd	r25, Z+1	; 0x01
    4950:	01 97       	sbiw	r24, 0x01	; 1
    4952:	11 96       	adiw	r26, 0x01	; 1
    4954:	9c 93       	st	X, r25
    4956:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4958:	fe 01       	movw	r30, r28
    495a:	e1 5f       	subi	r30, 0xF1	; 241
    495c:	fe 4f       	sbci	r31, 0xFE	; 254
    495e:	80 81       	ld	r24, Z
    4960:	91 81       	ldd	r25, Z+1	; 0x01
    4962:	00 97       	sbiw	r24, 0x00	; 0
    4964:	d1 f6       	brne	.-76     	; 0x491a <AmmeterMode+0xfcc>
    4966:	27 c0       	rjmp	.+78     	; 0x49b6 <AmmeterMode+0x1068>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4968:	8e 01       	movw	r16, r28
    496a:	01 5f       	subi	r16, 0xF1	; 241
    496c:	1e 4f       	sbci	r17, 0xFE	; 254
    496e:	fe 01       	movw	r30, r28
    4970:	ef 5e       	subi	r30, 0xEF	; 239
    4972:	fe 4f       	sbci	r31, 0xFE	; 254
    4974:	60 81       	ld	r22, Z
    4976:	71 81       	ldd	r23, Z+1	; 0x01
    4978:	82 81       	ldd	r24, Z+2	; 0x02
    497a:	93 81       	ldd	r25, Z+3	; 0x03
    497c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4980:	dc 01       	movw	r26, r24
    4982:	cb 01       	movw	r24, r22
    4984:	f8 01       	movw	r30, r16
    4986:	91 83       	std	Z+1, r25	; 0x01
    4988:	80 83       	st	Z, r24
    498a:	de 01       	movw	r26, r28
    498c:	a5 5f       	subi	r26, 0xF5	; 245
    498e:	be 4f       	sbci	r27, 0xFE	; 254
    4990:	fe 01       	movw	r30, r28
    4992:	e1 5f       	subi	r30, 0xF1	; 241
    4994:	fe 4f       	sbci	r31, 0xFE	; 254
    4996:	80 81       	ld	r24, Z
    4998:	91 81       	ldd	r25, Z+1	; 0x01
    499a:	8d 93       	st	X+, r24
    499c:	9c 93       	st	X, r25
    499e:	fe 01       	movw	r30, r28
    49a0:	e5 5f       	subi	r30, 0xF5	; 245
    49a2:	fe 4f       	sbci	r31, 0xFE	; 254
    49a4:	80 81       	ld	r24, Z
    49a6:	91 81       	ldd	r25, Z+1	; 0x01
    49a8:	01 97       	sbiw	r24, 0x01	; 1
    49aa:	f1 f7       	brne	.-4      	; 0x49a8 <AmmeterMode+0x105a>
    49ac:	fe 01       	movw	r30, r28
    49ae:	e5 5f       	subi	r30, 0xF5	; 245
    49b0:	fe 4f       	sbci	r31, 0xFE	; 254
    49b2:	91 83       	std	Z+1, r25	; 0x01
    49b4:	80 83       	st	Z, r24
					_delay_ms(200);
					Vout = adc1*(5.0/1023);
    49b6:	80 91 30 02 	lds	r24, 0x0230
    49ba:	90 91 31 02 	lds	r25, 0x0231
    49be:	a0 91 32 02 	lds	r26, 0x0232
    49c2:	b0 91 33 02 	lds	r27, 0x0233
    49c6:	bc 01       	movw	r22, r24
    49c8:	cd 01       	movw	r24, r26
    49ca:	2a e0       	ldi	r18, 0x0A	; 10
    49cc:	38 e2       	ldi	r19, 0x28	; 40
    49ce:	40 ea       	ldi	r20, 0xA0	; 160
    49d0:	5b e3       	ldi	r21, 0x3B	; 59
    49d2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    49d6:	dc 01       	movw	r26, r24
    49d8:	cb 01       	movw	r24, r22
    49da:	80 93 38 02 	sts	0x0238, r24
    49de:	90 93 39 02 	sts	0x0239, r25
    49e2:	a0 93 3a 02 	sts	0x023A, r26
    49e6:	b0 93 3b 02 	sts	0x023B, r27
					amp=Vout/(10.0*4.5); //Range 10:100mA (Rs=4.5)
    49ea:	80 91 38 02 	lds	r24, 0x0238
    49ee:	90 91 39 02 	lds	r25, 0x0239
    49f2:	a0 91 3a 02 	lds	r26, 0x023A
    49f6:	b0 91 3b 02 	lds	r27, 0x023B
    49fa:	bc 01       	movw	r22, r24
    49fc:	cd 01       	movw	r24, r26
    49fe:	20 e0       	ldi	r18, 0x00	; 0
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	44 e3       	ldi	r20, 0x34	; 52
    4a04:	52 e4       	ldi	r21, 0x42	; 66
    4a06:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    4a0a:	dc 01       	movw	r26, r24
    4a0c:	cb 01       	movw	r24, r22
    4a0e:	80 93 24 02 	sts	0x0224, r24
    4a12:	90 93 25 02 	sts	0x0225, r25
    4a16:	a0 93 26 02 	sts	0x0226, r26
    4a1a:	b0 93 27 02 	sts	0x0227, r27
					LCD_clearScreen();
    4a1e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
					LCD_displayString("Amp=");
    4a22:	8b ed       	ldi	r24, 0xDB	; 219
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
					LCD_displayFloat(amp,5);
    4a2a:	80 91 24 02 	lds	r24, 0x0224
    4a2e:	90 91 25 02 	lds	r25, 0x0225
    4a32:	a0 91 26 02 	lds	r26, 0x0226
    4a36:	b0 91 27 02 	lds	r27, 0x0227
    4a3a:	bc 01       	movw	r22, r24
    4a3c:	cd 01       	movw	r24, r26
    4a3e:	45 e0       	ldi	r20, 0x05	; 5
    4a40:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    4a44:	fe 01       	movw	r30, r28
    4a46:	e9 5f       	subi	r30, 0xF9	; 249
    4a48:	fe 4f       	sbci	r31, 0xFE	; 254
    4a4a:	80 e0       	ldi	r24, 0x00	; 0
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	aa e7       	ldi	r26, 0x7A	; 122
    4a50:	b4 e4       	ldi	r27, 0x44	; 68
    4a52:	80 83       	st	Z, r24
    4a54:	91 83       	std	Z+1, r25	; 0x01
    4a56:	a2 83       	std	Z+2, r26	; 0x02
    4a58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a5a:	8e 01       	movw	r16, r28
    4a5c:	0d 5f       	subi	r16, 0xFD	; 253
    4a5e:	1e 4f       	sbci	r17, 0xFE	; 254
    4a60:	fe 01       	movw	r30, r28
    4a62:	e9 5f       	subi	r30, 0xF9	; 249
    4a64:	fe 4f       	sbci	r31, 0xFE	; 254
    4a66:	60 81       	ld	r22, Z
    4a68:	71 81       	ldd	r23, Z+1	; 0x01
    4a6a:	82 81       	ldd	r24, Z+2	; 0x02
    4a6c:	93 81       	ldd	r25, Z+3	; 0x03
    4a6e:	20 e0       	ldi	r18, 0x00	; 0
    4a70:	30 e0       	ldi	r19, 0x00	; 0
    4a72:	4a e7       	ldi	r20, 0x7A	; 122
    4a74:	53 e4       	ldi	r21, 0x43	; 67
    4a76:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	cb 01       	movw	r24, r22
    4a7e:	f8 01       	movw	r30, r16
    4a80:	80 83       	st	Z, r24
    4a82:	91 83       	std	Z+1, r25	; 0x01
    4a84:	a2 83       	std	Z+2, r26	; 0x02
    4a86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a88:	fe 01       	movw	r30, r28
    4a8a:	ed 5f       	subi	r30, 0xFD	; 253
    4a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a8e:	60 81       	ld	r22, Z
    4a90:	71 81       	ldd	r23, Z+1	; 0x01
    4a92:	82 81       	ldd	r24, Z+2	; 0x02
    4a94:	93 81       	ldd	r25, Z+3	; 0x03
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	40 e8       	ldi	r20, 0x80	; 128
    4a9c:	5f e3       	ldi	r21, 0x3F	; 63
    4a9e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4aa2:	88 23       	and	r24, r24
    4aa4:	44 f4       	brge	.+16     	; 0x4ab6 <AmmeterMode+0x1168>
		__ticks = 1;
    4aa6:	fe 01       	movw	r30, r28
    4aa8:	ef 5f       	subi	r30, 0xFF	; 255
    4aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    4aac:	81 e0       	ldi	r24, 0x01	; 1
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	91 83       	std	Z+1, r25	; 0x01
    4ab2:	80 83       	st	Z, r24
    4ab4:	64 c0       	rjmp	.+200    	; 0x4b7e <AmmeterMode+0x1230>
	else if (__tmp > 65535)
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	ed 5f       	subi	r30, 0xFD	; 253
    4aba:	fe 4f       	sbci	r31, 0xFE	; 254
    4abc:	60 81       	ld	r22, Z
    4abe:	71 81       	ldd	r23, Z+1	; 0x01
    4ac0:	82 81       	ldd	r24, Z+2	; 0x02
    4ac2:	93 81       	ldd	r25, Z+3	; 0x03
    4ac4:	20 e0       	ldi	r18, 0x00	; 0
    4ac6:	3f ef       	ldi	r19, 0xFF	; 255
    4ac8:	4f e7       	ldi	r20, 0x7F	; 127
    4aca:	57 e4       	ldi	r21, 0x47	; 71
    4acc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4ad0:	18 16       	cp	r1, r24
    4ad2:	0c f0       	brlt	.+2      	; 0x4ad6 <AmmeterMode+0x1188>
    4ad4:	43 c0       	rjmp	.+134    	; 0x4b5c <AmmeterMode+0x120e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ad6:	fe 01       	movw	r30, r28
    4ad8:	e9 5f       	subi	r30, 0xF9	; 249
    4ada:	fe 4f       	sbci	r31, 0xFE	; 254
    4adc:	60 81       	ld	r22, Z
    4ade:	71 81       	ldd	r23, Z+1	; 0x01
    4ae0:	82 81       	ldd	r24, Z+2	; 0x02
    4ae2:	93 81       	ldd	r25, Z+3	; 0x03
    4ae4:	20 e0       	ldi	r18, 0x00	; 0
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	40 e2       	ldi	r20, 0x20	; 32
    4aea:	51 e4       	ldi	r21, 0x41	; 65
    4aec:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4af0:	dc 01       	movw	r26, r24
    4af2:	cb 01       	movw	r24, r22
    4af4:	8e 01       	movw	r16, r28
    4af6:	0f 5f       	subi	r16, 0xFF	; 255
    4af8:	1e 4f       	sbci	r17, 0xFE	; 254
    4afa:	bc 01       	movw	r22, r24
    4afc:	cd 01       	movw	r24, r26
    4afe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4b02:	dc 01       	movw	r26, r24
    4b04:	cb 01       	movw	r24, r22
    4b06:	f8 01       	movw	r30, r16
    4b08:	91 83       	std	Z+1, r25	; 0x01
    4b0a:	80 83       	st	Z, r24
    4b0c:	1f c0       	rjmp	.+62     	; 0x4b4c <AmmeterMode+0x11fe>
    4b0e:	fe 01       	movw	r30, r28
    4b10:	e1 50       	subi	r30, 0x01	; 1
    4b12:	ff 4f       	sbci	r31, 0xFF	; 255
    4b14:	89 e1       	ldi	r24, 0x19	; 25
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	91 83       	std	Z+1, r25	; 0x01
    4b1a:	80 83       	st	Z, r24
    4b1c:	fe 01       	movw	r30, r28
    4b1e:	e1 50       	subi	r30, 0x01	; 1
    4b20:	ff 4f       	sbci	r31, 0xFF	; 255
    4b22:	80 81       	ld	r24, Z
    4b24:	91 81       	ldd	r25, Z+1	; 0x01
    4b26:	01 97       	sbiw	r24, 0x01	; 1
    4b28:	f1 f7       	brne	.-4      	; 0x4b26 <AmmeterMode+0x11d8>
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	e1 50       	subi	r30, 0x01	; 1
    4b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b30:	91 83       	std	Z+1, r25	; 0x01
    4b32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b34:	de 01       	movw	r26, r28
    4b36:	af 5f       	subi	r26, 0xFF	; 255
    4b38:	be 4f       	sbci	r27, 0xFE	; 254
    4b3a:	fe 01       	movw	r30, r28
    4b3c:	ef 5f       	subi	r30, 0xFF	; 255
    4b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b40:	80 81       	ld	r24, Z
    4b42:	91 81       	ldd	r25, Z+1	; 0x01
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	11 96       	adiw	r26, 0x01	; 1
    4b48:	9c 93       	st	X, r25
    4b4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	ef 5f       	subi	r30, 0xFF	; 255
    4b50:	fe 4f       	sbci	r31, 0xFE	; 254
    4b52:	80 81       	ld	r24, Z
    4b54:	91 81       	ldd	r25, Z+1	; 0x01
    4b56:	00 97       	sbiw	r24, 0x00	; 0
    4b58:	d1 f6       	brne	.-76     	; 0x4b0e <AmmeterMode+0x11c0>
    4b5a:	27 c0       	rjmp	.+78     	; 0x4baa <AmmeterMode+0x125c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b5c:	8e 01       	movw	r16, r28
    4b5e:	0f 5f       	subi	r16, 0xFF	; 255
    4b60:	1e 4f       	sbci	r17, 0xFE	; 254
    4b62:	fe 01       	movw	r30, r28
    4b64:	ed 5f       	subi	r30, 0xFD	; 253
    4b66:	fe 4f       	sbci	r31, 0xFE	; 254
    4b68:	60 81       	ld	r22, Z
    4b6a:	71 81       	ldd	r23, Z+1	; 0x01
    4b6c:	82 81       	ldd	r24, Z+2	; 0x02
    4b6e:	93 81       	ldd	r25, Z+3	; 0x03
    4b70:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4b74:	dc 01       	movw	r26, r24
    4b76:	cb 01       	movw	r24, r22
    4b78:	f8 01       	movw	r30, r16
    4b7a:	91 83       	std	Z+1, r25	; 0x01
    4b7c:	80 83       	st	Z, r24
    4b7e:	de 01       	movw	r26, r28
    4b80:	a3 50       	subi	r26, 0x03	; 3
    4b82:	bf 4f       	sbci	r27, 0xFF	; 255
    4b84:	fe 01       	movw	r30, r28
    4b86:	ef 5f       	subi	r30, 0xFF	; 255
    4b88:	fe 4f       	sbci	r31, 0xFE	; 254
    4b8a:	80 81       	ld	r24, Z
    4b8c:	91 81       	ldd	r25, Z+1	; 0x01
    4b8e:	8d 93       	st	X+, r24
    4b90:	9c 93       	st	X, r25
    4b92:	fe 01       	movw	r30, r28
    4b94:	e3 50       	subi	r30, 0x03	; 3
    4b96:	ff 4f       	sbci	r31, 0xFF	; 255
    4b98:	80 81       	ld	r24, Z
    4b9a:	91 81       	ldd	r25, Z+1	; 0x01
    4b9c:	01 97       	sbiw	r24, 0x01	; 1
    4b9e:	f1 f7       	brne	.-4      	; 0x4b9c <AmmeterMode+0x124e>
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	e3 50       	subi	r30, 0x03	; 3
    4ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba6:	91 83       	std	Z+1, r25	; 0x01
    4ba8:	80 83       	st	Z, r24
					_delay_ms(1000);
					LCD_clearScreen();
    4baa:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
					num=0;
    4bae:	10 92 22 02 	sts	0x0222, r1
    4bb2:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <AmmeterMode+0x308e>
				}
				else
				{
					LCD_clearScreen();
    4bb6:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
					LCD_displayString("1st range");
    4bba:	87 ef       	ldi	r24, 0xF7	; 247
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    4bc2:	fe 01       	movw	r30, r28
    4bc4:	e7 50       	subi	r30, 0x07	; 7
    4bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc8:	80 e0       	ldi	r24, 0x00	; 0
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	a8 e4       	ldi	r26, 0x48	; 72
    4bce:	b3 e4       	ldi	r27, 0x43	; 67
    4bd0:	80 83       	st	Z, r24
    4bd2:	91 83       	std	Z+1, r25	; 0x01
    4bd4:	a2 83       	std	Z+2, r26	; 0x02
    4bd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bd8:	8e 01       	movw	r16, r28
    4bda:	0b 50       	subi	r16, 0x0B	; 11
    4bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bde:	fe 01       	movw	r30, r28
    4be0:	e7 50       	subi	r30, 0x07	; 7
    4be2:	ff 4f       	sbci	r31, 0xFF	; 255
    4be4:	60 81       	ld	r22, Z
    4be6:	71 81       	ldd	r23, Z+1	; 0x01
    4be8:	82 81       	ldd	r24, Z+2	; 0x02
    4bea:	93 81       	ldd	r25, Z+3	; 0x03
    4bec:	20 e0       	ldi	r18, 0x00	; 0
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	4a e7       	ldi	r20, 0x7A	; 122
    4bf2:	53 e4       	ldi	r21, 0x43	; 67
    4bf4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4bf8:	dc 01       	movw	r26, r24
    4bfa:	cb 01       	movw	r24, r22
    4bfc:	f8 01       	movw	r30, r16
    4bfe:	80 83       	st	Z, r24
    4c00:	91 83       	std	Z+1, r25	; 0x01
    4c02:	a2 83       	std	Z+2, r26	; 0x02
    4c04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c06:	fe 01       	movw	r30, r28
    4c08:	eb 50       	subi	r30, 0x0B	; 11
    4c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0c:	60 81       	ld	r22, Z
    4c0e:	71 81       	ldd	r23, Z+1	; 0x01
    4c10:	82 81       	ldd	r24, Z+2	; 0x02
    4c12:	93 81       	ldd	r25, Z+3	; 0x03
    4c14:	20 e0       	ldi	r18, 0x00	; 0
    4c16:	30 e0       	ldi	r19, 0x00	; 0
    4c18:	40 e8       	ldi	r20, 0x80	; 128
    4c1a:	5f e3       	ldi	r21, 0x3F	; 63
    4c1c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4c20:	88 23       	and	r24, r24
    4c22:	44 f4       	brge	.+16     	; 0x4c34 <AmmeterMode+0x12e6>
		__ticks = 1;
    4c24:	fe 01       	movw	r30, r28
    4c26:	ed 50       	subi	r30, 0x0D	; 13
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	81 e0       	ldi	r24, 0x01	; 1
    4c2c:	90 e0       	ldi	r25, 0x00	; 0
    4c2e:	91 83       	std	Z+1, r25	; 0x01
    4c30:	80 83       	st	Z, r24
    4c32:	64 c0       	rjmp	.+200    	; 0x4cfc <AmmeterMode+0x13ae>
	else if (__tmp > 65535)
    4c34:	fe 01       	movw	r30, r28
    4c36:	eb 50       	subi	r30, 0x0B	; 11
    4c38:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3a:	60 81       	ld	r22, Z
    4c3c:	71 81       	ldd	r23, Z+1	; 0x01
    4c3e:	82 81       	ldd	r24, Z+2	; 0x02
    4c40:	93 81       	ldd	r25, Z+3	; 0x03
    4c42:	20 e0       	ldi	r18, 0x00	; 0
    4c44:	3f ef       	ldi	r19, 0xFF	; 255
    4c46:	4f e7       	ldi	r20, 0x7F	; 127
    4c48:	57 e4       	ldi	r21, 0x47	; 71
    4c4a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4c4e:	18 16       	cp	r1, r24
    4c50:	0c f0       	brlt	.+2      	; 0x4c54 <AmmeterMode+0x1306>
    4c52:	43 c0       	rjmp	.+134    	; 0x4cda <AmmeterMode+0x138c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c54:	fe 01       	movw	r30, r28
    4c56:	e7 50       	subi	r30, 0x07	; 7
    4c58:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5a:	60 81       	ld	r22, Z
    4c5c:	71 81       	ldd	r23, Z+1	; 0x01
    4c5e:	82 81       	ldd	r24, Z+2	; 0x02
    4c60:	93 81       	ldd	r25, Z+3	; 0x03
    4c62:	20 e0       	ldi	r18, 0x00	; 0
    4c64:	30 e0       	ldi	r19, 0x00	; 0
    4c66:	40 e2       	ldi	r20, 0x20	; 32
    4c68:	51 e4       	ldi	r21, 0x41	; 65
    4c6a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4c6e:	dc 01       	movw	r26, r24
    4c70:	cb 01       	movw	r24, r22
    4c72:	8e 01       	movw	r16, r28
    4c74:	0d 50       	subi	r16, 0x0D	; 13
    4c76:	1f 4f       	sbci	r17, 0xFF	; 255
    4c78:	bc 01       	movw	r22, r24
    4c7a:	cd 01       	movw	r24, r26
    4c7c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4c80:	dc 01       	movw	r26, r24
    4c82:	cb 01       	movw	r24, r22
    4c84:	f8 01       	movw	r30, r16
    4c86:	91 83       	std	Z+1, r25	; 0x01
    4c88:	80 83       	st	Z, r24
    4c8a:	1f c0       	rjmp	.+62     	; 0x4cca <AmmeterMode+0x137c>
    4c8c:	fe 01       	movw	r30, r28
    4c8e:	ef 50       	subi	r30, 0x0F	; 15
    4c90:	ff 4f       	sbci	r31, 0xFF	; 255
    4c92:	89 e1       	ldi	r24, 0x19	; 25
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	91 83       	std	Z+1, r25	; 0x01
    4c98:	80 83       	st	Z, r24
    4c9a:	fe 01       	movw	r30, r28
    4c9c:	ef 50       	subi	r30, 0x0F	; 15
    4c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca0:	80 81       	ld	r24, Z
    4ca2:	91 81       	ldd	r25, Z+1	; 0x01
    4ca4:	01 97       	sbiw	r24, 0x01	; 1
    4ca6:	f1 f7       	brne	.-4      	; 0x4ca4 <AmmeterMode+0x1356>
    4ca8:	fe 01       	movw	r30, r28
    4caa:	ef 50       	subi	r30, 0x0F	; 15
    4cac:	ff 4f       	sbci	r31, 0xFF	; 255
    4cae:	91 83       	std	Z+1, r25	; 0x01
    4cb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cb2:	de 01       	movw	r26, r28
    4cb4:	ad 50       	subi	r26, 0x0D	; 13
    4cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb8:	fe 01       	movw	r30, r28
    4cba:	ed 50       	subi	r30, 0x0D	; 13
    4cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbe:	80 81       	ld	r24, Z
    4cc0:	91 81       	ldd	r25, Z+1	; 0x01
    4cc2:	01 97       	sbiw	r24, 0x01	; 1
    4cc4:	11 96       	adiw	r26, 0x01	; 1
    4cc6:	9c 93       	st	X, r25
    4cc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cca:	fe 01       	movw	r30, r28
    4ccc:	ed 50       	subi	r30, 0x0D	; 13
    4cce:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd0:	80 81       	ld	r24, Z
    4cd2:	91 81       	ldd	r25, Z+1	; 0x01
    4cd4:	00 97       	sbiw	r24, 0x00	; 0
    4cd6:	d1 f6       	brne	.-76     	; 0x4c8c <AmmeterMode+0x133e>
    4cd8:	27 c0       	rjmp	.+78     	; 0x4d28 <AmmeterMode+0x13da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cda:	8e 01       	movw	r16, r28
    4cdc:	0d 50       	subi	r16, 0x0D	; 13
    4cde:	1f 4f       	sbci	r17, 0xFF	; 255
    4ce0:	fe 01       	movw	r30, r28
    4ce2:	eb 50       	subi	r30, 0x0B	; 11
    4ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce6:	60 81       	ld	r22, Z
    4ce8:	71 81       	ldd	r23, Z+1	; 0x01
    4cea:	82 81       	ldd	r24, Z+2	; 0x02
    4cec:	93 81       	ldd	r25, Z+3	; 0x03
    4cee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4cf2:	dc 01       	movw	r26, r24
    4cf4:	cb 01       	movw	r24, r22
    4cf6:	f8 01       	movw	r30, r16
    4cf8:	91 83       	std	Z+1, r25	; 0x01
    4cfa:	80 83       	st	Z, r24
    4cfc:	de 01       	movw	r26, r28
    4cfe:	a1 51       	subi	r26, 0x11	; 17
    4d00:	bf 4f       	sbci	r27, 0xFF	; 255
    4d02:	fe 01       	movw	r30, r28
    4d04:	ed 50       	subi	r30, 0x0D	; 13
    4d06:	ff 4f       	sbci	r31, 0xFF	; 255
    4d08:	80 81       	ld	r24, Z
    4d0a:	91 81       	ldd	r25, Z+1	; 0x01
    4d0c:	8d 93       	st	X+, r24
    4d0e:	9c 93       	st	X, r25
    4d10:	fe 01       	movw	r30, r28
    4d12:	e1 51       	subi	r30, 0x11	; 17
    4d14:	ff 4f       	sbci	r31, 0xFF	; 255
    4d16:	80 81       	ld	r24, Z
    4d18:	91 81       	ldd	r25, Z+1	; 0x01
    4d1a:	01 97       	sbiw	r24, 0x01	; 1
    4d1c:	f1 f7       	brne	.-4      	; 0x4d1a <AmmeterMode+0x13cc>
    4d1e:	fe 01       	movw	r30, r28
    4d20:	e1 51       	subi	r30, 0x11	; 17
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	91 83       	std	Z+1, r25	; 0x01
    4d26:	80 83       	st	Z, r24
					_delay_ms(200);

					GPIO_writePin(PORTA_ID, PIN5_ID, 1);
    4d28:	80 e0       	ldi	r24, 0x00	; 0
    4d2a:	65 e0       	ldi	r22, 0x05	; 5
    4d2c:	41 e0       	ldi	r20, 0x01	; 1
    4d2e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
					GPIO_writePin(PORTB_ID, PIN5_ID, 0);
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	65 e0       	ldi	r22, 0x05	; 5
    4d36:	40 e0       	ldi	r20, 0x00	; 0
    4d38:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
					GPIO_writePin(PORTB_ID, PIN6_ID, 0);
    4d3c:	81 e0       	ldi	r24, 0x01	; 1
    4d3e:	66 e0       	ldi	r22, 0x06	; 6
    4d40:	40 e0       	ldi	r20, 0x00	; 0
    4d42:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    4d46:	fe 01       	movw	r30, r28
    4d48:	e5 51       	subi	r30, 0x15	; 21
    4d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	a8 ec       	ldi	r26, 0xC8	; 200
    4d52:	b2 e4       	ldi	r27, 0x42	; 66
    4d54:	80 83       	st	Z, r24
    4d56:	91 83       	std	Z+1, r25	; 0x01
    4d58:	a2 83       	std	Z+2, r26	; 0x02
    4d5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d5c:	8e 01       	movw	r16, r28
    4d5e:	09 51       	subi	r16, 0x19	; 25
    4d60:	1f 4f       	sbci	r17, 0xFF	; 255
    4d62:	fe 01       	movw	r30, r28
    4d64:	e5 51       	subi	r30, 0x15	; 21
    4d66:	ff 4f       	sbci	r31, 0xFF	; 255
    4d68:	60 81       	ld	r22, Z
    4d6a:	71 81       	ldd	r23, Z+1	; 0x01
    4d6c:	82 81       	ldd	r24, Z+2	; 0x02
    4d6e:	93 81       	ldd	r25, Z+3	; 0x03
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	4a e7       	ldi	r20, 0x7A	; 122
    4d76:	53 e4       	ldi	r21, 0x43	; 67
    4d78:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	cb 01       	movw	r24, r22
    4d80:	f8 01       	movw	r30, r16
    4d82:	80 83       	st	Z, r24
    4d84:	91 83       	std	Z+1, r25	; 0x01
    4d86:	a2 83       	std	Z+2, r26	; 0x02
    4d88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d8a:	fe 01       	movw	r30, r28
    4d8c:	e9 51       	subi	r30, 0x19	; 25
    4d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d90:	60 81       	ld	r22, Z
    4d92:	71 81       	ldd	r23, Z+1	; 0x01
    4d94:	82 81       	ldd	r24, Z+2	; 0x02
    4d96:	93 81       	ldd	r25, Z+3	; 0x03
    4d98:	20 e0       	ldi	r18, 0x00	; 0
    4d9a:	30 e0       	ldi	r19, 0x00	; 0
    4d9c:	40 e8       	ldi	r20, 0x80	; 128
    4d9e:	5f e3       	ldi	r21, 0x3F	; 63
    4da0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4da4:	88 23       	and	r24, r24
    4da6:	44 f4       	brge	.+16     	; 0x4db8 <AmmeterMode+0x146a>
		__ticks = 1;
    4da8:	fe 01       	movw	r30, r28
    4daa:	eb 51       	subi	r30, 0x1B	; 27
    4dac:	ff 4f       	sbci	r31, 0xFF	; 255
    4dae:	81 e0       	ldi	r24, 0x01	; 1
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	91 83       	std	Z+1, r25	; 0x01
    4db4:	80 83       	st	Z, r24
    4db6:	64 c0       	rjmp	.+200    	; 0x4e80 <AmmeterMode+0x1532>
	else if (__tmp > 65535)
    4db8:	fe 01       	movw	r30, r28
    4dba:	e9 51       	subi	r30, 0x19	; 25
    4dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dbe:	60 81       	ld	r22, Z
    4dc0:	71 81       	ldd	r23, Z+1	; 0x01
    4dc2:	82 81       	ldd	r24, Z+2	; 0x02
    4dc4:	93 81       	ldd	r25, Z+3	; 0x03
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	3f ef       	ldi	r19, 0xFF	; 255
    4dca:	4f e7       	ldi	r20, 0x7F	; 127
    4dcc:	57 e4       	ldi	r21, 0x47	; 71
    4dce:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4dd2:	18 16       	cp	r1, r24
    4dd4:	0c f0       	brlt	.+2      	; 0x4dd8 <AmmeterMode+0x148a>
    4dd6:	43 c0       	rjmp	.+134    	; 0x4e5e <AmmeterMode+0x1510>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dd8:	fe 01       	movw	r30, r28
    4dda:	e5 51       	subi	r30, 0x15	; 21
    4ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dde:	60 81       	ld	r22, Z
    4de0:	71 81       	ldd	r23, Z+1	; 0x01
    4de2:	82 81       	ldd	r24, Z+2	; 0x02
    4de4:	93 81       	ldd	r25, Z+3	; 0x03
    4de6:	20 e0       	ldi	r18, 0x00	; 0
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	40 e2       	ldi	r20, 0x20	; 32
    4dec:	51 e4       	ldi	r21, 0x41	; 65
    4dee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4df2:	dc 01       	movw	r26, r24
    4df4:	cb 01       	movw	r24, r22
    4df6:	8e 01       	movw	r16, r28
    4df8:	0b 51       	subi	r16, 0x1B	; 27
    4dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    4dfc:	bc 01       	movw	r22, r24
    4dfe:	cd 01       	movw	r24, r26
    4e00:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4e04:	dc 01       	movw	r26, r24
    4e06:	cb 01       	movw	r24, r22
    4e08:	f8 01       	movw	r30, r16
    4e0a:	91 83       	std	Z+1, r25	; 0x01
    4e0c:	80 83       	st	Z, r24
    4e0e:	1f c0       	rjmp	.+62     	; 0x4e4e <AmmeterMode+0x1500>
    4e10:	fe 01       	movw	r30, r28
    4e12:	ed 51       	subi	r30, 0x1D	; 29
    4e14:	ff 4f       	sbci	r31, 0xFF	; 255
    4e16:	89 e1       	ldi	r24, 0x19	; 25
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	91 83       	std	Z+1, r25	; 0x01
    4e1c:	80 83       	st	Z, r24
    4e1e:	fe 01       	movw	r30, r28
    4e20:	ed 51       	subi	r30, 0x1D	; 29
    4e22:	ff 4f       	sbci	r31, 0xFF	; 255
    4e24:	80 81       	ld	r24, Z
    4e26:	91 81       	ldd	r25, Z+1	; 0x01
    4e28:	01 97       	sbiw	r24, 0x01	; 1
    4e2a:	f1 f7       	brne	.-4      	; 0x4e28 <AmmeterMode+0x14da>
    4e2c:	fe 01       	movw	r30, r28
    4e2e:	ed 51       	subi	r30, 0x1D	; 29
    4e30:	ff 4f       	sbci	r31, 0xFF	; 255
    4e32:	91 83       	std	Z+1, r25	; 0x01
    4e34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e36:	de 01       	movw	r26, r28
    4e38:	ab 51       	subi	r26, 0x1B	; 27
    4e3a:	bf 4f       	sbci	r27, 0xFF	; 255
    4e3c:	fe 01       	movw	r30, r28
    4e3e:	eb 51       	subi	r30, 0x1B	; 27
    4e40:	ff 4f       	sbci	r31, 0xFF	; 255
    4e42:	80 81       	ld	r24, Z
    4e44:	91 81       	ldd	r25, Z+1	; 0x01
    4e46:	01 97       	sbiw	r24, 0x01	; 1
    4e48:	11 96       	adiw	r26, 0x01	; 1
    4e4a:	9c 93       	st	X, r25
    4e4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e4e:	fe 01       	movw	r30, r28
    4e50:	eb 51       	subi	r30, 0x1B	; 27
    4e52:	ff 4f       	sbci	r31, 0xFF	; 255
    4e54:	80 81       	ld	r24, Z
    4e56:	91 81       	ldd	r25, Z+1	; 0x01
    4e58:	00 97       	sbiw	r24, 0x00	; 0
    4e5a:	d1 f6       	brne	.-76     	; 0x4e10 <AmmeterMode+0x14c2>
    4e5c:	27 c0       	rjmp	.+78     	; 0x4eac <AmmeterMode+0x155e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e5e:	8e 01       	movw	r16, r28
    4e60:	0b 51       	subi	r16, 0x1B	; 27
    4e62:	1f 4f       	sbci	r17, 0xFF	; 255
    4e64:	fe 01       	movw	r30, r28
    4e66:	e9 51       	subi	r30, 0x19	; 25
    4e68:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6a:	60 81       	ld	r22, Z
    4e6c:	71 81       	ldd	r23, Z+1	; 0x01
    4e6e:	82 81       	ldd	r24, Z+2	; 0x02
    4e70:	93 81       	ldd	r25, Z+3	; 0x03
    4e72:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4e76:	dc 01       	movw	r26, r24
    4e78:	cb 01       	movw	r24, r22
    4e7a:	f8 01       	movw	r30, r16
    4e7c:	91 83       	std	Z+1, r25	; 0x01
    4e7e:	80 83       	st	Z, r24
    4e80:	de 01       	movw	r26, r28
    4e82:	af 51       	subi	r26, 0x1F	; 31
    4e84:	bf 4f       	sbci	r27, 0xFF	; 255
    4e86:	fe 01       	movw	r30, r28
    4e88:	eb 51       	subi	r30, 0x1B	; 27
    4e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8c:	80 81       	ld	r24, Z
    4e8e:	91 81       	ldd	r25, Z+1	; 0x01
    4e90:	8d 93       	st	X+, r24
    4e92:	9c 93       	st	X, r25
    4e94:	fe 01       	movw	r30, r28
    4e96:	ef 51       	subi	r30, 0x1F	; 31
    4e98:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9a:	80 81       	ld	r24, Z
    4e9c:	91 81       	ldd	r25, Z+1	; 0x01
    4e9e:	01 97       	sbiw	r24, 0x01	; 1
    4ea0:	f1 f7       	brne	.-4      	; 0x4e9e <AmmeterMode+0x1550>
    4ea2:	fe 01       	movw	r30, r28
    4ea4:	ef 51       	subi	r30, 0x1F	; 31
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	91 83       	std	Z+1, r25	; 0x01
    4eaa:	80 83       	st	Z, r24
					_delay_ms(100);

					adc1=ADC_readChannel(1);
    4eac:	81 e0       	ldi	r24, 0x01	; 1
    4eae:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    4eb2:	cc 01       	movw	r24, r24
    4eb4:	a0 e0       	ldi	r26, 0x00	; 0
    4eb6:	b0 e0       	ldi	r27, 0x00	; 0
    4eb8:	bc 01       	movw	r22, r24
    4eba:	cd 01       	movw	r24, r26
    4ebc:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    4ec0:	dc 01       	movw	r26, r24
    4ec2:	cb 01       	movw	r24, r22
    4ec4:	80 93 30 02 	sts	0x0230, r24
    4ec8:	90 93 31 02 	sts	0x0231, r25
    4ecc:	a0 93 32 02 	sts	0x0232, r26
    4ed0:	b0 93 33 02 	sts	0x0233, r27
					LCD_clearScreen();
    4ed4:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
					LCD_displayString("ADC=");
    4ed8:	8c ec       	ldi	r24, 0xCC	; 204
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
					LCD_displayFloat(adc1,2);
    4ee0:	80 91 30 02 	lds	r24, 0x0230
    4ee4:	90 91 31 02 	lds	r25, 0x0231
    4ee8:	a0 91 32 02 	lds	r26, 0x0232
    4eec:	b0 91 33 02 	lds	r27, 0x0233
    4ef0:	bc 01       	movw	r22, r24
    4ef2:	cd 01       	movw	r24, r26
    4ef4:	42 e0       	ldi	r20, 0x02	; 2
    4ef6:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    4efa:	fe 01       	movw	r30, r28
    4efc:	e3 52       	subi	r30, 0x23	; 35
    4efe:	ff 4f       	sbci	r31, 0xFF	; 255
    4f00:	80 e0       	ldi	r24, 0x00	; 0
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	aa e7       	ldi	r26, 0x7A	; 122
    4f06:	b4 e4       	ldi	r27, 0x44	; 68
    4f08:	80 83       	st	Z, r24
    4f0a:	91 83       	std	Z+1, r25	; 0x01
    4f0c:	a2 83       	std	Z+2, r26	; 0x02
    4f0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f10:	8e 01       	movw	r16, r28
    4f12:	07 52       	subi	r16, 0x27	; 39
    4f14:	1f 4f       	sbci	r17, 0xFF	; 255
    4f16:	fe 01       	movw	r30, r28
    4f18:	e3 52       	subi	r30, 0x23	; 35
    4f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1c:	60 81       	ld	r22, Z
    4f1e:	71 81       	ldd	r23, Z+1	; 0x01
    4f20:	82 81       	ldd	r24, Z+2	; 0x02
    4f22:	93 81       	ldd	r25, Z+3	; 0x03
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	4a e7       	ldi	r20, 0x7A	; 122
    4f2a:	53 e4       	ldi	r21, 0x43	; 67
    4f2c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4f30:	dc 01       	movw	r26, r24
    4f32:	cb 01       	movw	r24, r22
    4f34:	f8 01       	movw	r30, r16
    4f36:	80 83       	st	Z, r24
    4f38:	91 83       	std	Z+1, r25	; 0x01
    4f3a:	a2 83       	std	Z+2, r26	; 0x02
    4f3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f3e:	fe 01       	movw	r30, r28
    4f40:	e7 52       	subi	r30, 0x27	; 39
    4f42:	ff 4f       	sbci	r31, 0xFF	; 255
    4f44:	60 81       	ld	r22, Z
    4f46:	71 81       	ldd	r23, Z+1	; 0x01
    4f48:	82 81       	ldd	r24, Z+2	; 0x02
    4f4a:	93 81       	ldd	r25, Z+3	; 0x03
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	40 e8       	ldi	r20, 0x80	; 128
    4f52:	5f e3       	ldi	r21, 0x3F	; 63
    4f54:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4f58:	88 23       	and	r24, r24
    4f5a:	44 f4       	brge	.+16     	; 0x4f6c <AmmeterMode+0x161e>
		__ticks = 1;
    4f5c:	fe 01       	movw	r30, r28
    4f5e:	e9 52       	subi	r30, 0x29	; 41
    4f60:	ff 4f       	sbci	r31, 0xFF	; 255
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	91 83       	std	Z+1, r25	; 0x01
    4f68:	80 83       	st	Z, r24
    4f6a:	64 c0       	rjmp	.+200    	; 0x5034 <AmmeterMode+0x16e6>
	else if (__tmp > 65535)
    4f6c:	fe 01       	movw	r30, r28
    4f6e:	e7 52       	subi	r30, 0x27	; 39
    4f70:	ff 4f       	sbci	r31, 0xFF	; 255
    4f72:	60 81       	ld	r22, Z
    4f74:	71 81       	ldd	r23, Z+1	; 0x01
    4f76:	82 81       	ldd	r24, Z+2	; 0x02
    4f78:	93 81       	ldd	r25, Z+3	; 0x03
    4f7a:	20 e0       	ldi	r18, 0x00	; 0
    4f7c:	3f ef       	ldi	r19, 0xFF	; 255
    4f7e:	4f e7       	ldi	r20, 0x7F	; 127
    4f80:	57 e4       	ldi	r21, 0x47	; 71
    4f82:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4f86:	18 16       	cp	r1, r24
    4f88:	0c f0       	brlt	.+2      	; 0x4f8c <AmmeterMode+0x163e>
    4f8a:	43 c0       	rjmp	.+134    	; 0x5012 <AmmeterMode+0x16c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f8c:	fe 01       	movw	r30, r28
    4f8e:	e3 52       	subi	r30, 0x23	; 35
    4f90:	ff 4f       	sbci	r31, 0xFF	; 255
    4f92:	60 81       	ld	r22, Z
    4f94:	71 81       	ldd	r23, Z+1	; 0x01
    4f96:	82 81       	ldd	r24, Z+2	; 0x02
    4f98:	93 81       	ldd	r25, Z+3	; 0x03
    4f9a:	20 e0       	ldi	r18, 0x00	; 0
    4f9c:	30 e0       	ldi	r19, 0x00	; 0
    4f9e:	40 e2       	ldi	r20, 0x20	; 32
    4fa0:	51 e4       	ldi	r21, 0x41	; 65
    4fa2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	cb 01       	movw	r24, r22
    4faa:	8e 01       	movw	r16, r28
    4fac:	09 52       	subi	r16, 0x29	; 41
    4fae:	1f 4f       	sbci	r17, 0xFF	; 255
    4fb0:	bc 01       	movw	r22, r24
    4fb2:	cd 01       	movw	r24, r26
    4fb4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4fb8:	dc 01       	movw	r26, r24
    4fba:	cb 01       	movw	r24, r22
    4fbc:	f8 01       	movw	r30, r16
    4fbe:	91 83       	std	Z+1, r25	; 0x01
    4fc0:	80 83       	st	Z, r24
    4fc2:	1f c0       	rjmp	.+62     	; 0x5002 <AmmeterMode+0x16b4>
    4fc4:	fe 01       	movw	r30, r28
    4fc6:	eb 52       	subi	r30, 0x2B	; 43
    4fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fca:	89 e1       	ldi	r24, 0x19	; 25
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	91 83       	std	Z+1, r25	; 0x01
    4fd0:	80 83       	st	Z, r24
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	eb 52       	subi	r30, 0x2B	; 43
    4fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd8:	80 81       	ld	r24, Z
    4fda:	91 81       	ldd	r25, Z+1	; 0x01
    4fdc:	01 97       	sbiw	r24, 0x01	; 1
    4fde:	f1 f7       	brne	.-4      	; 0x4fdc <AmmeterMode+0x168e>
    4fe0:	fe 01       	movw	r30, r28
    4fe2:	eb 52       	subi	r30, 0x2B	; 43
    4fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe6:	91 83       	std	Z+1, r25	; 0x01
    4fe8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fea:	de 01       	movw	r26, r28
    4fec:	a9 52       	subi	r26, 0x29	; 41
    4fee:	bf 4f       	sbci	r27, 0xFF	; 255
    4ff0:	fe 01       	movw	r30, r28
    4ff2:	e9 52       	subi	r30, 0x29	; 41
    4ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff6:	80 81       	ld	r24, Z
    4ff8:	91 81       	ldd	r25, Z+1	; 0x01
    4ffa:	01 97       	sbiw	r24, 0x01	; 1
    4ffc:	11 96       	adiw	r26, 0x01	; 1
    4ffe:	9c 93       	st	X, r25
    5000:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5002:	fe 01       	movw	r30, r28
    5004:	e9 52       	subi	r30, 0x29	; 41
    5006:	ff 4f       	sbci	r31, 0xFF	; 255
    5008:	80 81       	ld	r24, Z
    500a:	91 81       	ldd	r25, Z+1	; 0x01
    500c:	00 97       	sbiw	r24, 0x00	; 0
    500e:	d1 f6       	brne	.-76     	; 0x4fc4 <AmmeterMode+0x1676>
    5010:	27 c0       	rjmp	.+78     	; 0x5060 <AmmeterMode+0x1712>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5012:	8e 01       	movw	r16, r28
    5014:	09 52       	subi	r16, 0x29	; 41
    5016:	1f 4f       	sbci	r17, 0xFF	; 255
    5018:	fe 01       	movw	r30, r28
    501a:	e7 52       	subi	r30, 0x27	; 39
    501c:	ff 4f       	sbci	r31, 0xFF	; 255
    501e:	60 81       	ld	r22, Z
    5020:	71 81       	ldd	r23, Z+1	; 0x01
    5022:	82 81       	ldd	r24, Z+2	; 0x02
    5024:	93 81       	ldd	r25, Z+3	; 0x03
    5026:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    502a:	dc 01       	movw	r26, r24
    502c:	cb 01       	movw	r24, r22
    502e:	f8 01       	movw	r30, r16
    5030:	91 83       	std	Z+1, r25	; 0x01
    5032:	80 83       	st	Z, r24
    5034:	de 01       	movw	r26, r28
    5036:	ad 52       	subi	r26, 0x2D	; 45
    5038:	bf 4f       	sbci	r27, 0xFF	; 255
    503a:	fe 01       	movw	r30, r28
    503c:	e9 52       	subi	r30, 0x29	; 41
    503e:	ff 4f       	sbci	r31, 0xFF	; 255
    5040:	80 81       	ld	r24, Z
    5042:	91 81       	ldd	r25, Z+1	; 0x01
    5044:	8d 93       	st	X+, r24
    5046:	9c 93       	st	X, r25
    5048:	fe 01       	movw	r30, r28
    504a:	ed 52       	subi	r30, 0x2D	; 45
    504c:	ff 4f       	sbci	r31, 0xFF	; 255
    504e:	80 81       	ld	r24, Z
    5050:	91 81       	ldd	r25, Z+1	; 0x01
    5052:	01 97       	sbiw	r24, 0x01	; 1
    5054:	f1 f7       	brne	.-4      	; 0x5052 <AmmeterMode+0x1704>
    5056:	fe 01       	movw	r30, r28
    5058:	ed 52       	subi	r30, 0x2D	; 45
    505a:	ff 4f       	sbci	r31, 0xFF	; 255
    505c:	91 83       	std	Z+1, r25	; 0x01
    505e:	80 83       	st	Z, r24
					_delay_ms(1000);
					Vout = adc1*(5.0/1023);
    5060:	80 91 30 02 	lds	r24, 0x0230
    5064:	90 91 31 02 	lds	r25, 0x0231
    5068:	a0 91 32 02 	lds	r26, 0x0232
    506c:	b0 91 33 02 	lds	r27, 0x0233
    5070:	bc 01       	movw	r22, r24
    5072:	cd 01       	movw	r24, r26
    5074:	2a e0       	ldi	r18, 0x0A	; 10
    5076:	38 e2       	ldi	r19, 0x28	; 40
    5078:	40 ea       	ldi	r20, 0xA0	; 160
    507a:	5b e3       	ldi	r21, 0x3B	; 59
    507c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5080:	dc 01       	movw	r26, r24
    5082:	cb 01       	movw	r24, r22
    5084:	80 93 38 02 	sts	0x0238, r24
    5088:	90 93 39 02 	sts	0x0239, r25
    508c:	a0 93 3a 02 	sts	0x023A, r26
    5090:	b0 93 3b 02 	sts	0x023B, r27
					amp=Vout/(10.0*45.0); //Range 0:10mA (Rs=45)
    5094:	80 91 38 02 	lds	r24, 0x0238
    5098:	90 91 39 02 	lds	r25, 0x0239
    509c:	a0 91 3a 02 	lds	r26, 0x023A
    50a0:	b0 91 3b 02 	lds	r27, 0x023B
    50a4:	bc 01       	movw	r22, r24
    50a6:	cd 01       	movw	r24, r26
    50a8:	20 e0       	ldi	r18, 0x00	; 0
    50aa:	30 e0       	ldi	r19, 0x00	; 0
    50ac:	41 ee       	ldi	r20, 0xE1	; 225
    50ae:	53 e4       	ldi	r21, 0x43	; 67
    50b0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    50b4:	dc 01       	movw	r26, r24
    50b6:	cb 01       	movw	r24, r22
    50b8:	80 93 24 02 	sts	0x0224, r24
    50bc:	90 93 25 02 	sts	0x0225, r25
    50c0:	a0 93 26 02 	sts	0x0226, r26
    50c4:	b0 93 27 02 	sts	0x0227, r27
					LCD_clearScreen();
    50c8:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
					LCD_displayString("Amp=");
    50cc:	8b ed       	ldi	r24, 0xDB	; 219
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
					LCD_displayFloat(amp,5);
    50d4:	80 91 24 02 	lds	r24, 0x0224
    50d8:	90 91 25 02 	lds	r25, 0x0225
    50dc:	a0 91 26 02 	lds	r26, 0x0226
    50e0:	b0 91 27 02 	lds	r27, 0x0227
    50e4:	bc 01       	movw	r22, r24
    50e6:	cd 01       	movw	r24, r26
    50e8:	45 e0       	ldi	r20, 0x05	; 5
    50ea:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    50ee:	fe 01       	movw	r30, r28
    50f0:	e1 53       	subi	r30, 0x31	; 49
    50f2:	ff 4f       	sbci	r31, 0xFF	; 255
    50f4:	80 e0       	ldi	r24, 0x00	; 0
    50f6:	90 e0       	ldi	r25, 0x00	; 0
    50f8:	aa e7       	ldi	r26, 0x7A	; 122
    50fa:	b4 e4       	ldi	r27, 0x44	; 68
    50fc:	80 83       	st	Z, r24
    50fe:	91 83       	std	Z+1, r25	; 0x01
    5100:	a2 83       	std	Z+2, r26	; 0x02
    5102:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5104:	8e 01       	movw	r16, r28
    5106:	05 53       	subi	r16, 0x35	; 53
    5108:	1f 4f       	sbci	r17, 0xFF	; 255
    510a:	fe 01       	movw	r30, r28
    510c:	e1 53       	subi	r30, 0x31	; 49
    510e:	ff 4f       	sbci	r31, 0xFF	; 255
    5110:	60 81       	ld	r22, Z
    5112:	71 81       	ldd	r23, Z+1	; 0x01
    5114:	82 81       	ldd	r24, Z+2	; 0x02
    5116:	93 81       	ldd	r25, Z+3	; 0x03
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	4a e7       	ldi	r20, 0x7A	; 122
    511e:	53 e4       	ldi	r21, 0x43	; 67
    5120:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	f8 01       	movw	r30, r16
    512a:	80 83       	st	Z, r24
    512c:	91 83       	std	Z+1, r25	; 0x01
    512e:	a2 83       	std	Z+2, r26	; 0x02
    5130:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5132:	fe 01       	movw	r30, r28
    5134:	e5 53       	subi	r30, 0x35	; 53
    5136:	ff 4f       	sbci	r31, 0xFF	; 255
    5138:	60 81       	ld	r22, Z
    513a:	71 81       	ldd	r23, Z+1	; 0x01
    513c:	82 81       	ldd	r24, Z+2	; 0x02
    513e:	93 81       	ldd	r25, Z+3	; 0x03
    5140:	20 e0       	ldi	r18, 0x00	; 0
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	40 e8       	ldi	r20, 0x80	; 128
    5146:	5f e3       	ldi	r21, 0x3F	; 63
    5148:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    514c:	88 23       	and	r24, r24
    514e:	44 f4       	brge	.+16     	; 0x5160 <AmmeterMode+0x1812>
		__ticks = 1;
    5150:	fe 01       	movw	r30, r28
    5152:	e7 53       	subi	r30, 0x37	; 55
    5154:	ff 4f       	sbci	r31, 0xFF	; 255
    5156:	81 e0       	ldi	r24, 0x01	; 1
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	91 83       	std	Z+1, r25	; 0x01
    515c:	80 83       	st	Z, r24
    515e:	64 c0       	rjmp	.+200    	; 0x5228 <AmmeterMode+0x18da>
	else if (__tmp > 65535)
    5160:	fe 01       	movw	r30, r28
    5162:	e5 53       	subi	r30, 0x35	; 53
    5164:	ff 4f       	sbci	r31, 0xFF	; 255
    5166:	60 81       	ld	r22, Z
    5168:	71 81       	ldd	r23, Z+1	; 0x01
    516a:	82 81       	ldd	r24, Z+2	; 0x02
    516c:	93 81       	ldd	r25, Z+3	; 0x03
    516e:	20 e0       	ldi	r18, 0x00	; 0
    5170:	3f ef       	ldi	r19, 0xFF	; 255
    5172:	4f e7       	ldi	r20, 0x7F	; 127
    5174:	57 e4       	ldi	r21, 0x47	; 71
    5176:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    517a:	18 16       	cp	r1, r24
    517c:	0c f0       	brlt	.+2      	; 0x5180 <AmmeterMode+0x1832>
    517e:	43 c0       	rjmp	.+134    	; 0x5206 <AmmeterMode+0x18b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5180:	fe 01       	movw	r30, r28
    5182:	e1 53       	subi	r30, 0x31	; 49
    5184:	ff 4f       	sbci	r31, 0xFF	; 255
    5186:	60 81       	ld	r22, Z
    5188:	71 81       	ldd	r23, Z+1	; 0x01
    518a:	82 81       	ldd	r24, Z+2	; 0x02
    518c:	93 81       	ldd	r25, Z+3	; 0x03
    518e:	20 e0       	ldi	r18, 0x00	; 0
    5190:	30 e0       	ldi	r19, 0x00	; 0
    5192:	40 e2       	ldi	r20, 0x20	; 32
    5194:	51 e4       	ldi	r21, 0x41	; 65
    5196:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    519a:	dc 01       	movw	r26, r24
    519c:	cb 01       	movw	r24, r22
    519e:	8e 01       	movw	r16, r28
    51a0:	07 53       	subi	r16, 0x37	; 55
    51a2:	1f 4f       	sbci	r17, 0xFF	; 255
    51a4:	bc 01       	movw	r22, r24
    51a6:	cd 01       	movw	r24, r26
    51a8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    51ac:	dc 01       	movw	r26, r24
    51ae:	cb 01       	movw	r24, r22
    51b0:	f8 01       	movw	r30, r16
    51b2:	91 83       	std	Z+1, r25	; 0x01
    51b4:	80 83       	st	Z, r24
    51b6:	1f c0       	rjmp	.+62     	; 0x51f6 <AmmeterMode+0x18a8>
    51b8:	fe 01       	movw	r30, r28
    51ba:	e9 53       	subi	r30, 0x39	; 57
    51bc:	ff 4f       	sbci	r31, 0xFF	; 255
    51be:	89 e1       	ldi	r24, 0x19	; 25
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	91 83       	std	Z+1, r25	; 0x01
    51c4:	80 83       	st	Z, r24
    51c6:	fe 01       	movw	r30, r28
    51c8:	e9 53       	subi	r30, 0x39	; 57
    51ca:	ff 4f       	sbci	r31, 0xFF	; 255
    51cc:	80 81       	ld	r24, Z
    51ce:	91 81       	ldd	r25, Z+1	; 0x01
    51d0:	01 97       	sbiw	r24, 0x01	; 1
    51d2:	f1 f7       	brne	.-4      	; 0x51d0 <AmmeterMode+0x1882>
    51d4:	fe 01       	movw	r30, r28
    51d6:	e9 53       	subi	r30, 0x39	; 57
    51d8:	ff 4f       	sbci	r31, 0xFF	; 255
    51da:	91 83       	std	Z+1, r25	; 0x01
    51dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51de:	de 01       	movw	r26, r28
    51e0:	a7 53       	subi	r26, 0x37	; 55
    51e2:	bf 4f       	sbci	r27, 0xFF	; 255
    51e4:	fe 01       	movw	r30, r28
    51e6:	e7 53       	subi	r30, 0x37	; 55
    51e8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ea:	80 81       	ld	r24, Z
    51ec:	91 81       	ldd	r25, Z+1	; 0x01
    51ee:	01 97       	sbiw	r24, 0x01	; 1
    51f0:	11 96       	adiw	r26, 0x01	; 1
    51f2:	9c 93       	st	X, r25
    51f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51f6:	fe 01       	movw	r30, r28
    51f8:	e7 53       	subi	r30, 0x37	; 55
    51fa:	ff 4f       	sbci	r31, 0xFF	; 255
    51fc:	80 81       	ld	r24, Z
    51fe:	91 81       	ldd	r25, Z+1	; 0x01
    5200:	00 97       	sbiw	r24, 0x00	; 0
    5202:	d1 f6       	brne	.-76     	; 0x51b8 <AmmeterMode+0x186a>
    5204:	27 c0       	rjmp	.+78     	; 0x5254 <AmmeterMode+0x1906>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5206:	8e 01       	movw	r16, r28
    5208:	07 53       	subi	r16, 0x37	; 55
    520a:	1f 4f       	sbci	r17, 0xFF	; 255
    520c:	fe 01       	movw	r30, r28
    520e:	e5 53       	subi	r30, 0x35	; 53
    5210:	ff 4f       	sbci	r31, 0xFF	; 255
    5212:	60 81       	ld	r22, Z
    5214:	71 81       	ldd	r23, Z+1	; 0x01
    5216:	82 81       	ldd	r24, Z+2	; 0x02
    5218:	93 81       	ldd	r25, Z+3	; 0x03
    521a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    521e:	dc 01       	movw	r26, r24
    5220:	cb 01       	movw	r24, r22
    5222:	f8 01       	movw	r30, r16
    5224:	91 83       	std	Z+1, r25	; 0x01
    5226:	80 83       	st	Z, r24
    5228:	de 01       	movw	r26, r28
    522a:	ab 53       	subi	r26, 0x3B	; 59
    522c:	bf 4f       	sbci	r27, 0xFF	; 255
    522e:	fe 01       	movw	r30, r28
    5230:	e7 53       	subi	r30, 0x37	; 55
    5232:	ff 4f       	sbci	r31, 0xFF	; 255
    5234:	80 81       	ld	r24, Z
    5236:	91 81       	ldd	r25, Z+1	; 0x01
    5238:	8d 93       	st	X+, r24
    523a:	9c 93       	st	X, r25
    523c:	fe 01       	movw	r30, r28
    523e:	eb 53       	subi	r30, 0x3B	; 59
    5240:	ff 4f       	sbci	r31, 0xFF	; 255
    5242:	80 81       	ld	r24, Z
    5244:	91 81       	ldd	r25, Z+1	; 0x01
    5246:	01 97       	sbiw	r24, 0x01	; 1
    5248:	f1 f7       	brne	.-4      	; 0x5246 <AmmeterMode+0x18f8>
    524a:	fe 01       	movw	r30, r28
    524c:	eb 53       	subi	r30, 0x3B	; 59
    524e:	ff 4f       	sbci	r31, 0xFF	; 255
    5250:	91 83       	std	Z+1, r25	; 0x01
    5252:	80 83       	st	Z, r24
					_delay_ms(1000);
					LCD_clearScreen();
    5254:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
					num=0;
    5258:	10 92 22 02 	sts	0x0222, r1
    525c:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <AmmeterMode+0x308e>
				}
			}
	}

	else if(num==2)
    5260:	80 91 22 02 	lds	r24, 0x0222
    5264:	82 30       	cpi	r24, 0x02	; 2
    5266:	11 f0       	breq	.+4      	; 0x526c <AmmeterMode+0x191e>
    5268:	0c 94 e8 34 	jmp	0x69d0	; 0x69d0 <AmmeterMode+0x3082>
	{
		num=0;
    526c:	10 92 22 02 	sts	0x0222, r1
		LCD_clearScreen();
    5270:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
		LCD_displayString("Choose Range");
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	91 e0       	ldi	r25, 0x01	; 1
    5278:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    527c:	04 c0       	rjmp	.+8      	; 0x5286 <AmmeterMode+0x1938>
		while(num==0 || num==4){
				num=KEYPAD_getPressedKey();
    527e:	0e 94 3f 0b 	call	0x167e	; 0x167e <KEYPAD_getPressedKey>
    5282:	80 93 22 02 	sts	0x0222, r24
	else if(num==2)
	{
		num=0;
		LCD_clearScreen();
		LCD_displayString("Choose Range");
		while(num==0 || num==4){
    5286:	80 91 22 02 	lds	r24, 0x0222
    528a:	88 23       	and	r24, r24
    528c:	c1 f3       	breq	.-16     	; 0x527e <AmmeterMode+0x1930>
    528e:	80 91 22 02 	lds	r24, 0x0222
    5292:	84 30       	cpi	r24, 0x04	; 4
    5294:	a1 f3       	breq	.-24     	; 0x527e <AmmeterMode+0x1930>
				num=KEYPAD_getPressedKey();
			}
		LCD_clearScreen();
    5296:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
			LCD_displayString("out&=");
    529a:	89 eb       	ldi	r24, 0xB9	; 185
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
			LCD_displayFloat(num,2);
    52a2:	80 91 22 02 	lds	r24, 0x0222
    52a6:	88 2f       	mov	r24, r24
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	a0 e0       	ldi	r26, 0x00	; 0
    52ac:	b0 e0       	ldi	r27, 0x00	; 0
    52ae:	bc 01       	movw	r22, r24
    52b0:	cd 01       	movw	r24, r26
    52b2:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    52b6:	dc 01       	movw	r26, r24
    52b8:	cb 01       	movw	r24, r22
    52ba:	bc 01       	movw	r22, r24
    52bc:	cd 01       	movw	r24, r26
    52be:	42 e0       	ldi	r20, 0x02	; 2
    52c0:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    52c4:	fe 01       	movw	r30, r28
    52c6:	ef 53       	subi	r30, 0x3F	; 63
    52c8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ca:	80 e0       	ldi	r24, 0x00	; 0
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	aa ef       	ldi	r26, 0xFA	; 250
    52d0:	b3 e4       	ldi	r27, 0x43	; 67
    52d2:	80 83       	st	Z, r24
    52d4:	91 83       	std	Z+1, r25	; 0x01
    52d6:	a2 83       	std	Z+2, r26	; 0x02
    52d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52da:	8e 01       	movw	r16, r28
    52dc:	03 54       	subi	r16, 0x43	; 67
    52de:	1f 4f       	sbci	r17, 0xFF	; 255
    52e0:	fe 01       	movw	r30, r28
    52e2:	ef 53       	subi	r30, 0x3F	; 63
    52e4:	ff 4f       	sbci	r31, 0xFF	; 255
    52e6:	60 81       	ld	r22, Z
    52e8:	71 81       	ldd	r23, Z+1	; 0x01
    52ea:	82 81       	ldd	r24, Z+2	; 0x02
    52ec:	93 81       	ldd	r25, Z+3	; 0x03
    52ee:	20 e0       	ldi	r18, 0x00	; 0
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	4a e7       	ldi	r20, 0x7A	; 122
    52f4:	53 e4       	ldi	r21, 0x43	; 67
    52f6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	f8 01       	movw	r30, r16
    5300:	80 83       	st	Z, r24
    5302:	91 83       	std	Z+1, r25	; 0x01
    5304:	a2 83       	std	Z+2, r26	; 0x02
    5306:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5308:	fe 01       	movw	r30, r28
    530a:	e3 54       	subi	r30, 0x43	; 67
    530c:	ff 4f       	sbci	r31, 0xFF	; 255
    530e:	60 81       	ld	r22, Z
    5310:	71 81       	ldd	r23, Z+1	; 0x01
    5312:	82 81       	ldd	r24, Z+2	; 0x02
    5314:	93 81       	ldd	r25, Z+3	; 0x03
    5316:	20 e0       	ldi	r18, 0x00	; 0
    5318:	30 e0       	ldi	r19, 0x00	; 0
    531a:	40 e8       	ldi	r20, 0x80	; 128
    531c:	5f e3       	ldi	r21, 0x3F	; 63
    531e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5322:	88 23       	and	r24, r24
    5324:	44 f4       	brge	.+16     	; 0x5336 <AmmeterMode+0x19e8>
		__ticks = 1;
    5326:	fe 01       	movw	r30, r28
    5328:	e5 54       	subi	r30, 0x45	; 69
    532a:	ff 4f       	sbci	r31, 0xFF	; 255
    532c:	81 e0       	ldi	r24, 0x01	; 1
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	91 83       	std	Z+1, r25	; 0x01
    5332:	80 83       	st	Z, r24
    5334:	64 c0       	rjmp	.+200    	; 0x53fe <AmmeterMode+0x1ab0>
	else if (__tmp > 65535)
    5336:	fe 01       	movw	r30, r28
    5338:	e3 54       	subi	r30, 0x43	; 67
    533a:	ff 4f       	sbci	r31, 0xFF	; 255
    533c:	60 81       	ld	r22, Z
    533e:	71 81       	ldd	r23, Z+1	; 0x01
    5340:	82 81       	ldd	r24, Z+2	; 0x02
    5342:	93 81       	ldd	r25, Z+3	; 0x03
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	3f ef       	ldi	r19, 0xFF	; 255
    5348:	4f e7       	ldi	r20, 0x7F	; 127
    534a:	57 e4       	ldi	r21, 0x47	; 71
    534c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5350:	18 16       	cp	r1, r24
    5352:	0c f0       	brlt	.+2      	; 0x5356 <AmmeterMode+0x1a08>
    5354:	43 c0       	rjmp	.+134    	; 0x53dc <AmmeterMode+0x1a8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5356:	fe 01       	movw	r30, r28
    5358:	ef 53       	subi	r30, 0x3F	; 63
    535a:	ff 4f       	sbci	r31, 0xFF	; 255
    535c:	60 81       	ld	r22, Z
    535e:	71 81       	ldd	r23, Z+1	; 0x01
    5360:	82 81       	ldd	r24, Z+2	; 0x02
    5362:	93 81       	ldd	r25, Z+3	; 0x03
    5364:	20 e0       	ldi	r18, 0x00	; 0
    5366:	30 e0       	ldi	r19, 0x00	; 0
    5368:	40 e2       	ldi	r20, 0x20	; 32
    536a:	51 e4       	ldi	r21, 0x41	; 65
    536c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5370:	dc 01       	movw	r26, r24
    5372:	cb 01       	movw	r24, r22
    5374:	8e 01       	movw	r16, r28
    5376:	05 54       	subi	r16, 0x45	; 69
    5378:	1f 4f       	sbci	r17, 0xFF	; 255
    537a:	bc 01       	movw	r22, r24
    537c:	cd 01       	movw	r24, r26
    537e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5382:	dc 01       	movw	r26, r24
    5384:	cb 01       	movw	r24, r22
    5386:	f8 01       	movw	r30, r16
    5388:	91 83       	std	Z+1, r25	; 0x01
    538a:	80 83       	st	Z, r24
    538c:	1f c0       	rjmp	.+62     	; 0x53cc <AmmeterMode+0x1a7e>
    538e:	fe 01       	movw	r30, r28
    5390:	e7 54       	subi	r30, 0x47	; 71
    5392:	ff 4f       	sbci	r31, 0xFF	; 255
    5394:	89 e1       	ldi	r24, 0x19	; 25
    5396:	90 e0       	ldi	r25, 0x00	; 0
    5398:	91 83       	std	Z+1, r25	; 0x01
    539a:	80 83       	st	Z, r24
    539c:	fe 01       	movw	r30, r28
    539e:	e7 54       	subi	r30, 0x47	; 71
    53a0:	ff 4f       	sbci	r31, 0xFF	; 255
    53a2:	80 81       	ld	r24, Z
    53a4:	91 81       	ldd	r25, Z+1	; 0x01
    53a6:	01 97       	sbiw	r24, 0x01	; 1
    53a8:	f1 f7       	brne	.-4      	; 0x53a6 <AmmeterMode+0x1a58>
    53aa:	fe 01       	movw	r30, r28
    53ac:	e7 54       	subi	r30, 0x47	; 71
    53ae:	ff 4f       	sbci	r31, 0xFF	; 255
    53b0:	91 83       	std	Z+1, r25	; 0x01
    53b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53b4:	de 01       	movw	r26, r28
    53b6:	a5 54       	subi	r26, 0x45	; 69
    53b8:	bf 4f       	sbci	r27, 0xFF	; 255
    53ba:	fe 01       	movw	r30, r28
    53bc:	e5 54       	subi	r30, 0x45	; 69
    53be:	ff 4f       	sbci	r31, 0xFF	; 255
    53c0:	80 81       	ld	r24, Z
    53c2:	91 81       	ldd	r25, Z+1	; 0x01
    53c4:	01 97       	sbiw	r24, 0x01	; 1
    53c6:	11 96       	adiw	r26, 0x01	; 1
    53c8:	9c 93       	st	X, r25
    53ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53cc:	fe 01       	movw	r30, r28
    53ce:	e5 54       	subi	r30, 0x45	; 69
    53d0:	ff 4f       	sbci	r31, 0xFF	; 255
    53d2:	80 81       	ld	r24, Z
    53d4:	91 81       	ldd	r25, Z+1	; 0x01
    53d6:	00 97       	sbiw	r24, 0x00	; 0
    53d8:	d1 f6       	brne	.-76     	; 0x538e <AmmeterMode+0x1a40>
    53da:	27 c0       	rjmp	.+78     	; 0x542a <AmmeterMode+0x1adc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53dc:	8e 01       	movw	r16, r28
    53de:	05 54       	subi	r16, 0x45	; 69
    53e0:	1f 4f       	sbci	r17, 0xFF	; 255
    53e2:	fe 01       	movw	r30, r28
    53e4:	e3 54       	subi	r30, 0x43	; 67
    53e6:	ff 4f       	sbci	r31, 0xFF	; 255
    53e8:	60 81       	ld	r22, Z
    53ea:	71 81       	ldd	r23, Z+1	; 0x01
    53ec:	82 81       	ldd	r24, Z+2	; 0x02
    53ee:	93 81       	ldd	r25, Z+3	; 0x03
    53f0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    53f4:	dc 01       	movw	r26, r24
    53f6:	cb 01       	movw	r24, r22
    53f8:	f8 01       	movw	r30, r16
    53fa:	91 83       	std	Z+1, r25	; 0x01
    53fc:	80 83       	st	Z, r24
    53fe:	de 01       	movw	r26, r28
    5400:	a9 54       	subi	r26, 0x49	; 73
    5402:	bf 4f       	sbci	r27, 0xFF	; 255
    5404:	fe 01       	movw	r30, r28
    5406:	e5 54       	subi	r30, 0x45	; 69
    5408:	ff 4f       	sbci	r31, 0xFF	; 255
    540a:	80 81       	ld	r24, Z
    540c:	91 81       	ldd	r25, Z+1	; 0x01
    540e:	8d 93       	st	X+, r24
    5410:	9c 93       	st	X, r25
    5412:	fe 01       	movw	r30, r28
    5414:	e9 54       	subi	r30, 0x49	; 73
    5416:	ff 4f       	sbci	r31, 0xFF	; 255
    5418:	80 81       	ld	r24, Z
    541a:	91 81       	ldd	r25, Z+1	; 0x01
    541c:	01 97       	sbiw	r24, 0x01	; 1
    541e:	f1 f7       	brne	.-4      	; 0x541c <AmmeterMode+0x1ace>
    5420:	fe 01       	movw	r30, r28
    5422:	e9 54       	subi	r30, 0x49	; 73
    5424:	ff 4f       	sbci	r31, 0xFF	; 255
    5426:	91 83       	std	Z+1, r25	; 0x01
    5428:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_clearScreen();
    542a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>

			if(num==1){
    542e:	80 91 22 02 	lds	r24, 0x0222
    5432:	81 30       	cpi	r24, 0x01	; 1
    5434:	09 f0       	breq	.+2      	; 0x5438 <AmmeterMode+0x1aea>
    5436:	71 c4       	rjmp	.+2274   	; 0x5d1a <AmmeterMode+0x23cc>
				LCD_displayString("1st range");
    5438:	87 ef       	ldi	r24, 0xF7	; 247
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    5440:	fe 01       	movw	r30, r28
    5442:	ed 54       	subi	r30, 0x4D	; 77
    5444:	ff 4f       	sbci	r31, 0xFF	; 255
    5446:	80 e0       	ldi	r24, 0x00	; 0
    5448:	90 e0       	ldi	r25, 0x00	; 0
    544a:	aa ef       	ldi	r26, 0xFA	; 250
    544c:	b3 e4       	ldi	r27, 0x43	; 67
    544e:	80 83       	st	Z, r24
    5450:	91 83       	std	Z+1, r25	; 0x01
    5452:	a2 83       	std	Z+2, r26	; 0x02
    5454:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5456:	8e 01       	movw	r16, r28
    5458:	01 55       	subi	r16, 0x51	; 81
    545a:	1f 4f       	sbci	r17, 0xFF	; 255
    545c:	fe 01       	movw	r30, r28
    545e:	ed 54       	subi	r30, 0x4D	; 77
    5460:	ff 4f       	sbci	r31, 0xFF	; 255
    5462:	60 81       	ld	r22, Z
    5464:	71 81       	ldd	r23, Z+1	; 0x01
    5466:	82 81       	ldd	r24, Z+2	; 0x02
    5468:	93 81       	ldd	r25, Z+3	; 0x03
    546a:	20 e0       	ldi	r18, 0x00	; 0
    546c:	30 e0       	ldi	r19, 0x00	; 0
    546e:	4a e7       	ldi	r20, 0x7A	; 122
    5470:	53 e4       	ldi	r21, 0x43	; 67
    5472:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5476:	dc 01       	movw	r26, r24
    5478:	cb 01       	movw	r24, r22
    547a:	f8 01       	movw	r30, r16
    547c:	80 83       	st	Z, r24
    547e:	91 83       	std	Z+1, r25	; 0x01
    5480:	a2 83       	std	Z+2, r26	; 0x02
    5482:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5484:	fe 01       	movw	r30, r28
    5486:	e1 55       	subi	r30, 0x51	; 81
    5488:	ff 4f       	sbci	r31, 0xFF	; 255
    548a:	60 81       	ld	r22, Z
    548c:	71 81       	ldd	r23, Z+1	; 0x01
    548e:	82 81       	ldd	r24, Z+2	; 0x02
    5490:	93 81       	ldd	r25, Z+3	; 0x03
    5492:	20 e0       	ldi	r18, 0x00	; 0
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	40 e8       	ldi	r20, 0x80	; 128
    5498:	5f e3       	ldi	r21, 0x3F	; 63
    549a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    549e:	88 23       	and	r24, r24
    54a0:	44 f4       	brge	.+16     	; 0x54b2 <AmmeterMode+0x1b64>
		__ticks = 1;
    54a2:	fe 01       	movw	r30, r28
    54a4:	e3 55       	subi	r30, 0x53	; 83
    54a6:	ff 4f       	sbci	r31, 0xFF	; 255
    54a8:	81 e0       	ldi	r24, 0x01	; 1
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	91 83       	std	Z+1, r25	; 0x01
    54ae:	80 83       	st	Z, r24
    54b0:	64 c0       	rjmp	.+200    	; 0x557a <AmmeterMode+0x1c2c>
	else if (__tmp > 65535)
    54b2:	fe 01       	movw	r30, r28
    54b4:	e1 55       	subi	r30, 0x51	; 81
    54b6:	ff 4f       	sbci	r31, 0xFF	; 255
    54b8:	60 81       	ld	r22, Z
    54ba:	71 81       	ldd	r23, Z+1	; 0x01
    54bc:	82 81       	ldd	r24, Z+2	; 0x02
    54be:	93 81       	ldd	r25, Z+3	; 0x03
    54c0:	20 e0       	ldi	r18, 0x00	; 0
    54c2:	3f ef       	ldi	r19, 0xFF	; 255
    54c4:	4f e7       	ldi	r20, 0x7F	; 127
    54c6:	57 e4       	ldi	r21, 0x47	; 71
    54c8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    54cc:	18 16       	cp	r1, r24
    54ce:	0c f0       	brlt	.+2      	; 0x54d2 <AmmeterMode+0x1b84>
    54d0:	43 c0       	rjmp	.+134    	; 0x5558 <AmmeterMode+0x1c0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54d2:	fe 01       	movw	r30, r28
    54d4:	ed 54       	subi	r30, 0x4D	; 77
    54d6:	ff 4f       	sbci	r31, 0xFF	; 255
    54d8:	60 81       	ld	r22, Z
    54da:	71 81       	ldd	r23, Z+1	; 0x01
    54dc:	82 81       	ldd	r24, Z+2	; 0x02
    54de:	93 81       	ldd	r25, Z+3	; 0x03
    54e0:	20 e0       	ldi	r18, 0x00	; 0
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	40 e2       	ldi	r20, 0x20	; 32
    54e6:	51 e4       	ldi	r21, 0x41	; 65
    54e8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    54ec:	dc 01       	movw	r26, r24
    54ee:	cb 01       	movw	r24, r22
    54f0:	8e 01       	movw	r16, r28
    54f2:	03 55       	subi	r16, 0x53	; 83
    54f4:	1f 4f       	sbci	r17, 0xFF	; 255
    54f6:	bc 01       	movw	r22, r24
    54f8:	cd 01       	movw	r24, r26
    54fa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    54fe:	dc 01       	movw	r26, r24
    5500:	cb 01       	movw	r24, r22
    5502:	f8 01       	movw	r30, r16
    5504:	91 83       	std	Z+1, r25	; 0x01
    5506:	80 83       	st	Z, r24
    5508:	1f c0       	rjmp	.+62     	; 0x5548 <AmmeterMode+0x1bfa>
    550a:	fe 01       	movw	r30, r28
    550c:	e5 55       	subi	r30, 0x55	; 85
    550e:	ff 4f       	sbci	r31, 0xFF	; 255
    5510:	89 e1       	ldi	r24, 0x19	; 25
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	91 83       	std	Z+1, r25	; 0x01
    5516:	80 83       	st	Z, r24
    5518:	fe 01       	movw	r30, r28
    551a:	e5 55       	subi	r30, 0x55	; 85
    551c:	ff 4f       	sbci	r31, 0xFF	; 255
    551e:	80 81       	ld	r24, Z
    5520:	91 81       	ldd	r25, Z+1	; 0x01
    5522:	01 97       	sbiw	r24, 0x01	; 1
    5524:	f1 f7       	brne	.-4      	; 0x5522 <AmmeterMode+0x1bd4>
    5526:	fe 01       	movw	r30, r28
    5528:	e5 55       	subi	r30, 0x55	; 85
    552a:	ff 4f       	sbci	r31, 0xFF	; 255
    552c:	91 83       	std	Z+1, r25	; 0x01
    552e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5530:	de 01       	movw	r26, r28
    5532:	a3 55       	subi	r26, 0x53	; 83
    5534:	bf 4f       	sbci	r27, 0xFF	; 255
    5536:	fe 01       	movw	r30, r28
    5538:	e3 55       	subi	r30, 0x53	; 83
    553a:	ff 4f       	sbci	r31, 0xFF	; 255
    553c:	80 81       	ld	r24, Z
    553e:	91 81       	ldd	r25, Z+1	; 0x01
    5540:	01 97       	sbiw	r24, 0x01	; 1
    5542:	11 96       	adiw	r26, 0x01	; 1
    5544:	9c 93       	st	X, r25
    5546:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5548:	fe 01       	movw	r30, r28
    554a:	e3 55       	subi	r30, 0x53	; 83
    554c:	ff 4f       	sbci	r31, 0xFF	; 255
    554e:	80 81       	ld	r24, Z
    5550:	91 81       	ldd	r25, Z+1	; 0x01
    5552:	00 97       	sbiw	r24, 0x00	; 0
    5554:	d1 f6       	brne	.-76     	; 0x550a <AmmeterMode+0x1bbc>
    5556:	27 c0       	rjmp	.+78     	; 0x55a6 <AmmeterMode+0x1c58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5558:	8e 01       	movw	r16, r28
    555a:	03 55       	subi	r16, 0x53	; 83
    555c:	1f 4f       	sbci	r17, 0xFF	; 255
    555e:	fe 01       	movw	r30, r28
    5560:	e1 55       	subi	r30, 0x51	; 81
    5562:	ff 4f       	sbci	r31, 0xFF	; 255
    5564:	60 81       	ld	r22, Z
    5566:	71 81       	ldd	r23, Z+1	; 0x01
    5568:	82 81       	ldd	r24, Z+2	; 0x02
    556a:	93 81       	ldd	r25, Z+3	; 0x03
    556c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5570:	dc 01       	movw	r26, r24
    5572:	cb 01       	movw	r24, r22
    5574:	f8 01       	movw	r30, r16
    5576:	91 83       	std	Z+1, r25	; 0x01
    5578:	80 83       	st	Z, r24
    557a:	de 01       	movw	r26, r28
    557c:	a7 55       	subi	r26, 0x57	; 87
    557e:	bf 4f       	sbci	r27, 0xFF	; 255
    5580:	fe 01       	movw	r30, r28
    5582:	e3 55       	subi	r30, 0x53	; 83
    5584:	ff 4f       	sbci	r31, 0xFF	; 255
    5586:	80 81       	ld	r24, Z
    5588:	91 81       	ldd	r25, Z+1	; 0x01
    558a:	8d 93       	st	X+, r24
    558c:	9c 93       	st	X, r25
    558e:	fe 01       	movw	r30, r28
    5590:	e7 55       	subi	r30, 0x57	; 87
    5592:	ff 4f       	sbci	r31, 0xFF	; 255
    5594:	80 81       	ld	r24, Z
    5596:	91 81       	ldd	r25, Z+1	; 0x01
    5598:	01 97       	sbiw	r24, 0x01	; 1
    559a:	f1 f7       	brne	.-4      	; 0x5598 <AmmeterMode+0x1c4a>
    559c:	fe 01       	movw	r30, r28
    559e:	e7 55       	subi	r30, 0x57	; 87
    55a0:	ff 4f       	sbci	r31, 0xFF	; 255
    55a2:	91 83       	std	Z+1, r25	; 0x01
    55a4:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_clearScreen();
    55a6:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
				GPIO_writePin(PORTB_ID, PIN0_ID, 1);
    55aa:	81 e0       	ldi	r24, 0x01	; 1
    55ac:	60 e0       	ldi	r22, 0x00	; 0
    55ae:	41 e0       	ldi	r20, 0x01	; 1
    55b0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
				GPIO_writePin(PORTB_ID, PIN1_ID, 0);
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	61 e0       	ldi	r22, 0x01	; 1
    55b8:	40 e0       	ldi	r20, 0x00	; 0
    55ba:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    55be:	fe 01       	movw	r30, r28
    55c0:	eb 55       	subi	r30, 0x5B	; 91
    55c2:	ff 4f       	sbci	r31, 0xFF	; 255
    55c4:	80 e0       	ldi	r24, 0x00	; 0
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	a8 ec       	ldi	r26, 0xC8	; 200
    55ca:	b2 e4       	ldi	r27, 0x42	; 66
    55cc:	80 83       	st	Z, r24
    55ce:	91 83       	std	Z+1, r25	; 0x01
    55d0:	a2 83       	std	Z+2, r26	; 0x02
    55d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55d4:	8e 01       	movw	r16, r28
    55d6:	0f 55       	subi	r16, 0x5F	; 95
    55d8:	1f 4f       	sbci	r17, 0xFF	; 255
    55da:	fe 01       	movw	r30, r28
    55dc:	eb 55       	subi	r30, 0x5B	; 91
    55de:	ff 4f       	sbci	r31, 0xFF	; 255
    55e0:	60 81       	ld	r22, Z
    55e2:	71 81       	ldd	r23, Z+1	; 0x01
    55e4:	82 81       	ldd	r24, Z+2	; 0x02
    55e6:	93 81       	ldd	r25, Z+3	; 0x03
    55e8:	20 e0       	ldi	r18, 0x00	; 0
    55ea:	30 e0       	ldi	r19, 0x00	; 0
    55ec:	4a e7       	ldi	r20, 0x7A	; 122
    55ee:	53 e4       	ldi	r21, 0x43	; 67
    55f0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    55f4:	dc 01       	movw	r26, r24
    55f6:	cb 01       	movw	r24, r22
    55f8:	f8 01       	movw	r30, r16
    55fa:	80 83       	st	Z, r24
    55fc:	91 83       	std	Z+1, r25	; 0x01
    55fe:	a2 83       	std	Z+2, r26	; 0x02
    5600:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5602:	fe 01       	movw	r30, r28
    5604:	ef 55       	subi	r30, 0x5F	; 95
    5606:	ff 4f       	sbci	r31, 0xFF	; 255
    5608:	60 81       	ld	r22, Z
    560a:	71 81       	ldd	r23, Z+1	; 0x01
    560c:	82 81       	ldd	r24, Z+2	; 0x02
    560e:	93 81       	ldd	r25, Z+3	; 0x03
    5610:	20 e0       	ldi	r18, 0x00	; 0
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	40 e8       	ldi	r20, 0x80	; 128
    5616:	5f e3       	ldi	r21, 0x3F	; 63
    5618:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    561c:	88 23       	and	r24, r24
    561e:	44 f4       	brge	.+16     	; 0x5630 <AmmeterMode+0x1ce2>
		__ticks = 1;
    5620:	fe 01       	movw	r30, r28
    5622:	e1 56       	subi	r30, 0x61	; 97
    5624:	ff 4f       	sbci	r31, 0xFF	; 255
    5626:	81 e0       	ldi	r24, 0x01	; 1
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	91 83       	std	Z+1, r25	; 0x01
    562c:	80 83       	st	Z, r24
    562e:	64 c0       	rjmp	.+200    	; 0x56f8 <AmmeterMode+0x1daa>
	else if (__tmp > 65535)
    5630:	fe 01       	movw	r30, r28
    5632:	ef 55       	subi	r30, 0x5F	; 95
    5634:	ff 4f       	sbci	r31, 0xFF	; 255
    5636:	60 81       	ld	r22, Z
    5638:	71 81       	ldd	r23, Z+1	; 0x01
    563a:	82 81       	ldd	r24, Z+2	; 0x02
    563c:	93 81       	ldd	r25, Z+3	; 0x03
    563e:	20 e0       	ldi	r18, 0x00	; 0
    5640:	3f ef       	ldi	r19, 0xFF	; 255
    5642:	4f e7       	ldi	r20, 0x7F	; 127
    5644:	57 e4       	ldi	r21, 0x47	; 71
    5646:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    564a:	18 16       	cp	r1, r24
    564c:	0c f0       	brlt	.+2      	; 0x5650 <AmmeterMode+0x1d02>
    564e:	43 c0       	rjmp	.+134    	; 0x56d6 <AmmeterMode+0x1d88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5650:	fe 01       	movw	r30, r28
    5652:	eb 55       	subi	r30, 0x5B	; 91
    5654:	ff 4f       	sbci	r31, 0xFF	; 255
    5656:	60 81       	ld	r22, Z
    5658:	71 81       	ldd	r23, Z+1	; 0x01
    565a:	82 81       	ldd	r24, Z+2	; 0x02
    565c:	93 81       	ldd	r25, Z+3	; 0x03
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	40 e2       	ldi	r20, 0x20	; 32
    5664:	51 e4       	ldi	r21, 0x41	; 65
    5666:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    566a:	dc 01       	movw	r26, r24
    566c:	cb 01       	movw	r24, r22
    566e:	8e 01       	movw	r16, r28
    5670:	01 56       	subi	r16, 0x61	; 97
    5672:	1f 4f       	sbci	r17, 0xFF	; 255
    5674:	bc 01       	movw	r22, r24
    5676:	cd 01       	movw	r24, r26
    5678:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    567c:	dc 01       	movw	r26, r24
    567e:	cb 01       	movw	r24, r22
    5680:	f8 01       	movw	r30, r16
    5682:	91 83       	std	Z+1, r25	; 0x01
    5684:	80 83       	st	Z, r24
    5686:	1f c0       	rjmp	.+62     	; 0x56c6 <AmmeterMode+0x1d78>
    5688:	fe 01       	movw	r30, r28
    568a:	e3 56       	subi	r30, 0x63	; 99
    568c:	ff 4f       	sbci	r31, 0xFF	; 255
    568e:	89 e1       	ldi	r24, 0x19	; 25
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	91 83       	std	Z+1, r25	; 0x01
    5694:	80 83       	st	Z, r24
    5696:	fe 01       	movw	r30, r28
    5698:	e3 56       	subi	r30, 0x63	; 99
    569a:	ff 4f       	sbci	r31, 0xFF	; 255
    569c:	80 81       	ld	r24, Z
    569e:	91 81       	ldd	r25, Z+1	; 0x01
    56a0:	01 97       	sbiw	r24, 0x01	; 1
    56a2:	f1 f7       	brne	.-4      	; 0x56a0 <AmmeterMode+0x1d52>
    56a4:	fe 01       	movw	r30, r28
    56a6:	e3 56       	subi	r30, 0x63	; 99
    56a8:	ff 4f       	sbci	r31, 0xFF	; 255
    56aa:	91 83       	std	Z+1, r25	; 0x01
    56ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ae:	de 01       	movw	r26, r28
    56b0:	a1 56       	subi	r26, 0x61	; 97
    56b2:	bf 4f       	sbci	r27, 0xFF	; 255
    56b4:	fe 01       	movw	r30, r28
    56b6:	e1 56       	subi	r30, 0x61	; 97
    56b8:	ff 4f       	sbci	r31, 0xFF	; 255
    56ba:	80 81       	ld	r24, Z
    56bc:	91 81       	ldd	r25, Z+1	; 0x01
    56be:	01 97       	sbiw	r24, 0x01	; 1
    56c0:	11 96       	adiw	r26, 0x01	; 1
    56c2:	9c 93       	st	X, r25
    56c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c6:	fe 01       	movw	r30, r28
    56c8:	e1 56       	subi	r30, 0x61	; 97
    56ca:	ff 4f       	sbci	r31, 0xFF	; 255
    56cc:	80 81       	ld	r24, Z
    56ce:	91 81       	ldd	r25, Z+1	; 0x01
    56d0:	00 97       	sbiw	r24, 0x00	; 0
    56d2:	d1 f6       	brne	.-76     	; 0x5688 <AmmeterMode+0x1d3a>
    56d4:	27 c0       	rjmp	.+78     	; 0x5724 <AmmeterMode+0x1dd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56d6:	8e 01       	movw	r16, r28
    56d8:	01 56       	subi	r16, 0x61	; 97
    56da:	1f 4f       	sbci	r17, 0xFF	; 255
    56dc:	fe 01       	movw	r30, r28
    56de:	ef 55       	subi	r30, 0x5F	; 95
    56e0:	ff 4f       	sbci	r31, 0xFF	; 255
    56e2:	60 81       	ld	r22, Z
    56e4:	71 81       	ldd	r23, Z+1	; 0x01
    56e6:	82 81       	ldd	r24, Z+2	; 0x02
    56e8:	93 81       	ldd	r25, Z+3	; 0x03
    56ea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    56ee:	dc 01       	movw	r26, r24
    56f0:	cb 01       	movw	r24, r22
    56f2:	f8 01       	movw	r30, r16
    56f4:	91 83       	std	Z+1, r25	; 0x01
    56f6:	80 83       	st	Z, r24
    56f8:	de 01       	movw	r26, r28
    56fa:	a5 56       	subi	r26, 0x65	; 101
    56fc:	bf 4f       	sbci	r27, 0xFF	; 255
    56fe:	fe 01       	movw	r30, r28
    5700:	e1 56       	subi	r30, 0x61	; 97
    5702:	ff 4f       	sbci	r31, 0xFF	; 255
    5704:	80 81       	ld	r24, Z
    5706:	91 81       	ldd	r25, Z+1	; 0x01
    5708:	8d 93       	st	X+, r24
    570a:	9c 93       	st	X, r25
    570c:	fe 01       	movw	r30, r28
    570e:	e5 56       	subi	r30, 0x65	; 101
    5710:	ff 4f       	sbci	r31, 0xFF	; 255
    5712:	80 81       	ld	r24, Z
    5714:	91 81       	ldd	r25, Z+1	; 0x01
    5716:	01 97       	sbiw	r24, 0x01	; 1
    5718:	f1 f7       	brne	.-4      	; 0x5716 <AmmeterMode+0x1dc8>
    571a:	fe 01       	movw	r30, r28
    571c:	e5 56       	subi	r30, 0x65	; 101
    571e:	ff 4f       	sbci	r31, 0xFF	; 255
    5720:	91 83       	std	Z+1, r25	; 0x01
    5722:	80 83       	st	Z, r24
				_delay_ms(100);

				adc1=ADC_readChannel(1);
    5724:	81 e0       	ldi	r24, 0x01	; 1
    5726:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    572a:	cc 01       	movw	r24, r24
    572c:	a0 e0       	ldi	r26, 0x00	; 0
    572e:	b0 e0       	ldi	r27, 0x00	; 0
    5730:	bc 01       	movw	r22, r24
    5732:	cd 01       	movw	r24, r26
    5734:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    5738:	dc 01       	movw	r26, r24
    573a:	cb 01       	movw	r24, r22
    573c:	80 93 30 02 	sts	0x0230, r24
    5740:	90 93 31 02 	sts	0x0231, r25
    5744:	a0 93 32 02 	sts	0x0232, r26
    5748:	b0 93 33 02 	sts	0x0233, r27
				max=adc1;
    574c:	80 91 30 02 	lds	r24, 0x0230
    5750:	90 91 31 02 	lds	r25, 0x0231
    5754:	a0 91 32 02 	lds	r26, 0x0232
    5758:	b0 91 33 02 	lds	r27, 0x0233
    575c:	80 93 34 02 	sts	0x0234, r24
    5760:	90 93 35 02 	sts	0x0235, r25
    5764:	a0 93 36 02 	sts	0x0236, r26
    5768:	b0 93 37 02 	sts	0x0237, r27
				for(int i=0;i<500;i++)
    576c:	fe 01       	movw	r30, r28
    576e:	e5 56       	subi	r30, 0x65	; 101
    5770:	fe 4f       	sbci	r31, 0xFE	; 254
    5772:	11 82       	std	Z+1, r1	; 0x01
    5774:	10 82       	st	Z, r1
    5776:	f9 c0       	rjmp	.+498    	; 0x596a <AmmeterMode+0x201c>
				{
					adc1=ADC_readChannel(1);
    5778:	81 e0       	ldi	r24, 0x01	; 1
    577a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    577e:	cc 01       	movw	r24, r24
    5780:	a0 e0       	ldi	r26, 0x00	; 0
    5782:	b0 e0       	ldi	r27, 0x00	; 0
    5784:	bc 01       	movw	r22, r24
    5786:	cd 01       	movw	r24, r26
    5788:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    578c:	dc 01       	movw	r26, r24
    578e:	cb 01       	movw	r24, r22
    5790:	80 93 30 02 	sts	0x0230, r24
    5794:	90 93 31 02 	sts	0x0231, r25
    5798:	a0 93 32 02 	sts	0x0232, r26
    579c:	b0 93 33 02 	sts	0x0233, r27
    57a0:	fe 01       	movw	r30, r28
    57a2:	e9 56       	subi	r30, 0x69	; 105
    57a4:	ff 4f       	sbci	r31, 0xFF	; 255
    57a6:	80 e0       	ldi	r24, 0x00	; 0
    57a8:	90 e0       	ldi	r25, 0x00	; 0
    57aa:	a0 e8       	ldi	r26, 0x80	; 128
    57ac:	bf e3       	ldi	r27, 0x3F	; 63
    57ae:	80 83       	st	Z, r24
    57b0:	91 83       	std	Z+1, r25	; 0x01
    57b2:	a2 83       	std	Z+2, r26	; 0x02
    57b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57b6:	8e 01       	movw	r16, r28
    57b8:	0d 56       	subi	r16, 0x6D	; 109
    57ba:	1f 4f       	sbci	r17, 0xFF	; 255
    57bc:	fe 01       	movw	r30, r28
    57be:	e9 56       	subi	r30, 0x69	; 105
    57c0:	ff 4f       	sbci	r31, 0xFF	; 255
    57c2:	60 81       	ld	r22, Z
    57c4:	71 81       	ldd	r23, Z+1	; 0x01
    57c6:	82 81       	ldd	r24, Z+2	; 0x02
    57c8:	93 81       	ldd	r25, Z+3	; 0x03
    57ca:	20 e0       	ldi	r18, 0x00	; 0
    57cc:	30 e0       	ldi	r19, 0x00	; 0
    57ce:	4a e7       	ldi	r20, 0x7A	; 122
    57d0:	53 e4       	ldi	r21, 0x43	; 67
    57d2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    57d6:	dc 01       	movw	r26, r24
    57d8:	cb 01       	movw	r24, r22
    57da:	f8 01       	movw	r30, r16
    57dc:	80 83       	st	Z, r24
    57de:	91 83       	std	Z+1, r25	; 0x01
    57e0:	a2 83       	std	Z+2, r26	; 0x02
    57e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    57e4:	fe 01       	movw	r30, r28
    57e6:	ed 56       	subi	r30, 0x6D	; 109
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	60 81       	ld	r22, Z
    57ec:	71 81       	ldd	r23, Z+1	; 0x01
    57ee:	82 81       	ldd	r24, Z+2	; 0x02
    57f0:	93 81       	ldd	r25, Z+3	; 0x03
    57f2:	20 e0       	ldi	r18, 0x00	; 0
    57f4:	30 e0       	ldi	r19, 0x00	; 0
    57f6:	40 e8       	ldi	r20, 0x80	; 128
    57f8:	5f e3       	ldi	r21, 0x3F	; 63
    57fa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    57fe:	88 23       	and	r24, r24
    5800:	44 f4       	brge	.+16     	; 0x5812 <AmmeterMode+0x1ec4>
		__ticks = 1;
    5802:	fe 01       	movw	r30, r28
    5804:	ef 56       	subi	r30, 0x6F	; 111
    5806:	ff 4f       	sbci	r31, 0xFF	; 255
    5808:	81 e0       	ldi	r24, 0x01	; 1
    580a:	90 e0       	ldi	r25, 0x00	; 0
    580c:	91 83       	std	Z+1, r25	; 0x01
    580e:	80 83       	st	Z, r24
    5810:	64 c0       	rjmp	.+200    	; 0x58da <AmmeterMode+0x1f8c>
	else if (__tmp > 65535)
    5812:	fe 01       	movw	r30, r28
    5814:	ed 56       	subi	r30, 0x6D	; 109
    5816:	ff 4f       	sbci	r31, 0xFF	; 255
    5818:	60 81       	ld	r22, Z
    581a:	71 81       	ldd	r23, Z+1	; 0x01
    581c:	82 81       	ldd	r24, Z+2	; 0x02
    581e:	93 81       	ldd	r25, Z+3	; 0x03
    5820:	20 e0       	ldi	r18, 0x00	; 0
    5822:	3f ef       	ldi	r19, 0xFF	; 255
    5824:	4f e7       	ldi	r20, 0x7F	; 127
    5826:	57 e4       	ldi	r21, 0x47	; 71
    5828:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    582c:	18 16       	cp	r1, r24
    582e:	0c f0       	brlt	.+2      	; 0x5832 <AmmeterMode+0x1ee4>
    5830:	43 c0       	rjmp	.+134    	; 0x58b8 <AmmeterMode+0x1f6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5832:	fe 01       	movw	r30, r28
    5834:	e9 56       	subi	r30, 0x69	; 105
    5836:	ff 4f       	sbci	r31, 0xFF	; 255
    5838:	60 81       	ld	r22, Z
    583a:	71 81       	ldd	r23, Z+1	; 0x01
    583c:	82 81       	ldd	r24, Z+2	; 0x02
    583e:	93 81       	ldd	r25, Z+3	; 0x03
    5840:	20 e0       	ldi	r18, 0x00	; 0
    5842:	30 e0       	ldi	r19, 0x00	; 0
    5844:	40 e2       	ldi	r20, 0x20	; 32
    5846:	51 e4       	ldi	r21, 0x41	; 65
    5848:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    584c:	dc 01       	movw	r26, r24
    584e:	cb 01       	movw	r24, r22
    5850:	8e 01       	movw	r16, r28
    5852:	0f 56       	subi	r16, 0x6F	; 111
    5854:	1f 4f       	sbci	r17, 0xFF	; 255
    5856:	bc 01       	movw	r22, r24
    5858:	cd 01       	movw	r24, r26
    585a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    585e:	dc 01       	movw	r26, r24
    5860:	cb 01       	movw	r24, r22
    5862:	f8 01       	movw	r30, r16
    5864:	91 83       	std	Z+1, r25	; 0x01
    5866:	80 83       	st	Z, r24
    5868:	1f c0       	rjmp	.+62     	; 0x58a8 <AmmeterMode+0x1f5a>
    586a:	fe 01       	movw	r30, r28
    586c:	e1 57       	subi	r30, 0x71	; 113
    586e:	ff 4f       	sbci	r31, 0xFF	; 255
    5870:	89 e1       	ldi	r24, 0x19	; 25
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	91 83       	std	Z+1, r25	; 0x01
    5876:	80 83       	st	Z, r24
    5878:	fe 01       	movw	r30, r28
    587a:	e1 57       	subi	r30, 0x71	; 113
    587c:	ff 4f       	sbci	r31, 0xFF	; 255
    587e:	80 81       	ld	r24, Z
    5880:	91 81       	ldd	r25, Z+1	; 0x01
    5882:	01 97       	sbiw	r24, 0x01	; 1
    5884:	f1 f7       	brne	.-4      	; 0x5882 <AmmeterMode+0x1f34>
    5886:	fe 01       	movw	r30, r28
    5888:	e1 57       	subi	r30, 0x71	; 113
    588a:	ff 4f       	sbci	r31, 0xFF	; 255
    588c:	91 83       	std	Z+1, r25	; 0x01
    588e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5890:	de 01       	movw	r26, r28
    5892:	af 56       	subi	r26, 0x6F	; 111
    5894:	bf 4f       	sbci	r27, 0xFF	; 255
    5896:	fe 01       	movw	r30, r28
    5898:	ef 56       	subi	r30, 0x6F	; 111
    589a:	ff 4f       	sbci	r31, 0xFF	; 255
    589c:	80 81       	ld	r24, Z
    589e:	91 81       	ldd	r25, Z+1	; 0x01
    58a0:	01 97       	sbiw	r24, 0x01	; 1
    58a2:	11 96       	adiw	r26, 0x01	; 1
    58a4:	9c 93       	st	X, r25
    58a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58a8:	fe 01       	movw	r30, r28
    58aa:	ef 56       	subi	r30, 0x6F	; 111
    58ac:	ff 4f       	sbci	r31, 0xFF	; 255
    58ae:	80 81       	ld	r24, Z
    58b0:	91 81       	ldd	r25, Z+1	; 0x01
    58b2:	00 97       	sbiw	r24, 0x00	; 0
    58b4:	d1 f6       	brne	.-76     	; 0x586a <AmmeterMode+0x1f1c>
    58b6:	27 c0       	rjmp	.+78     	; 0x5906 <AmmeterMode+0x1fb8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58b8:	8e 01       	movw	r16, r28
    58ba:	0f 56       	subi	r16, 0x6F	; 111
    58bc:	1f 4f       	sbci	r17, 0xFF	; 255
    58be:	fe 01       	movw	r30, r28
    58c0:	ed 56       	subi	r30, 0x6D	; 109
    58c2:	ff 4f       	sbci	r31, 0xFF	; 255
    58c4:	60 81       	ld	r22, Z
    58c6:	71 81       	ldd	r23, Z+1	; 0x01
    58c8:	82 81       	ldd	r24, Z+2	; 0x02
    58ca:	93 81       	ldd	r25, Z+3	; 0x03
    58cc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    58d0:	dc 01       	movw	r26, r24
    58d2:	cb 01       	movw	r24, r22
    58d4:	f8 01       	movw	r30, r16
    58d6:	91 83       	std	Z+1, r25	; 0x01
    58d8:	80 83       	st	Z, r24
    58da:	de 01       	movw	r26, r28
    58dc:	a3 57       	subi	r26, 0x73	; 115
    58de:	bf 4f       	sbci	r27, 0xFF	; 255
    58e0:	fe 01       	movw	r30, r28
    58e2:	ef 56       	subi	r30, 0x6F	; 111
    58e4:	ff 4f       	sbci	r31, 0xFF	; 255
    58e6:	80 81       	ld	r24, Z
    58e8:	91 81       	ldd	r25, Z+1	; 0x01
    58ea:	8d 93       	st	X+, r24
    58ec:	9c 93       	st	X, r25
    58ee:	fe 01       	movw	r30, r28
    58f0:	e3 57       	subi	r30, 0x73	; 115
    58f2:	ff 4f       	sbci	r31, 0xFF	; 255
    58f4:	80 81       	ld	r24, Z
    58f6:	91 81       	ldd	r25, Z+1	; 0x01
    58f8:	01 97       	sbiw	r24, 0x01	; 1
    58fa:	f1 f7       	brne	.-4      	; 0x58f8 <AmmeterMode+0x1faa>
    58fc:	fe 01       	movw	r30, r28
    58fe:	e3 57       	subi	r30, 0x73	; 115
    5900:	ff 4f       	sbci	r31, 0xFF	; 255
    5902:	91 83       	std	Z+1, r25	; 0x01
    5904:	80 83       	st	Z, r24
					_delay_ms(1);
					if(adc1>max)
    5906:	80 91 30 02 	lds	r24, 0x0230
    590a:	90 91 31 02 	lds	r25, 0x0231
    590e:	a0 91 32 02 	lds	r26, 0x0232
    5912:	b0 91 33 02 	lds	r27, 0x0233
    5916:	20 91 34 02 	lds	r18, 0x0234
    591a:	30 91 35 02 	lds	r19, 0x0235
    591e:	40 91 36 02 	lds	r20, 0x0236
    5922:	50 91 37 02 	lds	r21, 0x0237
    5926:	bc 01       	movw	r22, r24
    5928:	cd 01       	movw	r24, r26
    592a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    592e:	18 16       	cp	r1, r24
    5930:	84 f4       	brge	.+32     	; 0x5952 <AmmeterMode+0x2004>
					{
					max=adc1;
    5932:	80 91 30 02 	lds	r24, 0x0230
    5936:	90 91 31 02 	lds	r25, 0x0231
    593a:	a0 91 32 02 	lds	r26, 0x0232
    593e:	b0 91 33 02 	lds	r27, 0x0233
    5942:	80 93 34 02 	sts	0x0234, r24
    5946:	90 93 35 02 	sts	0x0235, r25
    594a:	a0 93 36 02 	sts	0x0236, r26
    594e:	b0 93 37 02 	sts	0x0237, r27
				GPIO_writePin(PORTB_ID, PIN1_ID, 0);
				_delay_ms(100);

				adc1=ADC_readChannel(1);
				max=adc1;
				for(int i=0;i<500;i++)
    5952:	de 01       	movw	r26, r28
    5954:	a5 56       	subi	r26, 0x65	; 101
    5956:	be 4f       	sbci	r27, 0xFE	; 254
    5958:	fe 01       	movw	r30, r28
    595a:	e5 56       	subi	r30, 0x65	; 101
    595c:	fe 4f       	sbci	r31, 0xFE	; 254
    595e:	80 81       	ld	r24, Z
    5960:	91 81       	ldd	r25, Z+1	; 0x01
    5962:	01 96       	adiw	r24, 0x01	; 1
    5964:	11 96       	adiw	r26, 0x01	; 1
    5966:	9c 93       	st	X, r25
    5968:	8e 93       	st	-X, r24
    596a:	fe 01       	movw	r30, r28
    596c:	e5 56       	subi	r30, 0x65	; 101
    596e:	fe 4f       	sbci	r31, 0xFE	; 254
    5970:	80 81       	ld	r24, Z
    5972:	91 81       	ldd	r25, Z+1	; 0x01
    5974:	f1 e0       	ldi	r31, 0x01	; 1
    5976:	84 3f       	cpi	r24, 0xF4	; 244
    5978:	9f 07       	cpc	r25, r31
    597a:	0c f4       	brge	.+2      	; 0x597e <AmmeterMode+0x2030>
    597c:	fd ce       	rjmp	.-518    	; 0x5778 <AmmeterMode+0x1e2a>
					if(adc1>max)
					{
					max=adc1;
					}
				}
				adc1=max;
    597e:	80 91 34 02 	lds	r24, 0x0234
    5982:	90 91 35 02 	lds	r25, 0x0235
    5986:	a0 91 36 02 	lds	r26, 0x0236
    598a:	b0 91 37 02 	lds	r27, 0x0237
    598e:	80 93 30 02 	sts	0x0230, r24
    5992:	90 93 31 02 	sts	0x0231, r25
    5996:	a0 93 32 02 	sts	0x0232, r26
    599a:	b0 93 33 02 	sts	0x0233, r27
				LCD_displayFloat(adc1,2);
    599e:	80 91 30 02 	lds	r24, 0x0230
    59a2:	90 91 31 02 	lds	r25, 0x0231
    59a6:	a0 91 32 02 	lds	r26, 0x0232
    59aa:	b0 91 33 02 	lds	r27, 0x0233
    59ae:	bc 01       	movw	r22, r24
    59b0:	cd 01       	movw	r24, r26
    59b2:	42 e0       	ldi	r20, 0x02	; 2
    59b4:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    59b8:	fe 01       	movw	r30, r28
    59ba:	e7 57       	subi	r30, 0x77	; 119
    59bc:	ff 4f       	sbci	r31, 0xFF	; 255
    59be:	80 e0       	ldi	r24, 0x00	; 0
    59c0:	90 e0       	ldi	r25, 0x00	; 0
    59c2:	aa ef       	ldi	r26, 0xFA	; 250
    59c4:	b3 e4       	ldi	r27, 0x43	; 67
    59c6:	80 83       	st	Z, r24
    59c8:	91 83       	std	Z+1, r25	; 0x01
    59ca:	a2 83       	std	Z+2, r26	; 0x02
    59cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59ce:	8e 01       	movw	r16, r28
    59d0:	0b 57       	subi	r16, 0x7B	; 123
    59d2:	1f 4f       	sbci	r17, 0xFF	; 255
    59d4:	fe 01       	movw	r30, r28
    59d6:	e7 57       	subi	r30, 0x77	; 119
    59d8:	ff 4f       	sbci	r31, 0xFF	; 255
    59da:	60 81       	ld	r22, Z
    59dc:	71 81       	ldd	r23, Z+1	; 0x01
    59de:	82 81       	ldd	r24, Z+2	; 0x02
    59e0:	93 81       	ldd	r25, Z+3	; 0x03
    59e2:	20 e0       	ldi	r18, 0x00	; 0
    59e4:	30 e0       	ldi	r19, 0x00	; 0
    59e6:	4a e7       	ldi	r20, 0x7A	; 122
    59e8:	53 e4       	ldi	r21, 0x43	; 67
    59ea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    59ee:	dc 01       	movw	r26, r24
    59f0:	cb 01       	movw	r24, r22
    59f2:	f8 01       	movw	r30, r16
    59f4:	80 83       	st	Z, r24
    59f6:	91 83       	std	Z+1, r25	; 0x01
    59f8:	a2 83       	std	Z+2, r26	; 0x02
    59fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    59fc:	fe 01       	movw	r30, r28
    59fe:	eb 57       	subi	r30, 0x7B	; 123
    5a00:	ff 4f       	sbci	r31, 0xFF	; 255
    5a02:	60 81       	ld	r22, Z
    5a04:	71 81       	ldd	r23, Z+1	; 0x01
    5a06:	82 81       	ldd	r24, Z+2	; 0x02
    5a08:	93 81       	ldd	r25, Z+3	; 0x03
    5a0a:	20 e0       	ldi	r18, 0x00	; 0
    5a0c:	30 e0       	ldi	r19, 0x00	; 0
    5a0e:	40 e8       	ldi	r20, 0x80	; 128
    5a10:	5f e3       	ldi	r21, 0x3F	; 63
    5a12:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5a16:	88 23       	and	r24, r24
    5a18:	44 f4       	brge	.+16     	; 0x5a2a <AmmeterMode+0x20dc>
		__ticks = 1;
    5a1a:	fe 01       	movw	r30, r28
    5a1c:	ed 57       	subi	r30, 0x7D	; 125
    5a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a20:	81 e0       	ldi	r24, 0x01	; 1
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	91 83       	std	Z+1, r25	; 0x01
    5a26:	80 83       	st	Z, r24
    5a28:	64 c0       	rjmp	.+200    	; 0x5af2 <AmmeterMode+0x21a4>
	else if (__tmp > 65535)
    5a2a:	fe 01       	movw	r30, r28
    5a2c:	eb 57       	subi	r30, 0x7B	; 123
    5a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a30:	60 81       	ld	r22, Z
    5a32:	71 81       	ldd	r23, Z+1	; 0x01
    5a34:	82 81       	ldd	r24, Z+2	; 0x02
    5a36:	93 81       	ldd	r25, Z+3	; 0x03
    5a38:	20 e0       	ldi	r18, 0x00	; 0
    5a3a:	3f ef       	ldi	r19, 0xFF	; 255
    5a3c:	4f e7       	ldi	r20, 0x7F	; 127
    5a3e:	57 e4       	ldi	r21, 0x47	; 71
    5a40:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5a44:	18 16       	cp	r1, r24
    5a46:	0c f0       	brlt	.+2      	; 0x5a4a <AmmeterMode+0x20fc>
    5a48:	43 c0       	rjmp	.+134    	; 0x5ad0 <AmmeterMode+0x2182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a4a:	fe 01       	movw	r30, r28
    5a4c:	e7 57       	subi	r30, 0x77	; 119
    5a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a50:	60 81       	ld	r22, Z
    5a52:	71 81       	ldd	r23, Z+1	; 0x01
    5a54:	82 81       	ldd	r24, Z+2	; 0x02
    5a56:	93 81       	ldd	r25, Z+3	; 0x03
    5a58:	20 e0       	ldi	r18, 0x00	; 0
    5a5a:	30 e0       	ldi	r19, 0x00	; 0
    5a5c:	40 e2       	ldi	r20, 0x20	; 32
    5a5e:	51 e4       	ldi	r21, 0x41	; 65
    5a60:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5a64:	dc 01       	movw	r26, r24
    5a66:	cb 01       	movw	r24, r22
    5a68:	8e 01       	movw	r16, r28
    5a6a:	0d 57       	subi	r16, 0x7D	; 125
    5a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    5a6e:	bc 01       	movw	r22, r24
    5a70:	cd 01       	movw	r24, r26
    5a72:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5a76:	dc 01       	movw	r26, r24
    5a78:	cb 01       	movw	r24, r22
    5a7a:	f8 01       	movw	r30, r16
    5a7c:	91 83       	std	Z+1, r25	; 0x01
    5a7e:	80 83       	st	Z, r24
    5a80:	1f c0       	rjmp	.+62     	; 0x5ac0 <AmmeterMode+0x2172>
    5a82:	fe 01       	movw	r30, r28
    5a84:	ef 57       	subi	r30, 0x7F	; 127
    5a86:	ff 4f       	sbci	r31, 0xFF	; 255
    5a88:	89 e1       	ldi	r24, 0x19	; 25
    5a8a:	90 e0       	ldi	r25, 0x00	; 0
    5a8c:	91 83       	std	Z+1, r25	; 0x01
    5a8e:	80 83       	st	Z, r24
    5a90:	fe 01       	movw	r30, r28
    5a92:	ef 57       	subi	r30, 0x7F	; 127
    5a94:	ff 4f       	sbci	r31, 0xFF	; 255
    5a96:	80 81       	ld	r24, Z
    5a98:	91 81       	ldd	r25, Z+1	; 0x01
    5a9a:	01 97       	sbiw	r24, 0x01	; 1
    5a9c:	f1 f7       	brne	.-4      	; 0x5a9a <AmmeterMode+0x214c>
    5a9e:	fe 01       	movw	r30, r28
    5aa0:	ef 57       	subi	r30, 0x7F	; 127
    5aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa4:	91 83       	std	Z+1, r25	; 0x01
    5aa6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aa8:	de 01       	movw	r26, r28
    5aaa:	ad 57       	subi	r26, 0x7D	; 125
    5aac:	bf 4f       	sbci	r27, 0xFF	; 255
    5aae:	fe 01       	movw	r30, r28
    5ab0:	ed 57       	subi	r30, 0x7D	; 125
    5ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab4:	80 81       	ld	r24, Z
    5ab6:	91 81       	ldd	r25, Z+1	; 0x01
    5ab8:	01 97       	sbiw	r24, 0x01	; 1
    5aba:	11 96       	adiw	r26, 0x01	; 1
    5abc:	9c 93       	st	X, r25
    5abe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ac0:	fe 01       	movw	r30, r28
    5ac2:	ed 57       	subi	r30, 0x7D	; 125
    5ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac6:	80 81       	ld	r24, Z
    5ac8:	91 81       	ldd	r25, Z+1	; 0x01
    5aca:	00 97       	sbiw	r24, 0x00	; 0
    5acc:	d1 f6       	brne	.-76     	; 0x5a82 <AmmeterMode+0x2134>
    5ace:	27 c0       	rjmp	.+78     	; 0x5b1e <AmmeterMode+0x21d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ad0:	8e 01       	movw	r16, r28
    5ad2:	0d 57       	subi	r16, 0x7D	; 125
    5ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ad6:	fe 01       	movw	r30, r28
    5ad8:	eb 57       	subi	r30, 0x7B	; 123
    5ada:	ff 4f       	sbci	r31, 0xFF	; 255
    5adc:	60 81       	ld	r22, Z
    5ade:	71 81       	ldd	r23, Z+1	; 0x01
    5ae0:	82 81       	ldd	r24, Z+2	; 0x02
    5ae2:	93 81       	ldd	r25, Z+3	; 0x03
    5ae4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5ae8:	dc 01       	movw	r26, r24
    5aea:	cb 01       	movw	r24, r22
    5aec:	f8 01       	movw	r30, r16
    5aee:	91 83       	std	Z+1, r25	; 0x01
    5af0:	80 83       	st	Z, r24
    5af2:	de 01       	movw	r26, r28
    5af4:	a1 58       	subi	r26, 0x81	; 129
    5af6:	bf 4f       	sbci	r27, 0xFF	; 255
    5af8:	fe 01       	movw	r30, r28
    5afa:	ed 57       	subi	r30, 0x7D	; 125
    5afc:	ff 4f       	sbci	r31, 0xFF	; 255
    5afe:	80 81       	ld	r24, Z
    5b00:	91 81       	ldd	r25, Z+1	; 0x01
    5b02:	8d 93       	st	X+, r24
    5b04:	9c 93       	st	X, r25
    5b06:	fe 01       	movw	r30, r28
    5b08:	e1 58       	subi	r30, 0x81	; 129
    5b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b0c:	80 81       	ld	r24, Z
    5b0e:	91 81       	ldd	r25, Z+1	; 0x01
    5b10:	01 97       	sbiw	r24, 0x01	; 1
    5b12:	f1 f7       	brne	.-4      	; 0x5b10 <AmmeterMode+0x21c2>
    5b14:	fe 01       	movw	r30, r28
    5b16:	e1 58       	subi	r30, 0x81	; 129
    5b18:	ff 4f       	sbci	r31, 0xFF	; 255
    5b1a:	91 83       	std	Z+1, r25	; 0x01
    5b1c:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_clearScreen();
    5b1e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>

				Vout = adc1*(5.0/1023);
    5b22:	80 91 30 02 	lds	r24, 0x0230
    5b26:	90 91 31 02 	lds	r25, 0x0231
    5b2a:	a0 91 32 02 	lds	r26, 0x0232
    5b2e:	b0 91 33 02 	lds	r27, 0x0233
    5b32:	bc 01       	movw	r22, r24
    5b34:	cd 01       	movw	r24, r26
    5b36:	2a e0       	ldi	r18, 0x0A	; 10
    5b38:	38 e2       	ldi	r19, 0x28	; 40
    5b3a:	40 ea       	ldi	r20, 0xA0	; 160
    5b3c:	5b e3       	ldi	r21, 0x3B	; 59
    5b3e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5b42:	dc 01       	movw	r26, r24
    5b44:	cb 01       	movw	r24, r22
    5b46:	80 93 38 02 	sts	0x0238, r24
    5b4a:	90 93 39 02 	sts	0x0239, r25
    5b4e:	a0 93 3a 02 	sts	0x023A, r26
    5b52:	b0 93 3b 02 	sts	0x023B, r27
				amp=Vout/(10.0*45.1); //Range 0:10mA (Rs=45)
    5b56:	80 91 38 02 	lds	r24, 0x0238
    5b5a:	90 91 39 02 	lds	r25, 0x0239
    5b5e:	a0 91 3a 02 	lds	r26, 0x023A
    5b62:	b0 91 3b 02 	lds	r27, 0x023B
    5b66:	bc 01       	movw	r22, r24
    5b68:	cd 01       	movw	r24, r26
    5b6a:	20 e0       	ldi	r18, 0x00	; 0
    5b6c:	30 e8       	ldi	r19, 0x80	; 128
    5b6e:	41 ee       	ldi	r20, 0xE1	; 225
    5b70:	53 e4       	ldi	r21, 0x43	; 67
    5b72:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    5b76:	dc 01       	movw	r26, r24
    5b78:	cb 01       	movw	r24, r22
    5b7a:	80 93 24 02 	sts	0x0224, r24
    5b7e:	90 93 25 02 	sts	0x0225, r25
    5b82:	a0 93 26 02 	sts	0x0226, r26
    5b86:	b0 93 27 02 	sts	0x0227, r27
				LCD_displayString("Amp=");
    5b8a:	8b ed       	ldi	r24, 0xDB	; 219
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
				LCD_displayFloat(amp,5);
    5b92:	80 91 24 02 	lds	r24, 0x0224
    5b96:	90 91 25 02 	lds	r25, 0x0225
    5b9a:	a0 91 26 02 	lds	r26, 0x0226
    5b9e:	b0 91 27 02 	lds	r27, 0x0227
    5ba2:	bc 01       	movw	r22, r24
    5ba4:	cd 01       	movw	r24, r26
    5ba6:	45 e0       	ldi	r20, 0x05	; 5
    5ba8:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    5bac:	fe 01       	movw	r30, r28
    5bae:	e5 58       	subi	r30, 0x85	; 133
    5bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb2:	80 e0       	ldi	r24, 0x00	; 0
    5bb4:	90 e0       	ldi	r25, 0x00	; 0
    5bb6:	aa ef       	ldi	r26, 0xFA	; 250
    5bb8:	b3 e4       	ldi	r27, 0x43	; 67
    5bba:	80 83       	st	Z, r24
    5bbc:	91 83       	std	Z+1, r25	; 0x01
    5bbe:	a2 83       	std	Z+2, r26	; 0x02
    5bc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bc2:	8e 01       	movw	r16, r28
    5bc4:	09 58       	subi	r16, 0x89	; 137
    5bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    5bc8:	fe 01       	movw	r30, r28
    5bca:	e5 58       	subi	r30, 0x85	; 133
    5bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bce:	60 81       	ld	r22, Z
    5bd0:	71 81       	ldd	r23, Z+1	; 0x01
    5bd2:	82 81       	ldd	r24, Z+2	; 0x02
    5bd4:	93 81       	ldd	r25, Z+3	; 0x03
    5bd6:	20 e0       	ldi	r18, 0x00	; 0
    5bd8:	30 e0       	ldi	r19, 0x00	; 0
    5bda:	4a e7       	ldi	r20, 0x7A	; 122
    5bdc:	53 e4       	ldi	r21, 0x43	; 67
    5bde:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5be2:	dc 01       	movw	r26, r24
    5be4:	cb 01       	movw	r24, r22
    5be6:	f8 01       	movw	r30, r16
    5be8:	80 83       	st	Z, r24
    5bea:	91 83       	std	Z+1, r25	; 0x01
    5bec:	a2 83       	std	Z+2, r26	; 0x02
    5bee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5bf0:	fe 01       	movw	r30, r28
    5bf2:	e9 58       	subi	r30, 0x89	; 137
    5bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf6:	60 81       	ld	r22, Z
    5bf8:	71 81       	ldd	r23, Z+1	; 0x01
    5bfa:	82 81       	ldd	r24, Z+2	; 0x02
    5bfc:	93 81       	ldd	r25, Z+3	; 0x03
    5bfe:	20 e0       	ldi	r18, 0x00	; 0
    5c00:	30 e0       	ldi	r19, 0x00	; 0
    5c02:	40 e8       	ldi	r20, 0x80	; 128
    5c04:	5f e3       	ldi	r21, 0x3F	; 63
    5c06:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5c0a:	88 23       	and	r24, r24
    5c0c:	44 f4       	brge	.+16     	; 0x5c1e <AmmeterMode+0x22d0>
		__ticks = 1;
    5c0e:	fe 01       	movw	r30, r28
    5c10:	eb 58       	subi	r30, 0x8B	; 139
    5c12:	ff 4f       	sbci	r31, 0xFF	; 255
    5c14:	81 e0       	ldi	r24, 0x01	; 1
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	91 83       	std	Z+1, r25	; 0x01
    5c1a:	80 83       	st	Z, r24
    5c1c:	64 c0       	rjmp	.+200    	; 0x5ce6 <AmmeterMode+0x2398>
	else if (__tmp > 65535)
    5c1e:	fe 01       	movw	r30, r28
    5c20:	e9 58       	subi	r30, 0x89	; 137
    5c22:	ff 4f       	sbci	r31, 0xFF	; 255
    5c24:	60 81       	ld	r22, Z
    5c26:	71 81       	ldd	r23, Z+1	; 0x01
    5c28:	82 81       	ldd	r24, Z+2	; 0x02
    5c2a:	93 81       	ldd	r25, Z+3	; 0x03
    5c2c:	20 e0       	ldi	r18, 0x00	; 0
    5c2e:	3f ef       	ldi	r19, 0xFF	; 255
    5c30:	4f e7       	ldi	r20, 0x7F	; 127
    5c32:	57 e4       	ldi	r21, 0x47	; 71
    5c34:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5c38:	18 16       	cp	r1, r24
    5c3a:	0c f0       	brlt	.+2      	; 0x5c3e <AmmeterMode+0x22f0>
    5c3c:	43 c0       	rjmp	.+134    	; 0x5cc4 <AmmeterMode+0x2376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c3e:	fe 01       	movw	r30, r28
    5c40:	e5 58       	subi	r30, 0x85	; 133
    5c42:	ff 4f       	sbci	r31, 0xFF	; 255
    5c44:	60 81       	ld	r22, Z
    5c46:	71 81       	ldd	r23, Z+1	; 0x01
    5c48:	82 81       	ldd	r24, Z+2	; 0x02
    5c4a:	93 81       	ldd	r25, Z+3	; 0x03
    5c4c:	20 e0       	ldi	r18, 0x00	; 0
    5c4e:	30 e0       	ldi	r19, 0x00	; 0
    5c50:	40 e2       	ldi	r20, 0x20	; 32
    5c52:	51 e4       	ldi	r21, 0x41	; 65
    5c54:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5c58:	dc 01       	movw	r26, r24
    5c5a:	cb 01       	movw	r24, r22
    5c5c:	8e 01       	movw	r16, r28
    5c5e:	0b 58       	subi	r16, 0x8B	; 139
    5c60:	1f 4f       	sbci	r17, 0xFF	; 255
    5c62:	bc 01       	movw	r22, r24
    5c64:	cd 01       	movw	r24, r26
    5c66:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5c6a:	dc 01       	movw	r26, r24
    5c6c:	cb 01       	movw	r24, r22
    5c6e:	f8 01       	movw	r30, r16
    5c70:	91 83       	std	Z+1, r25	; 0x01
    5c72:	80 83       	st	Z, r24
    5c74:	1f c0       	rjmp	.+62     	; 0x5cb4 <AmmeterMode+0x2366>
    5c76:	fe 01       	movw	r30, r28
    5c78:	ed 58       	subi	r30, 0x8D	; 141
    5c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c7c:	89 e1       	ldi	r24, 0x19	; 25
    5c7e:	90 e0       	ldi	r25, 0x00	; 0
    5c80:	91 83       	std	Z+1, r25	; 0x01
    5c82:	80 83       	st	Z, r24
    5c84:	fe 01       	movw	r30, r28
    5c86:	ed 58       	subi	r30, 0x8D	; 141
    5c88:	ff 4f       	sbci	r31, 0xFF	; 255
    5c8a:	80 81       	ld	r24, Z
    5c8c:	91 81       	ldd	r25, Z+1	; 0x01
    5c8e:	01 97       	sbiw	r24, 0x01	; 1
    5c90:	f1 f7       	brne	.-4      	; 0x5c8e <AmmeterMode+0x2340>
    5c92:	fe 01       	movw	r30, r28
    5c94:	ed 58       	subi	r30, 0x8D	; 141
    5c96:	ff 4f       	sbci	r31, 0xFF	; 255
    5c98:	91 83       	std	Z+1, r25	; 0x01
    5c9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c9c:	de 01       	movw	r26, r28
    5c9e:	ab 58       	subi	r26, 0x8B	; 139
    5ca0:	bf 4f       	sbci	r27, 0xFF	; 255
    5ca2:	fe 01       	movw	r30, r28
    5ca4:	eb 58       	subi	r30, 0x8B	; 139
    5ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ca8:	80 81       	ld	r24, Z
    5caa:	91 81       	ldd	r25, Z+1	; 0x01
    5cac:	01 97       	sbiw	r24, 0x01	; 1
    5cae:	11 96       	adiw	r26, 0x01	; 1
    5cb0:	9c 93       	st	X, r25
    5cb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cb4:	fe 01       	movw	r30, r28
    5cb6:	eb 58       	subi	r30, 0x8B	; 139
    5cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cba:	80 81       	ld	r24, Z
    5cbc:	91 81       	ldd	r25, Z+1	; 0x01
    5cbe:	00 97       	sbiw	r24, 0x00	; 0
    5cc0:	d1 f6       	brne	.-76     	; 0x5c76 <AmmeterMode+0x2328>
    5cc2:	27 c0       	rjmp	.+78     	; 0x5d12 <AmmeterMode+0x23c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cc4:	8e 01       	movw	r16, r28
    5cc6:	0b 58       	subi	r16, 0x8B	; 139
    5cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    5cca:	fe 01       	movw	r30, r28
    5ccc:	e9 58       	subi	r30, 0x89	; 137
    5cce:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd0:	60 81       	ld	r22, Z
    5cd2:	71 81       	ldd	r23, Z+1	; 0x01
    5cd4:	82 81       	ldd	r24, Z+2	; 0x02
    5cd6:	93 81       	ldd	r25, Z+3	; 0x03
    5cd8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5cdc:	dc 01       	movw	r26, r24
    5cde:	cb 01       	movw	r24, r22
    5ce0:	f8 01       	movw	r30, r16
    5ce2:	91 83       	std	Z+1, r25	; 0x01
    5ce4:	80 83       	st	Z, r24
    5ce6:	de 01       	movw	r26, r28
    5ce8:	af 58       	subi	r26, 0x8F	; 143
    5cea:	bf 4f       	sbci	r27, 0xFF	; 255
    5cec:	fe 01       	movw	r30, r28
    5cee:	eb 58       	subi	r30, 0x8B	; 139
    5cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf2:	80 81       	ld	r24, Z
    5cf4:	91 81       	ldd	r25, Z+1	; 0x01
    5cf6:	8d 93       	st	X+, r24
    5cf8:	9c 93       	st	X, r25
    5cfa:	fe 01       	movw	r30, r28
    5cfc:	ef 58       	subi	r30, 0x8F	; 143
    5cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    5d00:	80 81       	ld	r24, Z
    5d02:	91 81       	ldd	r25, Z+1	; 0x01
    5d04:	01 97       	sbiw	r24, 0x01	; 1
    5d06:	f1 f7       	brne	.-4      	; 0x5d04 <AmmeterMode+0x23b6>
    5d08:	fe 01       	movw	r30, r28
    5d0a:	ef 58       	subi	r30, 0x8F	; 143
    5d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0e:	91 83       	std	Z+1, r25	; 0x01
    5d10:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_clearScreen();
    5d12:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
				num=0;
    5d16:	10 92 22 02 	sts	0x0222, r1
			}

			if(num==2){
    5d1a:	80 91 22 02 	lds	r24, 0x0222
    5d1e:	82 30       	cpi	r24, 0x02	; 2
    5d20:	09 f0       	breq	.+2      	; 0x5d24 <AmmeterMode+0x23d6>
    5d22:	93 c3       	rjmp	.+1830   	; 0x644a <AmmeterMode+0x2afc>
					LCD_displayString("2nd range");
    5d24:	8d ee       	ldi	r24, 0xED	; 237
    5d26:	90 e0       	ldi	r25, 0x00	; 0
    5d28:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    5d2c:	fe 01       	movw	r30, r28
    5d2e:	e3 59       	subi	r30, 0x93	; 147
    5d30:	ff 4f       	sbci	r31, 0xFF	; 255
    5d32:	80 e0       	ldi	r24, 0x00	; 0
    5d34:	90 e0       	ldi	r25, 0x00	; 0
    5d36:	aa ef       	ldi	r26, 0xFA	; 250
    5d38:	b3 e4       	ldi	r27, 0x43	; 67
    5d3a:	80 83       	st	Z, r24
    5d3c:	91 83       	std	Z+1, r25	; 0x01
    5d3e:	a2 83       	std	Z+2, r26	; 0x02
    5d40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d42:	8e 01       	movw	r16, r28
    5d44:	07 59       	subi	r16, 0x97	; 151
    5d46:	1f 4f       	sbci	r17, 0xFF	; 255
    5d48:	fe 01       	movw	r30, r28
    5d4a:	e3 59       	subi	r30, 0x93	; 147
    5d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d4e:	60 81       	ld	r22, Z
    5d50:	71 81       	ldd	r23, Z+1	; 0x01
    5d52:	82 81       	ldd	r24, Z+2	; 0x02
    5d54:	93 81       	ldd	r25, Z+3	; 0x03
    5d56:	20 e0       	ldi	r18, 0x00	; 0
    5d58:	30 e0       	ldi	r19, 0x00	; 0
    5d5a:	4a e7       	ldi	r20, 0x7A	; 122
    5d5c:	53 e4       	ldi	r21, 0x43	; 67
    5d5e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5d62:	dc 01       	movw	r26, r24
    5d64:	cb 01       	movw	r24, r22
    5d66:	f8 01       	movw	r30, r16
    5d68:	80 83       	st	Z, r24
    5d6a:	91 83       	std	Z+1, r25	; 0x01
    5d6c:	a2 83       	std	Z+2, r26	; 0x02
    5d6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d70:	fe 01       	movw	r30, r28
    5d72:	e7 59       	subi	r30, 0x97	; 151
    5d74:	ff 4f       	sbci	r31, 0xFF	; 255
    5d76:	60 81       	ld	r22, Z
    5d78:	71 81       	ldd	r23, Z+1	; 0x01
    5d7a:	82 81       	ldd	r24, Z+2	; 0x02
    5d7c:	93 81       	ldd	r25, Z+3	; 0x03
    5d7e:	20 e0       	ldi	r18, 0x00	; 0
    5d80:	30 e0       	ldi	r19, 0x00	; 0
    5d82:	40 e8       	ldi	r20, 0x80	; 128
    5d84:	5f e3       	ldi	r21, 0x3F	; 63
    5d86:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5d8a:	88 23       	and	r24, r24
    5d8c:	44 f4       	brge	.+16     	; 0x5d9e <AmmeterMode+0x2450>
		__ticks = 1;
    5d8e:	fe 01       	movw	r30, r28
    5d90:	e9 59       	subi	r30, 0x99	; 153
    5d92:	ff 4f       	sbci	r31, 0xFF	; 255
    5d94:	81 e0       	ldi	r24, 0x01	; 1
    5d96:	90 e0       	ldi	r25, 0x00	; 0
    5d98:	91 83       	std	Z+1, r25	; 0x01
    5d9a:	80 83       	st	Z, r24
    5d9c:	64 c0       	rjmp	.+200    	; 0x5e66 <AmmeterMode+0x2518>
	else if (__tmp > 65535)
    5d9e:	fe 01       	movw	r30, r28
    5da0:	e7 59       	subi	r30, 0x97	; 151
    5da2:	ff 4f       	sbci	r31, 0xFF	; 255
    5da4:	60 81       	ld	r22, Z
    5da6:	71 81       	ldd	r23, Z+1	; 0x01
    5da8:	82 81       	ldd	r24, Z+2	; 0x02
    5daa:	93 81       	ldd	r25, Z+3	; 0x03
    5dac:	20 e0       	ldi	r18, 0x00	; 0
    5dae:	3f ef       	ldi	r19, 0xFF	; 255
    5db0:	4f e7       	ldi	r20, 0x7F	; 127
    5db2:	57 e4       	ldi	r21, 0x47	; 71
    5db4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5db8:	18 16       	cp	r1, r24
    5dba:	0c f0       	brlt	.+2      	; 0x5dbe <AmmeterMode+0x2470>
    5dbc:	43 c0       	rjmp	.+134    	; 0x5e44 <AmmeterMode+0x24f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dbe:	fe 01       	movw	r30, r28
    5dc0:	e3 59       	subi	r30, 0x93	; 147
    5dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc4:	60 81       	ld	r22, Z
    5dc6:	71 81       	ldd	r23, Z+1	; 0x01
    5dc8:	82 81       	ldd	r24, Z+2	; 0x02
    5dca:	93 81       	ldd	r25, Z+3	; 0x03
    5dcc:	20 e0       	ldi	r18, 0x00	; 0
    5dce:	30 e0       	ldi	r19, 0x00	; 0
    5dd0:	40 e2       	ldi	r20, 0x20	; 32
    5dd2:	51 e4       	ldi	r21, 0x41	; 65
    5dd4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5dd8:	dc 01       	movw	r26, r24
    5dda:	cb 01       	movw	r24, r22
    5ddc:	8e 01       	movw	r16, r28
    5dde:	09 59       	subi	r16, 0x99	; 153
    5de0:	1f 4f       	sbci	r17, 0xFF	; 255
    5de2:	bc 01       	movw	r22, r24
    5de4:	cd 01       	movw	r24, r26
    5de6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5dea:	dc 01       	movw	r26, r24
    5dec:	cb 01       	movw	r24, r22
    5dee:	f8 01       	movw	r30, r16
    5df0:	91 83       	std	Z+1, r25	; 0x01
    5df2:	80 83       	st	Z, r24
    5df4:	1f c0       	rjmp	.+62     	; 0x5e34 <AmmeterMode+0x24e6>
    5df6:	fe 01       	movw	r30, r28
    5df8:	eb 59       	subi	r30, 0x9B	; 155
    5dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    5dfc:	89 e1       	ldi	r24, 0x19	; 25
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	91 83       	std	Z+1, r25	; 0x01
    5e02:	80 83       	st	Z, r24
    5e04:	fe 01       	movw	r30, r28
    5e06:	eb 59       	subi	r30, 0x9B	; 155
    5e08:	ff 4f       	sbci	r31, 0xFF	; 255
    5e0a:	80 81       	ld	r24, Z
    5e0c:	91 81       	ldd	r25, Z+1	; 0x01
    5e0e:	01 97       	sbiw	r24, 0x01	; 1
    5e10:	f1 f7       	brne	.-4      	; 0x5e0e <AmmeterMode+0x24c0>
    5e12:	fe 01       	movw	r30, r28
    5e14:	eb 59       	subi	r30, 0x9B	; 155
    5e16:	ff 4f       	sbci	r31, 0xFF	; 255
    5e18:	91 83       	std	Z+1, r25	; 0x01
    5e1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e1c:	de 01       	movw	r26, r28
    5e1e:	a9 59       	subi	r26, 0x99	; 153
    5e20:	bf 4f       	sbci	r27, 0xFF	; 255
    5e22:	fe 01       	movw	r30, r28
    5e24:	e9 59       	subi	r30, 0x99	; 153
    5e26:	ff 4f       	sbci	r31, 0xFF	; 255
    5e28:	80 81       	ld	r24, Z
    5e2a:	91 81       	ldd	r25, Z+1	; 0x01
    5e2c:	01 97       	sbiw	r24, 0x01	; 1
    5e2e:	11 96       	adiw	r26, 0x01	; 1
    5e30:	9c 93       	st	X, r25
    5e32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e34:	fe 01       	movw	r30, r28
    5e36:	e9 59       	subi	r30, 0x99	; 153
    5e38:	ff 4f       	sbci	r31, 0xFF	; 255
    5e3a:	80 81       	ld	r24, Z
    5e3c:	91 81       	ldd	r25, Z+1	; 0x01
    5e3e:	00 97       	sbiw	r24, 0x00	; 0
    5e40:	d1 f6       	brne	.-76     	; 0x5df6 <AmmeterMode+0x24a8>
    5e42:	27 c0       	rjmp	.+78     	; 0x5e92 <AmmeterMode+0x2544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e44:	8e 01       	movw	r16, r28
    5e46:	09 59       	subi	r16, 0x99	; 153
    5e48:	1f 4f       	sbci	r17, 0xFF	; 255
    5e4a:	fe 01       	movw	r30, r28
    5e4c:	e7 59       	subi	r30, 0x97	; 151
    5e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e50:	60 81       	ld	r22, Z
    5e52:	71 81       	ldd	r23, Z+1	; 0x01
    5e54:	82 81       	ldd	r24, Z+2	; 0x02
    5e56:	93 81       	ldd	r25, Z+3	; 0x03
    5e58:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5e5c:	dc 01       	movw	r26, r24
    5e5e:	cb 01       	movw	r24, r22
    5e60:	f8 01       	movw	r30, r16
    5e62:	91 83       	std	Z+1, r25	; 0x01
    5e64:	80 83       	st	Z, r24
    5e66:	de 01       	movw	r26, r28
    5e68:	ad 59       	subi	r26, 0x9D	; 157
    5e6a:	bf 4f       	sbci	r27, 0xFF	; 255
    5e6c:	fe 01       	movw	r30, r28
    5e6e:	e9 59       	subi	r30, 0x99	; 153
    5e70:	ff 4f       	sbci	r31, 0xFF	; 255
    5e72:	80 81       	ld	r24, Z
    5e74:	91 81       	ldd	r25, Z+1	; 0x01
    5e76:	8d 93       	st	X+, r24
    5e78:	9c 93       	st	X, r25
    5e7a:	fe 01       	movw	r30, r28
    5e7c:	ed 59       	subi	r30, 0x9D	; 157
    5e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e80:	80 81       	ld	r24, Z
    5e82:	91 81       	ldd	r25, Z+1	; 0x01
    5e84:	01 97       	sbiw	r24, 0x01	; 1
    5e86:	f1 f7       	brne	.-4      	; 0x5e84 <AmmeterMode+0x2536>
    5e88:	fe 01       	movw	r30, r28
    5e8a:	ed 59       	subi	r30, 0x9D	; 157
    5e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e8e:	91 83       	std	Z+1, r25	; 0x01
    5e90:	80 83       	st	Z, r24
					_delay_ms(500);
					LCD_clearScreen();
    5e92:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>

					GPIO_writePin(PORTB_ID, PIN0_ID, 0);
    5e96:	81 e0       	ldi	r24, 0x01	; 1
    5e98:	60 e0       	ldi	r22, 0x00	; 0
    5e9a:	40 e0       	ldi	r20, 0x00	; 0
    5e9c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
					GPIO_writePin(PORTB_ID, PIN1_ID, 1);
    5ea0:	81 e0       	ldi	r24, 0x01	; 1
    5ea2:	61 e0       	ldi	r22, 0x01	; 1
    5ea4:	41 e0       	ldi	r20, 0x01	; 1
    5ea6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    5eaa:	fe 01       	movw	r30, r28
    5eac:	e1 5a       	subi	r30, 0xA1	; 161
    5eae:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb0:	80 e0       	ldi	r24, 0x00	; 0
    5eb2:	90 e0       	ldi	r25, 0x00	; 0
    5eb4:	a8 ec       	ldi	r26, 0xC8	; 200
    5eb6:	b2 e4       	ldi	r27, 0x42	; 66
    5eb8:	80 83       	st	Z, r24
    5eba:	91 83       	std	Z+1, r25	; 0x01
    5ebc:	a2 83       	std	Z+2, r26	; 0x02
    5ebe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ec0:	8e 01       	movw	r16, r28
    5ec2:	05 5a       	subi	r16, 0xA5	; 165
    5ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ec6:	fe 01       	movw	r30, r28
    5ec8:	e1 5a       	subi	r30, 0xA1	; 161
    5eca:	ff 4f       	sbci	r31, 0xFF	; 255
    5ecc:	60 81       	ld	r22, Z
    5ece:	71 81       	ldd	r23, Z+1	; 0x01
    5ed0:	82 81       	ldd	r24, Z+2	; 0x02
    5ed2:	93 81       	ldd	r25, Z+3	; 0x03
    5ed4:	20 e0       	ldi	r18, 0x00	; 0
    5ed6:	30 e0       	ldi	r19, 0x00	; 0
    5ed8:	4a e7       	ldi	r20, 0x7A	; 122
    5eda:	53 e4       	ldi	r21, 0x43	; 67
    5edc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5ee0:	dc 01       	movw	r26, r24
    5ee2:	cb 01       	movw	r24, r22
    5ee4:	f8 01       	movw	r30, r16
    5ee6:	80 83       	st	Z, r24
    5ee8:	91 83       	std	Z+1, r25	; 0x01
    5eea:	a2 83       	std	Z+2, r26	; 0x02
    5eec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5eee:	fe 01       	movw	r30, r28
    5ef0:	e5 5a       	subi	r30, 0xA5	; 165
    5ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ef4:	60 81       	ld	r22, Z
    5ef6:	71 81       	ldd	r23, Z+1	; 0x01
    5ef8:	82 81       	ldd	r24, Z+2	; 0x02
    5efa:	93 81       	ldd	r25, Z+3	; 0x03
    5efc:	20 e0       	ldi	r18, 0x00	; 0
    5efe:	30 e0       	ldi	r19, 0x00	; 0
    5f00:	40 e8       	ldi	r20, 0x80	; 128
    5f02:	5f e3       	ldi	r21, 0x3F	; 63
    5f04:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5f08:	88 23       	and	r24, r24
    5f0a:	44 f4       	brge	.+16     	; 0x5f1c <AmmeterMode+0x25ce>
		__ticks = 1;
    5f0c:	fe 01       	movw	r30, r28
    5f0e:	e7 5a       	subi	r30, 0xA7	; 167
    5f10:	ff 4f       	sbci	r31, 0xFF	; 255
    5f12:	81 e0       	ldi	r24, 0x01	; 1
    5f14:	90 e0       	ldi	r25, 0x00	; 0
    5f16:	91 83       	std	Z+1, r25	; 0x01
    5f18:	80 83       	st	Z, r24
    5f1a:	64 c0       	rjmp	.+200    	; 0x5fe4 <AmmeterMode+0x2696>
	else if (__tmp > 65535)
    5f1c:	fe 01       	movw	r30, r28
    5f1e:	e5 5a       	subi	r30, 0xA5	; 165
    5f20:	ff 4f       	sbci	r31, 0xFF	; 255
    5f22:	60 81       	ld	r22, Z
    5f24:	71 81       	ldd	r23, Z+1	; 0x01
    5f26:	82 81       	ldd	r24, Z+2	; 0x02
    5f28:	93 81       	ldd	r25, Z+3	; 0x03
    5f2a:	20 e0       	ldi	r18, 0x00	; 0
    5f2c:	3f ef       	ldi	r19, 0xFF	; 255
    5f2e:	4f e7       	ldi	r20, 0x7F	; 127
    5f30:	57 e4       	ldi	r21, 0x47	; 71
    5f32:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5f36:	18 16       	cp	r1, r24
    5f38:	0c f0       	brlt	.+2      	; 0x5f3c <AmmeterMode+0x25ee>
    5f3a:	43 c0       	rjmp	.+134    	; 0x5fc2 <AmmeterMode+0x2674>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f3c:	fe 01       	movw	r30, r28
    5f3e:	e1 5a       	subi	r30, 0xA1	; 161
    5f40:	ff 4f       	sbci	r31, 0xFF	; 255
    5f42:	60 81       	ld	r22, Z
    5f44:	71 81       	ldd	r23, Z+1	; 0x01
    5f46:	82 81       	ldd	r24, Z+2	; 0x02
    5f48:	93 81       	ldd	r25, Z+3	; 0x03
    5f4a:	20 e0       	ldi	r18, 0x00	; 0
    5f4c:	30 e0       	ldi	r19, 0x00	; 0
    5f4e:	40 e2       	ldi	r20, 0x20	; 32
    5f50:	51 e4       	ldi	r21, 0x41	; 65
    5f52:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5f56:	dc 01       	movw	r26, r24
    5f58:	cb 01       	movw	r24, r22
    5f5a:	8e 01       	movw	r16, r28
    5f5c:	07 5a       	subi	r16, 0xA7	; 167
    5f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    5f60:	bc 01       	movw	r22, r24
    5f62:	cd 01       	movw	r24, r26
    5f64:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5f68:	dc 01       	movw	r26, r24
    5f6a:	cb 01       	movw	r24, r22
    5f6c:	f8 01       	movw	r30, r16
    5f6e:	91 83       	std	Z+1, r25	; 0x01
    5f70:	80 83       	st	Z, r24
    5f72:	1f c0       	rjmp	.+62     	; 0x5fb2 <AmmeterMode+0x2664>
    5f74:	fe 01       	movw	r30, r28
    5f76:	e9 5a       	subi	r30, 0xA9	; 169
    5f78:	ff 4f       	sbci	r31, 0xFF	; 255
    5f7a:	89 e1       	ldi	r24, 0x19	; 25
    5f7c:	90 e0       	ldi	r25, 0x00	; 0
    5f7e:	91 83       	std	Z+1, r25	; 0x01
    5f80:	80 83       	st	Z, r24
    5f82:	fe 01       	movw	r30, r28
    5f84:	e9 5a       	subi	r30, 0xA9	; 169
    5f86:	ff 4f       	sbci	r31, 0xFF	; 255
    5f88:	80 81       	ld	r24, Z
    5f8a:	91 81       	ldd	r25, Z+1	; 0x01
    5f8c:	01 97       	sbiw	r24, 0x01	; 1
    5f8e:	f1 f7       	brne	.-4      	; 0x5f8c <AmmeterMode+0x263e>
    5f90:	fe 01       	movw	r30, r28
    5f92:	e9 5a       	subi	r30, 0xA9	; 169
    5f94:	ff 4f       	sbci	r31, 0xFF	; 255
    5f96:	91 83       	std	Z+1, r25	; 0x01
    5f98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f9a:	de 01       	movw	r26, r28
    5f9c:	a7 5a       	subi	r26, 0xA7	; 167
    5f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    5fa0:	fe 01       	movw	r30, r28
    5fa2:	e7 5a       	subi	r30, 0xA7	; 167
    5fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    5fa6:	80 81       	ld	r24, Z
    5fa8:	91 81       	ldd	r25, Z+1	; 0x01
    5faa:	01 97       	sbiw	r24, 0x01	; 1
    5fac:	11 96       	adiw	r26, 0x01	; 1
    5fae:	9c 93       	st	X, r25
    5fb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fb2:	fe 01       	movw	r30, r28
    5fb4:	e7 5a       	subi	r30, 0xA7	; 167
    5fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb8:	80 81       	ld	r24, Z
    5fba:	91 81       	ldd	r25, Z+1	; 0x01
    5fbc:	00 97       	sbiw	r24, 0x00	; 0
    5fbe:	d1 f6       	brne	.-76     	; 0x5f74 <AmmeterMode+0x2626>
    5fc0:	27 c0       	rjmp	.+78     	; 0x6010 <AmmeterMode+0x26c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fc2:	8e 01       	movw	r16, r28
    5fc4:	07 5a       	subi	r16, 0xA7	; 167
    5fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    5fc8:	fe 01       	movw	r30, r28
    5fca:	e5 5a       	subi	r30, 0xA5	; 165
    5fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fce:	60 81       	ld	r22, Z
    5fd0:	71 81       	ldd	r23, Z+1	; 0x01
    5fd2:	82 81       	ldd	r24, Z+2	; 0x02
    5fd4:	93 81       	ldd	r25, Z+3	; 0x03
    5fd6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5fda:	dc 01       	movw	r26, r24
    5fdc:	cb 01       	movw	r24, r22
    5fde:	f8 01       	movw	r30, r16
    5fe0:	91 83       	std	Z+1, r25	; 0x01
    5fe2:	80 83       	st	Z, r24
    5fe4:	de 01       	movw	r26, r28
    5fe6:	ab 5a       	subi	r26, 0xAB	; 171
    5fe8:	bf 4f       	sbci	r27, 0xFF	; 255
    5fea:	fe 01       	movw	r30, r28
    5fec:	e7 5a       	subi	r30, 0xA7	; 167
    5fee:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff0:	80 81       	ld	r24, Z
    5ff2:	91 81       	ldd	r25, Z+1	; 0x01
    5ff4:	8d 93       	st	X+, r24
    5ff6:	9c 93       	st	X, r25
    5ff8:	fe 01       	movw	r30, r28
    5ffa:	eb 5a       	subi	r30, 0xAB	; 171
    5ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ffe:	80 81       	ld	r24, Z
    6000:	91 81       	ldd	r25, Z+1	; 0x01
    6002:	01 97       	sbiw	r24, 0x01	; 1
    6004:	f1 f7       	brne	.-4      	; 0x6002 <AmmeterMode+0x26b4>
    6006:	fe 01       	movw	r30, r28
    6008:	eb 5a       	subi	r30, 0xAB	; 171
    600a:	ff 4f       	sbci	r31, 0xFF	; 255
    600c:	91 83       	std	Z+1, r25	; 0x01
    600e:	80 83       	st	Z, r24
					_delay_ms(100);

					adc1=ADC_readChannel(1);
    6010:	81 e0       	ldi	r24, 0x01	; 1
    6012:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    6016:	cc 01       	movw	r24, r24
    6018:	a0 e0       	ldi	r26, 0x00	; 0
    601a:	b0 e0       	ldi	r27, 0x00	; 0
    601c:	bc 01       	movw	r22, r24
    601e:	cd 01       	movw	r24, r26
    6020:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    6024:	dc 01       	movw	r26, r24
    6026:	cb 01       	movw	r24, r22
    6028:	80 93 30 02 	sts	0x0230, r24
    602c:	90 93 31 02 	sts	0x0231, r25
    6030:	a0 93 32 02 	sts	0x0232, r26
    6034:	b0 93 33 02 	sts	0x0233, r27
									max=adc1;
    6038:	80 91 30 02 	lds	r24, 0x0230
    603c:	90 91 31 02 	lds	r25, 0x0231
    6040:	a0 91 32 02 	lds	r26, 0x0232
    6044:	b0 91 33 02 	lds	r27, 0x0233
    6048:	80 93 34 02 	sts	0x0234, r24
    604c:	90 93 35 02 	sts	0x0235, r25
    6050:	a0 93 36 02 	sts	0x0236, r26
    6054:	b0 93 37 02 	sts	0x0237, r27
									for(int i=0;i<50;i++)
    6058:	fe 01       	movw	r30, r28
    605a:	e7 56       	subi	r30, 0x67	; 103
    605c:	fe 4f       	sbci	r31, 0xFE	; 254
    605e:	11 82       	std	Z+1, r1	; 0x01
    6060:	10 82       	st	Z, r1
    6062:	46 c0       	rjmp	.+140    	; 0x60f0 <AmmeterMode+0x27a2>
									{
										adc1=ADC_readChannel(1);
    6064:	81 e0       	ldi	r24, 0x01	; 1
    6066:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    606a:	cc 01       	movw	r24, r24
    606c:	a0 e0       	ldi	r26, 0x00	; 0
    606e:	b0 e0       	ldi	r27, 0x00	; 0
    6070:	bc 01       	movw	r22, r24
    6072:	cd 01       	movw	r24, r26
    6074:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    6078:	dc 01       	movw	r26, r24
    607a:	cb 01       	movw	r24, r22
    607c:	80 93 30 02 	sts	0x0230, r24
    6080:	90 93 31 02 	sts	0x0231, r25
    6084:	a0 93 32 02 	sts	0x0232, r26
    6088:	b0 93 33 02 	sts	0x0233, r27
										if(adc1>max)
    608c:	80 91 30 02 	lds	r24, 0x0230
    6090:	90 91 31 02 	lds	r25, 0x0231
    6094:	a0 91 32 02 	lds	r26, 0x0232
    6098:	b0 91 33 02 	lds	r27, 0x0233
    609c:	20 91 34 02 	lds	r18, 0x0234
    60a0:	30 91 35 02 	lds	r19, 0x0235
    60a4:	40 91 36 02 	lds	r20, 0x0236
    60a8:	50 91 37 02 	lds	r21, 0x0237
    60ac:	bc 01       	movw	r22, r24
    60ae:	cd 01       	movw	r24, r26
    60b0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    60b4:	18 16       	cp	r1, r24
    60b6:	84 f4       	brge	.+32     	; 0x60d8 <AmmeterMode+0x278a>
										{
										max=adc1;
    60b8:	80 91 30 02 	lds	r24, 0x0230
    60bc:	90 91 31 02 	lds	r25, 0x0231
    60c0:	a0 91 32 02 	lds	r26, 0x0232
    60c4:	b0 91 33 02 	lds	r27, 0x0233
    60c8:	80 93 34 02 	sts	0x0234, r24
    60cc:	90 93 35 02 	sts	0x0235, r25
    60d0:	a0 93 36 02 	sts	0x0236, r26
    60d4:	b0 93 37 02 	sts	0x0237, r27
					GPIO_writePin(PORTB_ID, PIN1_ID, 1);
					_delay_ms(100);

					adc1=ADC_readChannel(1);
									max=adc1;
									for(int i=0;i<50;i++)
    60d8:	de 01       	movw	r26, r28
    60da:	a7 56       	subi	r26, 0x67	; 103
    60dc:	be 4f       	sbci	r27, 0xFE	; 254
    60de:	fe 01       	movw	r30, r28
    60e0:	e7 56       	subi	r30, 0x67	; 103
    60e2:	fe 4f       	sbci	r31, 0xFE	; 254
    60e4:	80 81       	ld	r24, Z
    60e6:	91 81       	ldd	r25, Z+1	; 0x01
    60e8:	01 96       	adiw	r24, 0x01	; 1
    60ea:	11 96       	adiw	r26, 0x01	; 1
    60ec:	9c 93       	st	X, r25
    60ee:	8e 93       	st	-X, r24
    60f0:	fe 01       	movw	r30, r28
    60f2:	e7 56       	subi	r30, 0x67	; 103
    60f4:	fe 4f       	sbci	r31, 0xFE	; 254
    60f6:	80 81       	ld	r24, Z
    60f8:	91 81       	ldd	r25, Z+1	; 0x01
    60fa:	82 33       	cpi	r24, 0x32	; 50
    60fc:	91 05       	cpc	r25, r1
    60fe:	0c f4       	brge	.+2      	; 0x6102 <AmmeterMode+0x27b4>
    6100:	b1 cf       	rjmp	.-158    	; 0x6064 <AmmeterMode+0x2716>
										if(adc1>max)
										{
										max=adc1;
										}
									}
									adc1=max;
    6102:	80 91 34 02 	lds	r24, 0x0234
    6106:	90 91 35 02 	lds	r25, 0x0235
    610a:	a0 91 36 02 	lds	r26, 0x0236
    610e:	b0 91 37 02 	lds	r27, 0x0237
    6112:	80 93 30 02 	sts	0x0230, r24
    6116:	90 93 31 02 	sts	0x0231, r25
    611a:	a0 93 32 02 	sts	0x0232, r26
    611e:	b0 93 33 02 	sts	0x0233, r27
					LCD_displayString("ADC=");
    6122:	8c ec       	ldi	r24, 0xCC	; 204
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
					LCD_displayFloat(adc1,2);
    612a:	80 91 30 02 	lds	r24, 0x0230
    612e:	90 91 31 02 	lds	r25, 0x0231
    6132:	a0 91 32 02 	lds	r26, 0x0232
    6136:	b0 91 33 02 	lds	r27, 0x0233
    613a:	bc 01       	movw	r22, r24
    613c:	cd 01       	movw	r24, r26
    613e:	42 e0       	ldi	r20, 0x02	; 2
    6140:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    6144:	fe 01       	movw	r30, r28
    6146:	ef 5a       	subi	r30, 0xAF	; 175
    6148:	ff 4f       	sbci	r31, 0xFF	; 255
    614a:	80 e0       	ldi	r24, 0x00	; 0
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	aa ef       	ldi	r26, 0xFA	; 250
    6150:	b3 e4       	ldi	r27, 0x43	; 67
    6152:	80 83       	st	Z, r24
    6154:	91 83       	std	Z+1, r25	; 0x01
    6156:	a2 83       	std	Z+2, r26	; 0x02
    6158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    615a:	8e 01       	movw	r16, r28
    615c:	03 5b       	subi	r16, 0xB3	; 179
    615e:	1f 4f       	sbci	r17, 0xFF	; 255
    6160:	fe 01       	movw	r30, r28
    6162:	ef 5a       	subi	r30, 0xAF	; 175
    6164:	ff 4f       	sbci	r31, 0xFF	; 255
    6166:	60 81       	ld	r22, Z
    6168:	71 81       	ldd	r23, Z+1	; 0x01
    616a:	82 81       	ldd	r24, Z+2	; 0x02
    616c:	93 81       	ldd	r25, Z+3	; 0x03
    616e:	20 e0       	ldi	r18, 0x00	; 0
    6170:	30 e0       	ldi	r19, 0x00	; 0
    6172:	4a e7       	ldi	r20, 0x7A	; 122
    6174:	53 e4       	ldi	r21, 0x43	; 67
    6176:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    617a:	dc 01       	movw	r26, r24
    617c:	cb 01       	movw	r24, r22
    617e:	f8 01       	movw	r30, r16
    6180:	80 83       	st	Z, r24
    6182:	91 83       	std	Z+1, r25	; 0x01
    6184:	a2 83       	std	Z+2, r26	; 0x02
    6186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6188:	fe 01       	movw	r30, r28
    618a:	e3 5b       	subi	r30, 0xB3	; 179
    618c:	ff 4f       	sbci	r31, 0xFF	; 255
    618e:	60 81       	ld	r22, Z
    6190:	71 81       	ldd	r23, Z+1	; 0x01
    6192:	82 81       	ldd	r24, Z+2	; 0x02
    6194:	93 81       	ldd	r25, Z+3	; 0x03
    6196:	20 e0       	ldi	r18, 0x00	; 0
    6198:	30 e0       	ldi	r19, 0x00	; 0
    619a:	40 e8       	ldi	r20, 0x80	; 128
    619c:	5f e3       	ldi	r21, 0x3F	; 63
    619e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    61a2:	88 23       	and	r24, r24
    61a4:	44 f4       	brge	.+16     	; 0x61b6 <AmmeterMode+0x2868>
		__ticks = 1;
    61a6:	fe 01       	movw	r30, r28
    61a8:	e5 5b       	subi	r30, 0xB5	; 181
    61aa:	ff 4f       	sbci	r31, 0xFF	; 255
    61ac:	81 e0       	ldi	r24, 0x01	; 1
    61ae:	90 e0       	ldi	r25, 0x00	; 0
    61b0:	91 83       	std	Z+1, r25	; 0x01
    61b2:	80 83       	st	Z, r24
    61b4:	64 c0       	rjmp	.+200    	; 0x627e <AmmeterMode+0x2930>
	else if (__tmp > 65535)
    61b6:	fe 01       	movw	r30, r28
    61b8:	e3 5b       	subi	r30, 0xB3	; 179
    61ba:	ff 4f       	sbci	r31, 0xFF	; 255
    61bc:	60 81       	ld	r22, Z
    61be:	71 81       	ldd	r23, Z+1	; 0x01
    61c0:	82 81       	ldd	r24, Z+2	; 0x02
    61c2:	93 81       	ldd	r25, Z+3	; 0x03
    61c4:	20 e0       	ldi	r18, 0x00	; 0
    61c6:	3f ef       	ldi	r19, 0xFF	; 255
    61c8:	4f e7       	ldi	r20, 0x7F	; 127
    61ca:	57 e4       	ldi	r21, 0x47	; 71
    61cc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    61d0:	18 16       	cp	r1, r24
    61d2:	0c f0       	brlt	.+2      	; 0x61d6 <AmmeterMode+0x2888>
    61d4:	43 c0       	rjmp	.+134    	; 0x625c <AmmeterMode+0x290e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61d6:	fe 01       	movw	r30, r28
    61d8:	ef 5a       	subi	r30, 0xAF	; 175
    61da:	ff 4f       	sbci	r31, 0xFF	; 255
    61dc:	60 81       	ld	r22, Z
    61de:	71 81       	ldd	r23, Z+1	; 0x01
    61e0:	82 81       	ldd	r24, Z+2	; 0x02
    61e2:	93 81       	ldd	r25, Z+3	; 0x03
    61e4:	20 e0       	ldi	r18, 0x00	; 0
    61e6:	30 e0       	ldi	r19, 0x00	; 0
    61e8:	40 e2       	ldi	r20, 0x20	; 32
    61ea:	51 e4       	ldi	r21, 0x41	; 65
    61ec:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    61f0:	dc 01       	movw	r26, r24
    61f2:	cb 01       	movw	r24, r22
    61f4:	8e 01       	movw	r16, r28
    61f6:	05 5b       	subi	r16, 0xB5	; 181
    61f8:	1f 4f       	sbci	r17, 0xFF	; 255
    61fa:	bc 01       	movw	r22, r24
    61fc:	cd 01       	movw	r24, r26
    61fe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    6202:	dc 01       	movw	r26, r24
    6204:	cb 01       	movw	r24, r22
    6206:	f8 01       	movw	r30, r16
    6208:	91 83       	std	Z+1, r25	; 0x01
    620a:	80 83       	st	Z, r24
    620c:	1f c0       	rjmp	.+62     	; 0x624c <AmmeterMode+0x28fe>
    620e:	fe 01       	movw	r30, r28
    6210:	e7 5b       	subi	r30, 0xB7	; 183
    6212:	ff 4f       	sbci	r31, 0xFF	; 255
    6214:	89 e1       	ldi	r24, 0x19	; 25
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	91 83       	std	Z+1, r25	; 0x01
    621a:	80 83       	st	Z, r24
    621c:	fe 01       	movw	r30, r28
    621e:	e7 5b       	subi	r30, 0xB7	; 183
    6220:	ff 4f       	sbci	r31, 0xFF	; 255
    6222:	80 81       	ld	r24, Z
    6224:	91 81       	ldd	r25, Z+1	; 0x01
    6226:	01 97       	sbiw	r24, 0x01	; 1
    6228:	f1 f7       	brne	.-4      	; 0x6226 <AmmeterMode+0x28d8>
    622a:	fe 01       	movw	r30, r28
    622c:	e7 5b       	subi	r30, 0xB7	; 183
    622e:	ff 4f       	sbci	r31, 0xFF	; 255
    6230:	91 83       	std	Z+1, r25	; 0x01
    6232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6234:	de 01       	movw	r26, r28
    6236:	a5 5b       	subi	r26, 0xB5	; 181
    6238:	bf 4f       	sbci	r27, 0xFF	; 255
    623a:	fe 01       	movw	r30, r28
    623c:	e5 5b       	subi	r30, 0xB5	; 181
    623e:	ff 4f       	sbci	r31, 0xFF	; 255
    6240:	80 81       	ld	r24, Z
    6242:	91 81       	ldd	r25, Z+1	; 0x01
    6244:	01 97       	sbiw	r24, 0x01	; 1
    6246:	11 96       	adiw	r26, 0x01	; 1
    6248:	9c 93       	st	X, r25
    624a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    624c:	fe 01       	movw	r30, r28
    624e:	e5 5b       	subi	r30, 0xB5	; 181
    6250:	ff 4f       	sbci	r31, 0xFF	; 255
    6252:	80 81       	ld	r24, Z
    6254:	91 81       	ldd	r25, Z+1	; 0x01
    6256:	00 97       	sbiw	r24, 0x00	; 0
    6258:	d1 f6       	brne	.-76     	; 0x620e <AmmeterMode+0x28c0>
    625a:	27 c0       	rjmp	.+78     	; 0x62aa <AmmeterMode+0x295c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    625c:	8e 01       	movw	r16, r28
    625e:	05 5b       	subi	r16, 0xB5	; 181
    6260:	1f 4f       	sbci	r17, 0xFF	; 255
    6262:	fe 01       	movw	r30, r28
    6264:	e3 5b       	subi	r30, 0xB3	; 179
    6266:	ff 4f       	sbci	r31, 0xFF	; 255
    6268:	60 81       	ld	r22, Z
    626a:	71 81       	ldd	r23, Z+1	; 0x01
    626c:	82 81       	ldd	r24, Z+2	; 0x02
    626e:	93 81       	ldd	r25, Z+3	; 0x03
    6270:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    6274:	dc 01       	movw	r26, r24
    6276:	cb 01       	movw	r24, r22
    6278:	f8 01       	movw	r30, r16
    627a:	91 83       	std	Z+1, r25	; 0x01
    627c:	80 83       	st	Z, r24
    627e:	de 01       	movw	r26, r28
    6280:	a9 5b       	subi	r26, 0xB9	; 185
    6282:	bf 4f       	sbci	r27, 0xFF	; 255
    6284:	fe 01       	movw	r30, r28
    6286:	e5 5b       	subi	r30, 0xB5	; 181
    6288:	ff 4f       	sbci	r31, 0xFF	; 255
    628a:	80 81       	ld	r24, Z
    628c:	91 81       	ldd	r25, Z+1	; 0x01
    628e:	8d 93       	st	X+, r24
    6290:	9c 93       	st	X, r25
    6292:	fe 01       	movw	r30, r28
    6294:	e9 5b       	subi	r30, 0xB9	; 185
    6296:	ff 4f       	sbci	r31, 0xFF	; 255
    6298:	80 81       	ld	r24, Z
    629a:	91 81       	ldd	r25, Z+1	; 0x01
    629c:	01 97       	sbiw	r24, 0x01	; 1
    629e:	f1 f7       	brne	.-4      	; 0x629c <AmmeterMode+0x294e>
    62a0:	fe 01       	movw	r30, r28
    62a2:	e9 5b       	subi	r30, 0xB9	; 185
    62a4:	ff 4f       	sbci	r31, 0xFF	; 255
    62a6:	91 83       	std	Z+1, r25	; 0x01
    62a8:	80 83       	st	Z, r24
					_delay_ms(500);
					LCD_clearScreen();
    62aa:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>

					Vout = adc1*(5.0/1023);
    62ae:	80 91 30 02 	lds	r24, 0x0230
    62b2:	90 91 31 02 	lds	r25, 0x0231
    62b6:	a0 91 32 02 	lds	r26, 0x0232
    62ba:	b0 91 33 02 	lds	r27, 0x0233
    62be:	bc 01       	movw	r22, r24
    62c0:	cd 01       	movw	r24, r26
    62c2:	2a e0       	ldi	r18, 0x0A	; 10
    62c4:	38 e2       	ldi	r19, 0x28	; 40
    62c6:	40 ea       	ldi	r20, 0xA0	; 160
    62c8:	5b e3       	ldi	r21, 0x3B	; 59
    62ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    62ce:	dc 01       	movw	r26, r24
    62d0:	cb 01       	movw	r24, r22
    62d2:	80 93 38 02 	sts	0x0238, r24
    62d6:	90 93 39 02 	sts	0x0239, r25
    62da:	a0 93 3a 02 	sts	0x023A, r26
    62de:	b0 93 3b 02 	sts	0x023B, r27
					amp=Vout/(10.0*4.6); //Range 10:100mA (Rs=4.5)
    62e2:	80 91 38 02 	lds	r24, 0x0238
    62e6:	90 91 39 02 	lds	r25, 0x0239
    62ea:	a0 91 3a 02 	lds	r26, 0x023A
    62ee:	b0 91 3b 02 	lds	r27, 0x023B
    62f2:	bc 01       	movw	r22, r24
    62f4:	cd 01       	movw	r24, r26
    62f6:	20 e0       	ldi	r18, 0x00	; 0
    62f8:	30 e0       	ldi	r19, 0x00	; 0
    62fa:	48 e3       	ldi	r20, 0x38	; 56
    62fc:	52 e4       	ldi	r21, 0x42	; 66
    62fe:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    6302:	dc 01       	movw	r26, r24
    6304:	cb 01       	movw	r24, r22
    6306:	80 93 24 02 	sts	0x0224, r24
    630a:	90 93 25 02 	sts	0x0225, r25
    630e:	a0 93 26 02 	sts	0x0226, r26
    6312:	b0 93 27 02 	sts	0x0227, r27
					LCD_displayString("Amp=");
    6316:	8b ed       	ldi	r24, 0xDB	; 219
    6318:	90 e0       	ldi	r25, 0x00	; 0
    631a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
					LCD_displayFloat(amp,5);
    631e:	80 91 24 02 	lds	r24, 0x0224
    6322:	90 91 25 02 	lds	r25, 0x0225
    6326:	a0 91 26 02 	lds	r26, 0x0226
    632a:	b0 91 27 02 	lds	r27, 0x0227
    632e:	bc 01       	movw	r22, r24
    6330:	cd 01       	movw	r24, r26
    6332:	45 e0       	ldi	r20, 0x05	; 5
    6334:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    6338:	fe 01       	movw	r30, r28
    633a:	ed 5b       	subi	r30, 0xBD	; 189
    633c:	ff 4f       	sbci	r31, 0xFF	; 255
    633e:	80 e0       	ldi	r24, 0x00	; 0
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	aa ef       	ldi	r26, 0xFA	; 250
    6344:	b3 e4       	ldi	r27, 0x43	; 67
    6346:	80 83       	st	Z, r24
    6348:	91 83       	std	Z+1, r25	; 0x01
    634a:	a2 83       	std	Z+2, r26	; 0x02
    634c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    634e:	8e 01       	movw	r16, r28
    6350:	01 5c       	subi	r16, 0xC1	; 193
    6352:	1f 4f       	sbci	r17, 0xFF	; 255
    6354:	fe 01       	movw	r30, r28
    6356:	ed 5b       	subi	r30, 0xBD	; 189
    6358:	ff 4f       	sbci	r31, 0xFF	; 255
    635a:	60 81       	ld	r22, Z
    635c:	71 81       	ldd	r23, Z+1	; 0x01
    635e:	82 81       	ldd	r24, Z+2	; 0x02
    6360:	93 81       	ldd	r25, Z+3	; 0x03
    6362:	20 e0       	ldi	r18, 0x00	; 0
    6364:	30 e0       	ldi	r19, 0x00	; 0
    6366:	4a e7       	ldi	r20, 0x7A	; 122
    6368:	53 e4       	ldi	r21, 0x43	; 67
    636a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    636e:	dc 01       	movw	r26, r24
    6370:	cb 01       	movw	r24, r22
    6372:	f8 01       	movw	r30, r16
    6374:	80 83       	st	Z, r24
    6376:	91 83       	std	Z+1, r25	; 0x01
    6378:	a2 83       	std	Z+2, r26	; 0x02
    637a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    637c:	fe 01       	movw	r30, r28
    637e:	ff 96       	adiw	r30, 0x3f	; 63
    6380:	60 81       	ld	r22, Z
    6382:	71 81       	ldd	r23, Z+1	; 0x01
    6384:	82 81       	ldd	r24, Z+2	; 0x02
    6386:	93 81       	ldd	r25, Z+3	; 0x03
    6388:	20 e0       	ldi	r18, 0x00	; 0
    638a:	30 e0       	ldi	r19, 0x00	; 0
    638c:	40 e8       	ldi	r20, 0x80	; 128
    638e:	5f e3       	ldi	r21, 0x3F	; 63
    6390:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    6394:	88 23       	and	r24, r24
    6396:	2c f4       	brge	.+10     	; 0x63a2 <AmmeterMode+0x2a54>
		__ticks = 1;
    6398:	81 e0       	ldi	r24, 0x01	; 1
    639a:	90 e0       	ldi	r25, 0x00	; 0
    639c:	9e af       	std	Y+62, r25	; 0x3e
    639e:	8d af       	std	Y+61, r24	; 0x3d
    63a0:	46 c0       	rjmp	.+140    	; 0x642e <AmmeterMode+0x2ae0>
	else if (__tmp > 65535)
    63a2:	fe 01       	movw	r30, r28
    63a4:	ff 96       	adiw	r30, 0x3f	; 63
    63a6:	60 81       	ld	r22, Z
    63a8:	71 81       	ldd	r23, Z+1	; 0x01
    63aa:	82 81       	ldd	r24, Z+2	; 0x02
    63ac:	93 81       	ldd	r25, Z+3	; 0x03
    63ae:	20 e0       	ldi	r18, 0x00	; 0
    63b0:	3f ef       	ldi	r19, 0xFF	; 255
    63b2:	4f e7       	ldi	r20, 0x7F	; 127
    63b4:	57 e4       	ldi	r21, 0x47	; 71
    63b6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    63ba:	18 16       	cp	r1, r24
    63bc:	64 f5       	brge	.+88     	; 0x6416 <AmmeterMode+0x2ac8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63be:	fe 01       	movw	r30, r28
    63c0:	ed 5b       	subi	r30, 0xBD	; 189
    63c2:	ff 4f       	sbci	r31, 0xFF	; 255
    63c4:	60 81       	ld	r22, Z
    63c6:	71 81       	ldd	r23, Z+1	; 0x01
    63c8:	82 81       	ldd	r24, Z+2	; 0x02
    63ca:	93 81       	ldd	r25, Z+3	; 0x03
    63cc:	20 e0       	ldi	r18, 0x00	; 0
    63ce:	30 e0       	ldi	r19, 0x00	; 0
    63d0:	40 e2       	ldi	r20, 0x20	; 32
    63d2:	51 e4       	ldi	r21, 0x41	; 65
    63d4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    63d8:	dc 01       	movw	r26, r24
    63da:	cb 01       	movw	r24, r22
    63dc:	bc 01       	movw	r22, r24
    63de:	cd 01       	movw	r24, r26
    63e0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    63e4:	dc 01       	movw	r26, r24
    63e6:	cb 01       	movw	r24, r22
    63e8:	9e af       	std	Y+62, r25	; 0x3e
    63ea:	8d af       	std	Y+61, r24	; 0x3d
    63ec:	0f c0       	rjmp	.+30     	; 0x640c <AmmeterMode+0x2abe>
    63ee:	89 e1       	ldi	r24, 0x19	; 25
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	9c af       	std	Y+60, r25	; 0x3c
    63f4:	8b af       	std	Y+59, r24	; 0x3b
    63f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    63f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    63fa:	01 97       	sbiw	r24, 0x01	; 1
    63fc:	f1 f7       	brne	.-4      	; 0x63fa <AmmeterMode+0x2aac>
    63fe:	9c af       	std	Y+60, r25	; 0x3c
    6400:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6402:	8d ad       	ldd	r24, Y+61	; 0x3d
    6404:	9e ad       	ldd	r25, Y+62	; 0x3e
    6406:	01 97       	sbiw	r24, 0x01	; 1
    6408:	9e af       	std	Y+62, r25	; 0x3e
    640a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    640c:	8d ad       	ldd	r24, Y+61	; 0x3d
    640e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6410:	00 97       	sbiw	r24, 0x00	; 0
    6412:	69 f7       	brne	.-38     	; 0x63ee <AmmeterMode+0x2aa0>
    6414:	16 c0       	rjmp	.+44     	; 0x6442 <AmmeterMode+0x2af4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6416:	fe 01       	movw	r30, r28
    6418:	ff 96       	adiw	r30, 0x3f	; 63
    641a:	60 81       	ld	r22, Z
    641c:	71 81       	ldd	r23, Z+1	; 0x01
    641e:	82 81       	ldd	r24, Z+2	; 0x02
    6420:	93 81       	ldd	r25, Z+3	; 0x03
    6422:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    6426:	dc 01       	movw	r26, r24
    6428:	cb 01       	movw	r24, r22
    642a:	9e af       	std	Y+62, r25	; 0x3e
    642c:	8d af       	std	Y+61, r24	; 0x3d
    642e:	8d ad       	ldd	r24, Y+61	; 0x3d
    6430:	9e ad       	ldd	r25, Y+62	; 0x3e
    6432:	9a af       	std	Y+58, r25	; 0x3a
    6434:	89 af       	std	Y+57, r24	; 0x39
    6436:	89 ad       	ldd	r24, Y+57	; 0x39
    6438:	9a ad       	ldd	r25, Y+58	; 0x3a
    643a:	01 97       	sbiw	r24, 0x01	; 1
    643c:	f1 f7       	brne	.-4      	; 0x643a <AmmeterMode+0x2aec>
    643e:	9a af       	std	Y+58, r25	; 0x3a
    6440:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(500);
					LCD_clearScreen();
    6442:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
					num=0;
    6446:	10 92 22 02 	sts	0x0222, r1
				}

			if(num==3){
    644a:	80 91 22 02 	lds	r24, 0x0222
    644e:	83 30       	cpi	r24, 0x03	; 3
    6450:	09 f0       	breq	.+2      	; 0x6454 <AmmeterMode+0x2b06>
    6452:	c4 c2       	rjmp	.+1416   	; 0x69dc <AmmeterMode+0x308e>
					LCD_displayString("3rd range");
    6454:	81 ed       	ldi	r24, 0xD1	; 209
    6456:	90 e0       	ldi	r25, 0x00	; 0
    6458:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
    645c:	80 e0       	ldi	r24, 0x00	; 0
    645e:	90 e0       	ldi	r25, 0x00	; 0
    6460:	aa ef       	ldi	r26, 0xFA	; 250
    6462:	b3 e4       	ldi	r27, 0x43	; 67
    6464:	8d ab       	std	Y+53, r24	; 0x35
    6466:	9e ab       	std	Y+54, r25	; 0x36
    6468:	af ab       	std	Y+55, r26	; 0x37
    646a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    646c:	6d a9       	ldd	r22, Y+53	; 0x35
    646e:	7e a9       	ldd	r23, Y+54	; 0x36
    6470:	8f a9       	ldd	r24, Y+55	; 0x37
    6472:	98 ad       	ldd	r25, Y+56	; 0x38
    6474:	20 e0       	ldi	r18, 0x00	; 0
    6476:	30 e0       	ldi	r19, 0x00	; 0
    6478:	4a e7       	ldi	r20, 0x7A	; 122
    647a:	53 e4       	ldi	r21, 0x43	; 67
    647c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    6480:	dc 01       	movw	r26, r24
    6482:	cb 01       	movw	r24, r22
    6484:	89 ab       	std	Y+49, r24	; 0x31
    6486:	9a ab       	std	Y+50, r25	; 0x32
    6488:	ab ab       	std	Y+51, r26	; 0x33
    648a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    648c:	69 a9       	ldd	r22, Y+49	; 0x31
    648e:	7a a9       	ldd	r23, Y+50	; 0x32
    6490:	8b a9       	ldd	r24, Y+51	; 0x33
    6492:	9c a9       	ldd	r25, Y+52	; 0x34
    6494:	20 e0       	ldi	r18, 0x00	; 0
    6496:	30 e0       	ldi	r19, 0x00	; 0
    6498:	40 e8       	ldi	r20, 0x80	; 128
    649a:	5f e3       	ldi	r21, 0x3F	; 63
    649c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    64a0:	88 23       	and	r24, r24
    64a2:	2c f4       	brge	.+10     	; 0x64ae <AmmeterMode+0x2b60>
		__ticks = 1;
    64a4:	81 e0       	ldi	r24, 0x01	; 1
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	98 ab       	std	Y+48, r25	; 0x30
    64aa:	8f a7       	std	Y+47, r24	; 0x2f
    64ac:	3f c0       	rjmp	.+126    	; 0x652c <AmmeterMode+0x2bde>
	else if (__tmp > 65535)
    64ae:	69 a9       	ldd	r22, Y+49	; 0x31
    64b0:	7a a9       	ldd	r23, Y+50	; 0x32
    64b2:	8b a9       	ldd	r24, Y+51	; 0x33
    64b4:	9c a9       	ldd	r25, Y+52	; 0x34
    64b6:	20 e0       	ldi	r18, 0x00	; 0
    64b8:	3f ef       	ldi	r19, 0xFF	; 255
    64ba:	4f e7       	ldi	r20, 0x7F	; 127
    64bc:	57 e4       	ldi	r21, 0x47	; 71
    64be:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    64c2:	18 16       	cp	r1, r24
    64c4:	4c f5       	brge	.+82     	; 0x6518 <AmmeterMode+0x2bca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64c6:	6d a9       	ldd	r22, Y+53	; 0x35
    64c8:	7e a9       	ldd	r23, Y+54	; 0x36
    64ca:	8f a9       	ldd	r24, Y+55	; 0x37
    64cc:	98 ad       	ldd	r25, Y+56	; 0x38
    64ce:	20 e0       	ldi	r18, 0x00	; 0
    64d0:	30 e0       	ldi	r19, 0x00	; 0
    64d2:	40 e2       	ldi	r20, 0x20	; 32
    64d4:	51 e4       	ldi	r21, 0x41	; 65
    64d6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    64da:	dc 01       	movw	r26, r24
    64dc:	cb 01       	movw	r24, r22
    64de:	bc 01       	movw	r22, r24
    64e0:	cd 01       	movw	r24, r26
    64e2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    64e6:	dc 01       	movw	r26, r24
    64e8:	cb 01       	movw	r24, r22
    64ea:	98 ab       	std	Y+48, r25	; 0x30
    64ec:	8f a7       	std	Y+47, r24	; 0x2f
    64ee:	0f c0       	rjmp	.+30     	; 0x650e <AmmeterMode+0x2bc0>
    64f0:	89 e1       	ldi	r24, 0x19	; 25
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	9e a7       	std	Y+46, r25	; 0x2e
    64f6:	8d a7       	std	Y+45, r24	; 0x2d
    64f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    64fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    64fc:	01 97       	sbiw	r24, 0x01	; 1
    64fe:	f1 f7       	brne	.-4      	; 0x64fc <AmmeterMode+0x2bae>
    6500:	9e a7       	std	Y+46, r25	; 0x2e
    6502:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6504:	8f a5       	ldd	r24, Y+47	; 0x2f
    6506:	98 a9       	ldd	r25, Y+48	; 0x30
    6508:	01 97       	sbiw	r24, 0x01	; 1
    650a:	98 ab       	std	Y+48, r25	; 0x30
    650c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    650e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6510:	98 a9       	ldd	r25, Y+48	; 0x30
    6512:	00 97       	sbiw	r24, 0x00	; 0
    6514:	69 f7       	brne	.-38     	; 0x64f0 <AmmeterMode+0x2ba2>
    6516:	14 c0       	rjmp	.+40     	; 0x6540 <AmmeterMode+0x2bf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6518:	69 a9       	ldd	r22, Y+49	; 0x31
    651a:	7a a9       	ldd	r23, Y+50	; 0x32
    651c:	8b a9       	ldd	r24, Y+51	; 0x33
    651e:	9c a9       	ldd	r25, Y+52	; 0x34
    6520:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    6524:	dc 01       	movw	r26, r24
    6526:	cb 01       	movw	r24, r22
    6528:	98 ab       	std	Y+48, r25	; 0x30
    652a:	8f a7       	std	Y+47, r24	; 0x2f
    652c:	8f a5       	ldd	r24, Y+47	; 0x2f
    652e:	98 a9       	ldd	r25, Y+48	; 0x30
    6530:	9c a7       	std	Y+44, r25	; 0x2c
    6532:	8b a7       	std	Y+43, r24	; 0x2b
    6534:	8b a5       	ldd	r24, Y+43	; 0x2b
    6536:	9c a5       	ldd	r25, Y+44	; 0x2c
    6538:	01 97       	sbiw	r24, 0x01	; 1
    653a:	f1 f7       	brne	.-4      	; 0x6538 <AmmeterMode+0x2bea>
    653c:	9c a7       	std	Y+44, r25	; 0x2c
    653e:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
					LCD_clearScreen();
    6540:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>

					GPIO_writePin(PORTB_ID, PIN0_ID, 1);
    6544:	81 e0       	ldi	r24, 0x01	; 1
    6546:	60 e0       	ldi	r22, 0x00	; 0
    6548:	41 e0       	ldi	r20, 0x01	; 1
    654a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
					GPIO_writePin(PORTB_ID, PIN1_ID, 1);
    654e:	81 e0       	ldi	r24, 0x01	; 1
    6550:	61 e0       	ldi	r22, 0x01	; 1
    6552:	41 e0       	ldi	r20, 0x01	; 1
    6554:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_writePin>
    6558:	80 e0       	ldi	r24, 0x00	; 0
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	a8 ec       	ldi	r26, 0xC8	; 200
    655e:	b2 e4       	ldi	r27, 0x42	; 66
    6560:	8f a3       	std	Y+39, r24	; 0x27
    6562:	98 a7       	std	Y+40, r25	; 0x28
    6564:	a9 a7       	std	Y+41, r26	; 0x29
    6566:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6568:	6f a1       	ldd	r22, Y+39	; 0x27
    656a:	78 a5       	ldd	r23, Y+40	; 0x28
    656c:	89 a5       	ldd	r24, Y+41	; 0x29
    656e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6570:	20 e0       	ldi	r18, 0x00	; 0
    6572:	30 e0       	ldi	r19, 0x00	; 0
    6574:	4a e7       	ldi	r20, 0x7A	; 122
    6576:	53 e4       	ldi	r21, 0x43	; 67
    6578:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    657c:	dc 01       	movw	r26, r24
    657e:	cb 01       	movw	r24, r22
    6580:	8b a3       	std	Y+35, r24	; 0x23
    6582:	9c a3       	std	Y+36, r25	; 0x24
    6584:	ad a3       	std	Y+37, r26	; 0x25
    6586:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6588:	6b a1       	ldd	r22, Y+35	; 0x23
    658a:	7c a1       	ldd	r23, Y+36	; 0x24
    658c:	8d a1       	ldd	r24, Y+37	; 0x25
    658e:	9e a1       	ldd	r25, Y+38	; 0x26
    6590:	20 e0       	ldi	r18, 0x00	; 0
    6592:	30 e0       	ldi	r19, 0x00	; 0
    6594:	40 e8       	ldi	r20, 0x80	; 128
    6596:	5f e3       	ldi	r21, 0x3F	; 63
    6598:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    659c:	88 23       	and	r24, r24
    659e:	2c f4       	brge	.+10     	; 0x65aa <AmmeterMode+0x2c5c>
		__ticks = 1;
    65a0:	81 e0       	ldi	r24, 0x01	; 1
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	9a a3       	std	Y+34, r25	; 0x22
    65a6:	89 a3       	std	Y+33, r24	; 0x21
    65a8:	3f c0       	rjmp	.+126    	; 0x6628 <AmmeterMode+0x2cda>
	else if (__tmp > 65535)
    65aa:	6b a1       	ldd	r22, Y+35	; 0x23
    65ac:	7c a1       	ldd	r23, Y+36	; 0x24
    65ae:	8d a1       	ldd	r24, Y+37	; 0x25
    65b0:	9e a1       	ldd	r25, Y+38	; 0x26
    65b2:	20 e0       	ldi	r18, 0x00	; 0
    65b4:	3f ef       	ldi	r19, 0xFF	; 255
    65b6:	4f e7       	ldi	r20, 0x7F	; 127
    65b8:	57 e4       	ldi	r21, 0x47	; 71
    65ba:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    65be:	18 16       	cp	r1, r24
    65c0:	4c f5       	brge	.+82     	; 0x6614 <AmmeterMode+0x2cc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65c2:	6f a1       	ldd	r22, Y+39	; 0x27
    65c4:	78 a5       	ldd	r23, Y+40	; 0x28
    65c6:	89 a5       	ldd	r24, Y+41	; 0x29
    65c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    65ca:	20 e0       	ldi	r18, 0x00	; 0
    65cc:	30 e0       	ldi	r19, 0x00	; 0
    65ce:	40 e2       	ldi	r20, 0x20	; 32
    65d0:	51 e4       	ldi	r21, 0x41	; 65
    65d2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    65d6:	dc 01       	movw	r26, r24
    65d8:	cb 01       	movw	r24, r22
    65da:	bc 01       	movw	r22, r24
    65dc:	cd 01       	movw	r24, r26
    65de:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    65e2:	dc 01       	movw	r26, r24
    65e4:	cb 01       	movw	r24, r22
    65e6:	9a a3       	std	Y+34, r25	; 0x22
    65e8:	89 a3       	std	Y+33, r24	; 0x21
    65ea:	0f c0       	rjmp	.+30     	; 0x660a <AmmeterMode+0x2cbc>
    65ec:	89 e1       	ldi	r24, 0x19	; 25
    65ee:	90 e0       	ldi	r25, 0x00	; 0
    65f0:	98 a3       	std	Y+32, r25	; 0x20
    65f2:	8f 8f       	std	Y+31, r24	; 0x1f
    65f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    65f6:	98 a1       	ldd	r25, Y+32	; 0x20
    65f8:	01 97       	sbiw	r24, 0x01	; 1
    65fa:	f1 f7       	brne	.-4      	; 0x65f8 <AmmeterMode+0x2caa>
    65fc:	98 a3       	std	Y+32, r25	; 0x20
    65fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6600:	89 a1       	ldd	r24, Y+33	; 0x21
    6602:	9a a1       	ldd	r25, Y+34	; 0x22
    6604:	01 97       	sbiw	r24, 0x01	; 1
    6606:	9a a3       	std	Y+34, r25	; 0x22
    6608:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    660a:	89 a1       	ldd	r24, Y+33	; 0x21
    660c:	9a a1       	ldd	r25, Y+34	; 0x22
    660e:	00 97       	sbiw	r24, 0x00	; 0
    6610:	69 f7       	brne	.-38     	; 0x65ec <AmmeterMode+0x2c9e>
    6612:	14 c0       	rjmp	.+40     	; 0x663c <AmmeterMode+0x2cee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6614:	6b a1       	ldd	r22, Y+35	; 0x23
    6616:	7c a1       	ldd	r23, Y+36	; 0x24
    6618:	8d a1       	ldd	r24, Y+37	; 0x25
    661a:	9e a1       	ldd	r25, Y+38	; 0x26
    661c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    6620:	dc 01       	movw	r26, r24
    6622:	cb 01       	movw	r24, r22
    6624:	9a a3       	std	Y+34, r25	; 0x22
    6626:	89 a3       	std	Y+33, r24	; 0x21
    6628:	89 a1       	ldd	r24, Y+33	; 0x21
    662a:	9a a1       	ldd	r25, Y+34	; 0x22
    662c:	9e 8f       	std	Y+30, r25	; 0x1e
    662e:	8d 8f       	std	Y+29, r24	; 0x1d
    6630:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6632:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6634:	01 97       	sbiw	r24, 0x01	; 1
    6636:	f1 f7       	brne	.-4      	; 0x6634 <AmmeterMode+0x2ce6>
    6638:	9e 8f       	std	Y+30, r25	; 0x1e
    663a:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(100);

					adc1=ADC_readChannel(1);
    663c:	81 e0       	ldi	r24, 0x01	; 1
    663e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    6642:	cc 01       	movw	r24, r24
    6644:	a0 e0       	ldi	r26, 0x00	; 0
    6646:	b0 e0       	ldi	r27, 0x00	; 0
    6648:	bc 01       	movw	r22, r24
    664a:	cd 01       	movw	r24, r26
    664c:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    6650:	dc 01       	movw	r26, r24
    6652:	cb 01       	movw	r24, r22
    6654:	80 93 30 02 	sts	0x0230, r24
    6658:	90 93 31 02 	sts	0x0231, r25
    665c:	a0 93 32 02 	sts	0x0232, r26
    6660:	b0 93 33 02 	sts	0x0233, r27
									max=adc1;
    6664:	80 91 30 02 	lds	r24, 0x0230
    6668:	90 91 31 02 	lds	r25, 0x0231
    666c:	a0 91 32 02 	lds	r26, 0x0232
    6670:	b0 91 33 02 	lds	r27, 0x0233
    6674:	80 93 34 02 	sts	0x0234, r24
    6678:	90 93 35 02 	sts	0x0235, r25
    667c:	a0 93 36 02 	sts	0x0236, r26
    6680:	b0 93 37 02 	sts	0x0237, r27
									for(int i=0;i<50;i++)
    6684:	fe 01       	movw	r30, r28
    6686:	e9 56       	subi	r30, 0x69	; 105
    6688:	fe 4f       	sbci	r31, 0xFE	; 254
    668a:	11 82       	std	Z+1, r1	; 0x01
    668c:	10 82       	st	Z, r1
    668e:	46 c0       	rjmp	.+140    	; 0x671c <AmmeterMode+0x2dce>
									{
										adc1=ADC_readChannel(1);
    6690:	81 e0       	ldi	r24, 0x01	; 1
    6692:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_readChannel>
    6696:	cc 01       	movw	r24, r24
    6698:	a0 e0       	ldi	r26, 0x00	; 0
    669a:	b0 e0       	ldi	r27, 0x00	; 0
    669c:	bc 01       	movw	r22, r24
    669e:	cd 01       	movw	r24, r26
    66a0:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    66a4:	dc 01       	movw	r26, r24
    66a6:	cb 01       	movw	r24, r22
    66a8:	80 93 30 02 	sts	0x0230, r24
    66ac:	90 93 31 02 	sts	0x0231, r25
    66b0:	a0 93 32 02 	sts	0x0232, r26
    66b4:	b0 93 33 02 	sts	0x0233, r27
										if(adc1>max)
    66b8:	80 91 30 02 	lds	r24, 0x0230
    66bc:	90 91 31 02 	lds	r25, 0x0231
    66c0:	a0 91 32 02 	lds	r26, 0x0232
    66c4:	b0 91 33 02 	lds	r27, 0x0233
    66c8:	20 91 34 02 	lds	r18, 0x0234
    66cc:	30 91 35 02 	lds	r19, 0x0235
    66d0:	40 91 36 02 	lds	r20, 0x0236
    66d4:	50 91 37 02 	lds	r21, 0x0237
    66d8:	bc 01       	movw	r22, r24
    66da:	cd 01       	movw	r24, r26
    66dc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    66e0:	18 16       	cp	r1, r24
    66e2:	84 f4       	brge	.+32     	; 0x6704 <AmmeterMode+0x2db6>
										{
										max=adc1;
    66e4:	80 91 30 02 	lds	r24, 0x0230
    66e8:	90 91 31 02 	lds	r25, 0x0231
    66ec:	a0 91 32 02 	lds	r26, 0x0232
    66f0:	b0 91 33 02 	lds	r27, 0x0233
    66f4:	80 93 34 02 	sts	0x0234, r24
    66f8:	90 93 35 02 	sts	0x0235, r25
    66fc:	a0 93 36 02 	sts	0x0236, r26
    6700:	b0 93 37 02 	sts	0x0237, r27
					GPIO_writePin(PORTB_ID, PIN1_ID, 1);
					_delay_ms(100);

					adc1=ADC_readChannel(1);
									max=adc1;
									for(int i=0;i<50;i++)
    6704:	de 01       	movw	r26, r28
    6706:	a9 56       	subi	r26, 0x69	; 105
    6708:	be 4f       	sbci	r27, 0xFE	; 254
    670a:	fe 01       	movw	r30, r28
    670c:	e9 56       	subi	r30, 0x69	; 105
    670e:	fe 4f       	sbci	r31, 0xFE	; 254
    6710:	80 81       	ld	r24, Z
    6712:	91 81       	ldd	r25, Z+1	; 0x01
    6714:	01 96       	adiw	r24, 0x01	; 1
    6716:	11 96       	adiw	r26, 0x01	; 1
    6718:	9c 93       	st	X, r25
    671a:	8e 93       	st	-X, r24
    671c:	fe 01       	movw	r30, r28
    671e:	e9 56       	subi	r30, 0x69	; 105
    6720:	fe 4f       	sbci	r31, 0xFE	; 254
    6722:	80 81       	ld	r24, Z
    6724:	91 81       	ldd	r25, Z+1	; 0x01
    6726:	82 33       	cpi	r24, 0x32	; 50
    6728:	91 05       	cpc	r25, r1
    672a:	0c f4       	brge	.+2      	; 0x672e <AmmeterMode+0x2de0>
    672c:	b1 cf       	rjmp	.-158    	; 0x6690 <AmmeterMode+0x2d42>
										if(adc1>max)
										{
										max=adc1;
										}
									}
									adc1=max;
    672e:	80 91 34 02 	lds	r24, 0x0234
    6732:	90 91 35 02 	lds	r25, 0x0235
    6736:	a0 91 36 02 	lds	r26, 0x0236
    673a:	b0 91 37 02 	lds	r27, 0x0237
    673e:	80 93 30 02 	sts	0x0230, r24
    6742:	90 93 31 02 	sts	0x0231, r25
    6746:	a0 93 32 02 	sts	0x0232, r26
    674a:	b0 93 33 02 	sts	0x0233, r27
					LCD_displayString("ADC=");
    674e:	8c ec       	ldi	r24, 0xCC	; 204
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
					LCD_displayFloat(adc1,2);
    6756:	80 91 30 02 	lds	r24, 0x0230
    675a:	90 91 31 02 	lds	r25, 0x0231
    675e:	a0 91 32 02 	lds	r26, 0x0232
    6762:	b0 91 33 02 	lds	r27, 0x0233
    6766:	bc 01       	movw	r22, r24
    6768:	cd 01       	movw	r24, r26
    676a:	42 e0       	ldi	r20, 0x02	; 2
    676c:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    6770:	80 e0       	ldi	r24, 0x00	; 0
    6772:	90 e0       	ldi	r25, 0x00	; 0
    6774:	aa ef       	ldi	r26, 0xFA	; 250
    6776:	b3 e4       	ldi	r27, 0x43	; 67
    6778:	89 8f       	std	Y+25, r24	; 0x19
    677a:	9a 8f       	std	Y+26, r25	; 0x1a
    677c:	ab 8f       	std	Y+27, r26	; 0x1b
    677e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6780:	69 8d       	ldd	r22, Y+25	; 0x19
    6782:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6784:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6786:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6788:	20 e0       	ldi	r18, 0x00	; 0
    678a:	30 e0       	ldi	r19, 0x00	; 0
    678c:	4a e7       	ldi	r20, 0x7A	; 122
    678e:	53 e4       	ldi	r21, 0x43	; 67
    6790:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    6794:	dc 01       	movw	r26, r24
    6796:	cb 01       	movw	r24, r22
    6798:	8d 8b       	std	Y+21, r24	; 0x15
    679a:	9e 8b       	std	Y+22, r25	; 0x16
    679c:	af 8b       	std	Y+23, r26	; 0x17
    679e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    67a0:	6d 89       	ldd	r22, Y+21	; 0x15
    67a2:	7e 89       	ldd	r23, Y+22	; 0x16
    67a4:	8f 89       	ldd	r24, Y+23	; 0x17
    67a6:	98 8d       	ldd	r25, Y+24	; 0x18
    67a8:	20 e0       	ldi	r18, 0x00	; 0
    67aa:	30 e0       	ldi	r19, 0x00	; 0
    67ac:	40 e8       	ldi	r20, 0x80	; 128
    67ae:	5f e3       	ldi	r21, 0x3F	; 63
    67b0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    67b4:	88 23       	and	r24, r24
    67b6:	2c f4       	brge	.+10     	; 0x67c2 <AmmeterMode+0x2e74>
		__ticks = 1;
    67b8:	81 e0       	ldi	r24, 0x01	; 1
    67ba:	90 e0       	ldi	r25, 0x00	; 0
    67bc:	9c 8b       	std	Y+20, r25	; 0x14
    67be:	8b 8b       	std	Y+19, r24	; 0x13
    67c0:	3f c0       	rjmp	.+126    	; 0x6840 <AmmeterMode+0x2ef2>
	else if (__tmp > 65535)
    67c2:	6d 89       	ldd	r22, Y+21	; 0x15
    67c4:	7e 89       	ldd	r23, Y+22	; 0x16
    67c6:	8f 89       	ldd	r24, Y+23	; 0x17
    67c8:	98 8d       	ldd	r25, Y+24	; 0x18
    67ca:	20 e0       	ldi	r18, 0x00	; 0
    67cc:	3f ef       	ldi	r19, 0xFF	; 255
    67ce:	4f e7       	ldi	r20, 0x7F	; 127
    67d0:	57 e4       	ldi	r21, 0x47	; 71
    67d2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    67d6:	18 16       	cp	r1, r24
    67d8:	4c f5       	brge	.+82     	; 0x682c <AmmeterMode+0x2ede>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    67da:	69 8d       	ldd	r22, Y+25	; 0x19
    67dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    67de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    67e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    67e2:	20 e0       	ldi	r18, 0x00	; 0
    67e4:	30 e0       	ldi	r19, 0x00	; 0
    67e6:	40 e2       	ldi	r20, 0x20	; 32
    67e8:	51 e4       	ldi	r21, 0x41	; 65
    67ea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    67ee:	dc 01       	movw	r26, r24
    67f0:	cb 01       	movw	r24, r22
    67f2:	bc 01       	movw	r22, r24
    67f4:	cd 01       	movw	r24, r26
    67f6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    67fa:	dc 01       	movw	r26, r24
    67fc:	cb 01       	movw	r24, r22
    67fe:	9c 8b       	std	Y+20, r25	; 0x14
    6800:	8b 8b       	std	Y+19, r24	; 0x13
    6802:	0f c0       	rjmp	.+30     	; 0x6822 <AmmeterMode+0x2ed4>
    6804:	89 e1       	ldi	r24, 0x19	; 25
    6806:	90 e0       	ldi	r25, 0x00	; 0
    6808:	9a 8b       	std	Y+18, r25	; 0x12
    680a:	89 8b       	std	Y+17, r24	; 0x11
    680c:	89 89       	ldd	r24, Y+17	; 0x11
    680e:	9a 89       	ldd	r25, Y+18	; 0x12
    6810:	01 97       	sbiw	r24, 0x01	; 1
    6812:	f1 f7       	brne	.-4      	; 0x6810 <AmmeterMode+0x2ec2>
    6814:	9a 8b       	std	Y+18, r25	; 0x12
    6816:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6818:	8b 89       	ldd	r24, Y+19	; 0x13
    681a:	9c 89       	ldd	r25, Y+20	; 0x14
    681c:	01 97       	sbiw	r24, 0x01	; 1
    681e:	9c 8b       	std	Y+20, r25	; 0x14
    6820:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6822:	8b 89       	ldd	r24, Y+19	; 0x13
    6824:	9c 89       	ldd	r25, Y+20	; 0x14
    6826:	00 97       	sbiw	r24, 0x00	; 0
    6828:	69 f7       	brne	.-38     	; 0x6804 <AmmeterMode+0x2eb6>
    682a:	14 c0       	rjmp	.+40     	; 0x6854 <AmmeterMode+0x2f06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    682c:	6d 89       	ldd	r22, Y+21	; 0x15
    682e:	7e 89       	ldd	r23, Y+22	; 0x16
    6830:	8f 89       	ldd	r24, Y+23	; 0x17
    6832:	98 8d       	ldd	r25, Y+24	; 0x18
    6834:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    6838:	dc 01       	movw	r26, r24
    683a:	cb 01       	movw	r24, r22
    683c:	9c 8b       	std	Y+20, r25	; 0x14
    683e:	8b 8b       	std	Y+19, r24	; 0x13
    6840:	8b 89       	ldd	r24, Y+19	; 0x13
    6842:	9c 89       	ldd	r25, Y+20	; 0x14
    6844:	98 8b       	std	Y+16, r25	; 0x10
    6846:	8f 87       	std	Y+15, r24	; 0x0f
    6848:	8f 85       	ldd	r24, Y+15	; 0x0f
    684a:	98 89       	ldd	r25, Y+16	; 0x10
    684c:	01 97       	sbiw	r24, 0x01	; 1
    684e:	f1 f7       	brne	.-4      	; 0x684c <AmmeterMode+0x2efe>
    6850:	98 8b       	std	Y+16, r25	; 0x10
    6852:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					LCD_clearScreen();
    6854:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>

					Vout = adc1*(5.0/1023);
    6858:	80 91 30 02 	lds	r24, 0x0230
    685c:	90 91 31 02 	lds	r25, 0x0231
    6860:	a0 91 32 02 	lds	r26, 0x0232
    6864:	b0 91 33 02 	lds	r27, 0x0233
    6868:	bc 01       	movw	r22, r24
    686a:	cd 01       	movw	r24, r26
    686c:	2a e0       	ldi	r18, 0x0A	; 10
    686e:	38 e2       	ldi	r19, 0x28	; 40
    6870:	40 ea       	ldi	r20, 0xA0	; 160
    6872:	5b e3       	ldi	r21, 0x3B	; 59
    6874:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    6878:	dc 01       	movw	r26, r24
    687a:	cb 01       	movw	r24, r22
    687c:	80 93 38 02 	sts	0x0238, r24
    6880:	90 93 39 02 	sts	0x0239, r25
    6884:	a0 93 3a 02 	sts	0x023A, r26
    6888:	b0 93 3b 02 	sts	0x023B, r27
					amp=Vout/(10.0*0.54); //Range 100mA:1A (Rs=45)
    688c:	80 91 38 02 	lds	r24, 0x0238
    6890:	90 91 39 02 	lds	r25, 0x0239
    6894:	a0 91 3a 02 	lds	r26, 0x023A
    6898:	b0 91 3b 02 	lds	r27, 0x023B
    689c:	bc 01       	movw	r22, r24
    689e:	cd 01       	movw	r24, r26
    68a0:	2d ec       	ldi	r18, 0xCD	; 205
    68a2:	3c ec       	ldi	r19, 0xCC	; 204
    68a4:	4c ea       	ldi	r20, 0xAC	; 172
    68a6:	50 e4       	ldi	r21, 0x40	; 64
    68a8:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    68ac:	dc 01       	movw	r26, r24
    68ae:	cb 01       	movw	r24, r22
    68b0:	80 93 24 02 	sts	0x0224, r24
    68b4:	90 93 25 02 	sts	0x0225, r25
    68b8:	a0 93 26 02 	sts	0x0226, r26
    68bc:	b0 93 27 02 	sts	0x0227, r27
					LCD_displayString("Amp=");
    68c0:	8b ed       	ldi	r24, 0xDB	; 219
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    68c4:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
					LCD_displayFloat(amp,5);
    68c8:	80 91 24 02 	lds	r24, 0x0224
    68cc:	90 91 25 02 	lds	r25, 0x0225
    68d0:	a0 91 26 02 	lds	r26, 0x0226
    68d4:	b0 91 27 02 	lds	r27, 0x0227
    68d8:	bc 01       	movw	r22, r24
    68da:	cd 01       	movw	r24, r26
    68dc:	45 e0       	ldi	r20, 0x05	; 5
    68de:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <LCD_displayFloat>
    68e2:	80 e0       	ldi	r24, 0x00	; 0
    68e4:	90 e0       	ldi	r25, 0x00	; 0
    68e6:	aa ef       	ldi	r26, 0xFA	; 250
    68e8:	b3 e4       	ldi	r27, 0x43	; 67
    68ea:	8b 87       	std	Y+11, r24	; 0x0b
    68ec:	9c 87       	std	Y+12, r25	; 0x0c
    68ee:	ad 87       	std	Y+13, r26	; 0x0d
    68f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    68f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    68f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    68f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    68fa:	20 e0       	ldi	r18, 0x00	; 0
    68fc:	30 e0       	ldi	r19, 0x00	; 0
    68fe:	4a e7       	ldi	r20, 0x7A	; 122
    6900:	53 e4       	ldi	r21, 0x43	; 67
    6902:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    6906:	dc 01       	movw	r26, r24
    6908:	cb 01       	movw	r24, r22
    690a:	8f 83       	std	Y+7, r24	; 0x07
    690c:	98 87       	std	Y+8, r25	; 0x08
    690e:	a9 87       	std	Y+9, r26	; 0x09
    6910:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6912:	6f 81       	ldd	r22, Y+7	; 0x07
    6914:	78 85       	ldd	r23, Y+8	; 0x08
    6916:	89 85       	ldd	r24, Y+9	; 0x09
    6918:	9a 85       	ldd	r25, Y+10	; 0x0a
    691a:	20 e0       	ldi	r18, 0x00	; 0
    691c:	30 e0       	ldi	r19, 0x00	; 0
    691e:	40 e8       	ldi	r20, 0x80	; 128
    6920:	5f e3       	ldi	r21, 0x3F	; 63
    6922:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    6926:	88 23       	and	r24, r24
    6928:	2c f4       	brge	.+10     	; 0x6934 <AmmeterMode+0x2fe6>
		__ticks = 1;
    692a:	81 e0       	ldi	r24, 0x01	; 1
    692c:	90 e0       	ldi	r25, 0x00	; 0
    692e:	9e 83       	std	Y+6, r25	; 0x06
    6930:	8d 83       	std	Y+5, r24	; 0x05
    6932:	3f c0       	rjmp	.+126    	; 0x69b2 <AmmeterMode+0x3064>
	else if (__tmp > 65535)
    6934:	6f 81       	ldd	r22, Y+7	; 0x07
    6936:	78 85       	ldd	r23, Y+8	; 0x08
    6938:	89 85       	ldd	r24, Y+9	; 0x09
    693a:	9a 85       	ldd	r25, Y+10	; 0x0a
    693c:	20 e0       	ldi	r18, 0x00	; 0
    693e:	3f ef       	ldi	r19, 0xFF	; 255
    6940:	4f e7       	ldi	r20, 0x7F	; 127
    6942:	57 e4       	ldi	r21, 0x47	; 71
    6944:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    6948:	18 16       	cp	r1, r24
    694a:	4c f5       	brge	.+82     	; 0x699e <AmmeterMode+0x3050>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    694c:	6b 85       	ldd	r22, Y+11	; 0x0b
    694e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6950:	8d 85       	ldd	r24, Y+13	; 0x0d
    6952:	9e 85       	ldd	r25, Y+14	; 0x0e
    6954:	20 e0       	ldi	r18, 0x00	; 0
    6956:	30 e0       	ldi	r19, 0x00	; 0
    6958:	40 e2       	ldi	r20, 0x20	; 32
    695a:	51 e4       	ldi	r21, 0x41	; 65
    695c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    6960:	dc 01       	movw	r26, r24
    6962:	cb 01       	movw	r24, r22
    6964:	bc 01       	movw	r22, r24
    6966:	cd 01       	movw	r24, r26
    6968:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    696c:	dc 01       	movw	r26, r24
    696e:	cb 01       	movw	r24, r22
    6970:	9e 83       	std	Y+6, r25	; 0x06
    6972:	8d 83       	std	Y+5, r24	; 0x05
    6974:	0f c0       	rjmp	.+30     	; 0x6994 <AmmeterMode+0x3046>
    6976:	89 e1       	ldi	r24, 0x19	; 25
    6978:	90 e0       	ldi	r25, 0x00	; 0
    697a:	9c 83       	std	Y+4, r25	; 0x04
    697c:	8b 83       	std	Y+3, r24	; 0x03
    697e:	8b 81       	ldd	r24, Y+3	; 0x03
    6980:	9c 81       	ldd	r25, Y+4	; 0x04
    6982:	01 97       	sbiw	r24, 0x01	; 1
    6984:	f1 f7       	brne	.-4      	; 0x6982 <AmmeterMode+0x3034>
    6986:	9c 83       	std	Y+4, r25	; 0x04
    6988:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    698a:	8d 81       	ldd	r24, Y+5	; 0x05
    698c:	9e 81       	ldd	r25, Y+6	; 0x06
    698e:	01 97       	sbiw	r24, 0x01	; 1
    6990:	9e 83       	std	Y+6, r25	; 0x06
    6992:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6994:	8d 81       	ldd	r24, Y+5	; 0x05
    6996:	9e 81       	ldd	r25, Y+6	; 0x06
    6998:	00 97       	sbiw	r24, 0x00	; 0
    699a:	69 f7       	brne	.-38     	; 0x6976 <AmmeterMode+0x3028>
    699c:	14 c0       	rjmp	.+40     	; 0x69c6 <AmmeterMode+0x3078>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    699e:	6f 81       	ldd	r22, Y+7	; 0x07
    69a0:	78 85       	ldd	r23, Y+8	; 0x08
    69a2:	89 85       	ldd	r24, Y+9	; 0x09
    69a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    69a6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    69aa:	dc 01       	movw	r26, r24
    69ac:	cb 01       	movw	r24, r22
    69ae:	9e 83       	std	Y+6, r25	; 0x06
    69b0:	8d 83       	std	Y+5, r24	; 0x05
    69b2:	8d 81       	ldd	r24, Y+5	; 0x05
    69b4:	9e 81       	ldd	r25, Y+6	; 0x06
    69b6:	9a 83       	std	Y+2, r25	; 0x02
    69b8:	89 83       	std	Y+1, r24	; 0x01
    69ba:	89 81       	ldd	r24, Y+1	; 0x01
    69bc:	9a 81       	ldd	r25, Y+2	; 0x02
    69be:	01 97       	sbiw	r24, 0x01	; 1
    69c0:	f1 f7       	brne	.-4      	; 0x69be <AmmeterMode+0x3070>
    69c2:	9a 83       	std	Y+2, r25	; 0x02
    69c4:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
					LCD_clearScreen();
    69c6:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
					num=0;
    69ca:	10 92 22 02 	sts	0x0222, r1
    69ce:	06 c0       	rjmp	.+12     	; 0x69dc <AmmeterMode+0x308e>

				}
	}
	else
	{
		LCD_clearScreen();
    69d0:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clearScreen>
		LCD_displayString("Wrong input");
    69d4:	8e e0       	ldi	r24, 0x0E	; 14
    69d6:	91 e0       	ldi	r25, 0x01	; 1
    69d8:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_displayString>
	}
}
    69dc:	c4 56       	subi	r28, 0x64	; 100
    69de:	de 4f       	sbci	r29, 0xFE	; 254
    69e0:	0f b6       	in	r0, 0x3f	; 63
    69e2:	f8 94       	cli
    69e4:	de bf       	out	0x3e, r29	; 62
    69e6:	0f be       	out	0x3f, r0	; 63
    69e8:	cd bf       	out	0x3d, r28	; 61
    69ea:	cf 91       	pop	r28
    69ec:	df 91       	pop	r29
    69ee:	1f 91       	pop	r17
    69f0:	0f 91       	pop	r16
    69f2:	08 95       	ret

000069f4 <__prologue_saves__>:
    69f4:	2f 92       	push	r2
    69f6:	3f 92       	push	r3
    69f8:	4f 92       	push	r4
    69fa:	5f 92       	push	r5
    69fc:	6f 92       	push	r6
    69fe:	7f 92       	push	r7
    6a00:	8f 92       	push	r8
    6a02:	9f 92       	push	r9
    6a04:	af 92       	push	r10
    6a06:	bf 92       	push	r11
    6a08:	cf 92       	push	r12
    6a0a:	df 92       	push	r13
    6a0c:	ef 92       	push	r14
    6a0e:	ff 92       	push	r15
    6a10:	0f 93       	push	r16
    6a12:	1f 93       	push	r17
    6a14:	cf 93       	push	r28
    6a16:	df 93       	push	r29
    6a18:	cd b7       	in	r28, 0x3d	; 61
    6a1a:	de b7       	in	r29, 0x3e	; 62
    6a1c:	ca 1b       	sub	r28, r26
    6a1e:	db 0b       	sbc	r29, r27
    6a20:	0f b6       	in	r0, 0x3f	; 63
    6a22:	f8 94       	cli
    6a24:	de bf       	out	0x3e, r29	; 62
    6a26:	0f be       	out	0x3f, r0	; 63
    6a28:	cd bf       	out	0x3d, r28	; 61
    6a2a:	09 94       	ijmp

00006a2c <__epilogue_restores__>:
    6a2c:	2a 88       	ldd	r2, Y+18	; 0x12
    6a2e:	39 88       	ldd	r3, Y+17	; 0x11
    6a30:	48 88       	ldd	r4, Y+16	; 0x10
    6a32:	5f 84       	ldd	r5, Y+15	; 0x0f
    6a34:	6e 84       	ldd	r6, Y+14	; 0x0e
    6a36:	7d 84       	ldd	r7, Y+13	; 0x0d
    6a38:	8c 84       	ldd	r8, Y+12	; 0x0c
    6a3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    6a3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    6a3e:	b9 84       	ldd	r11, Y+9	; 0x09
    6a40:	c8 84       	ldd	r12, Y+8	; 0x08
    6a42:	df 80       	ldd	r13, Y+7	; 0x07
    6a44:	ee 80       	ldd	r14, Y+6	; 0x06
    6a46:	fd 80       	ldd	r15, Y+5	; 0x05
    6a48:	0c 81       	ldd	r16, Y+4	; 0x04
    6a4a:	1b 81       	ldd	r17, Y+3	; 0x03
    6a4c:	aa 81       	ldd	r26, Y+2	; 0x02
    6a4e:	b9 81       	ldd	r27, Y+1	; 0x01
    6a50:	ce 0f       	add	r28, r30
    6a52:	d1 1d       	adc	r29, r1
    6a54:	0f b6       	in	r0, 0x3f	; 63
    6a56:	f8 94       	cli
    6a58:	de bf       	out	0x3e, r29	; 62
    6a5a:	0f be       	out	0x3f, r0	; 63
    6a5c:	cd bf       	out	0x3d, r28	; 61
    6a5e:	ed 01       	movw	r28, r26
    6a60:	08 95       	ret

00006a62 <dtostrf>:
    6a62:	ef 92       	push	r14
    6a64:	ff 92       	push	r15
    6a66:	0f 93       	push	r16
    6a68:	1f 93       	push	r17
    6a6a:	f2 2f       	mov	r31, r18
    6a6c:	f0 2e       	mov	r15, r16
    6a6e:	47 fd       	sbrc	r20, 7
    6a70:	02 c0       	rjmp	.+4      	; 0x6a76 <dtostrf+0x14>
    6a72:	e4 e0       	ldi	r30, 0x04	; 4
    6a74:	01 c0       	rjmp	.+2      	; 0x6a78 <dtostrf+0x16>
    6a76:	e4 e1       	ldi	r30, 0x14	; 20
    6a78:	24 2f       	mov	r18, r20
    6a7a:	33 27       	eor	r19, r19
    6a7c:	27 fd       	sbrc	r18, 7
    6a7e:	30 95       	com	r19
    6a80:	37 ff       	sbrs	r19, 7
    6a82:	03 c0       	rjmp	.+6      	; 0x6a8a <dtostrf+0x28>
    6a84:	30 95       	com	r19
    6a86:	21 95       	neg	r18
    6a88:	3f 4f       	sbci	r19, 0xFF	; 255
    6a8a:	4f 2d       	mov	r20, r15
    6a8c:	51 2f       	mov	r21, r17
    6a8e:	0f 2f       	mov	r16, r31
    6a90:	ee 2e       	mov	r14, r30
    6a92:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <dtoa_prf>
    6a96:	8f 2d       	mov	r24, r15
    6a98:	91 2f       	mov	r25, r17
    6a9a:	1f 91       	pop	r17
    6a9c:	0f 91       	pop	r16
    6a9e:	ff 90       	pop	r15
    6aa0:	ef 90       	pop	r14
    6aa2:	08 95       	ret

00006aa4 <itoa>:
    6aa4:	fb 01       	movw	r30, r22
    6aa6:	9f 01       	movw	r18, r30
    6aa8:	e8 94       	clt
    6aaa:	42 30       	cpi	r20, 0x02	; 2
    6aac:	c4 f0       	brlt	.+48     	; 0x6ade <itoa+0x3a>
    6aae:	45 32       	cpi	r20, 0x25	; 37
    6ab0:	b4 f4       	brge	.+44     	; 0x6ade <itoa+0x3a>
    6ab2:	4a 30       	cpi	r20, 0x0A	; 10
    6ab4:	29 f4       	brne	.+10     	; 0x6ac0 <itoa+0x1c>
    6ab6:	97 fb       	bst	r25, 7
    6ab8:	1e f4       	brtc	.+6      	; 0x6ac0 <itoa+0x1c>
    6aba:	90 95       	com	r25
    6abc:	81 95       	neg	r24
    6abe:	9f 4f       	sbci	r25, 0xFF	; 255
    6ac0:	64 2f       	mov	r22, r20
    6ac2:	77 27       	eor	r23, r23
    6ac4:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <__udivmodhi4>
    6ac8:	80 5d       	subi	r24, 0xD0	; 208
    6aca:	8a 33       	cpi	r24, 0x3A	; 58
    6acc:	0c f0       	brlt	.+2      	; 0x6ad0 <itoa+0x2c>
    6ace:	89 5d       	subi	r24, 0xD9	; 217
    6ad0:	81 93       	st	Z+, r24
    6ad2:	cb 01       	movw	r24, r22
    6ad4:	00 97       	sbiw	r24, 0x00	; 0
    6ad6:	a1 f7       	brne	.-24     	; 0x6ac0 <itoa+0x1c>
    6ad8:	16 f4       	brtc	.+4      	; 0x6ade <itoa+0x3a>
    6ada:	5d e2       	ldi	r21, 0x2D	; 45
    6adc:	51 93       	st	Z+, r21
    6ade:	10 82       	st	Z, r1
    6ae0:	c9 01       	movw	r24, r18
    6ae2:	0c 94 ad 37 	jmp	0x6f5a	; 0x6f5a <strrev>

00006ae6 <dtoa_prf>:
    6ae6:	a9 e0       	ldi	r26, 0x09	; 9
    6ae8:	b0 e0       	ldi	r27, 0x00	; 0
    6aea:	e9 e7       	ldi	r30, 0x79	; 121
    6aec:	f5 e3       	ldi	r31, 0x35	; 53
    6aee:	0c 94 fe 34 	jmp	0x69fc	; 0x69fc <__prologue_saves__+0x8>
    6af2:	6a 01       	movw	r12, r20
    6af4:	12 2f       	mov	r17, r18
    6af6:	a0 2e       	mov	r10, r16
    6af8:	be 2c       	mov	r11, r14
    6afa:	2b e3       	ldi	r18, 0x3B	; 59
    6afc:	20 17       	cp	r18, r16
    6afe:	18 f4       	brcc	.+6      	; 0x6b06 <dtoa_prf+0x20>
    6b00:	2c e3       	ldi	r18, 0x3C	; 60
    6b02:	92 2e       	mov	r9, r18
    6b04:	02 c0       	rjmp	.+4      	; 0x6b0a <dtoa_prf+0x24>
    6b06:	90 2e       	mov	r9, r16
    6b08:	93 94       	inc	r9
    6b0a:	ae 01       	movw	r20, r28
    6b0c:	4f 5f       	subi	r20, 0xFF	; 255
    6b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    6b10:	27 e0       	ldi	r18, 0x07	; 7
    6b12:	09 2d       	mov	r16, r9
    6b14:	0e 94 d5 36 	call	0x6daa	; 0x6daa <__ftoa_engine>
    6b18:	bc 01       	movw	r22, r24
    6b1a:	89 81       	ldd	r24, Y+1	; 0x01
    6b1c:	e8 2e       	mov	r14, r24
    6b1e:	ff 24       	eor	r15, r15
    6b20:	c7 01       	movw	r24, r14
    6b22:	89 70       	andi	r24, 0x09	; 9
    6b24:	90 70       	andi	r25, 0x00	; 0
    6b26:	01 97       	sbiw	r24, 0x01	; 1
    6b28:	11 f4       	brne	.+4      	; 0x6b2e <dtoa_prf+0x48>
    6b2a:	ad e2       	ldi	r26, 0x2D	; 45
    6b2c:	09 c0       	rjmp	.+18     	; 0x6b40 <dtoa_prf+0x5a>
    6b2e:	b1 fe       	sbrs	r11, 1
    6b30:	02 c0       	rjmp	.+4      	; 0x6b36 <dtoa_prf+0x50>
    6b32:	ab e2       	ldi	r26, 0x2B	; 43
    6b34:	05 c0       	rjmp	.+10     	; 0x6b40 <dtoa_prf+0x5a>
    6b36:	b0 fc       	sbrc	r11, 0
    6b38:	02 c0       	rjmp	.+4      	; 0x6b3e <dtoa_prf+0x58>
    6b3a:	a0 e0       	ldi	r26, 0x00	; 0
    6b3c:	01 c0       	rjmp	.+2      	; 0x6b40 <dtoa_prf+0x5a>
    6b3e:	a0 e2       	ldi	r26, 0x20	; 32
    6b40:	e3 fe       	sbrs	r14, 3
    6b42:	3b c0       	rjmp	.+118    	; 0x6bba <dtoa_prf+0xd4>
    6b44:	aa 23       	and	r26, r26
    6b46:	11 f4       	brne	.+4      	; 0x6b4c <dtoa_prf+0x66>
    6b48:	23 e0       	ldi	r18, 0x03	; 3
    6b4a:	01 c0       	rjmp	.+2      	; 0x6b4e <dtoa_prf+0x68>
    6b4c:	24 e0       	ldi	r18, 0x04	; 4
    6b4e:	21 17       	cp	r18, r17
    6b50:	10 f0       	brcs	.+4      	; 0x6b56 <dtoa_prf+0x70>
    6b52:	20 e0       	ldi	r18, 0x00	; 0
    6b54:	02 c0       	rjmp	.+4      	; 0x6b5a <dtoa_prf+0x74>
    6b56:	12 1b       	sub	r17, r18
    6b58:	21 2f       	mov	r18, r17
    6b5a:	eb 2c       	mov	r14, r11
    6b5c:	b4 fe       	sbrs	r11, 4
    6b5e:	02 c0       	rjmp	.+4      	; 0x6b64 <dtoa_prf+0x7e>
    6b60:	32 2f       	mov	r19, r18
    6b62:	0a c0       	rjmp	.+20     	; 0x6b78 <dtoa_prf+0x92>
    6b64:	f6 01       	movw	r30, r12
    6b66:	32 2f       	mov	r19, r18
    6b68:	80 e2       	ldi	r24, 0x20	; 32
    6b6a:	02 c0       	rjmp	.+4      	; 0x6b70 <dtoa_prf+0x8a>
    6b6c:	81 93       	st	Z+, r24
    6b6e:	31 50       	subi	r19, 0x01	; 1
    6b70:	33 23       	and	r19, r19
    6b72:	e1 f7       	brne	.-8      	; 0x6b6c <dtoa_prf+0x86>
    6b74:	c2 0e       	add	r12, r18
    6b76:	d1 1c       	adc	r13, r1
    6b78:	aa 23       	and	r26, r26
    6b7a:	19 f0       	breq	.+6      	; 0x6b82 <dtoa_prf+0x9c>
    6b7c:	f6 01       	movw	r30, r12
    6b7e:	a1 93       	st	Z+, r26
    6b80:	6f 01       	movw	r12, r30
    6b82:	f6 01       	movw	r30, r12
    6b84:	31 96       	adiw	r30, 0x01	; 1
    6b86:	e2 fe       	sbrs	r14, 2
    6b88:	05 c0       	rjmp	.+10     	; 0x6b94 <dtoa_prf+0xae>
    6b8a:	9e e4       	ldi	r25, 0x4E	; 78
    6b8c:	d6 01       	movw	r26, r12
    6b8e:	9c 93       	st	X, r25
    6b90:	81 e4       	ldi	r24, 0x41	; 65
    6b92:	04 c0       	rjmp	.+8      	; 0x6b9c <dtoa_prf+0xb6>
    6b94:	9e e6       	ldi	r25, 0x6E	; 110
    6b96:	d6 01       	movw	r26, r12
    6b98:	9c 93       	st	X, r25
    6b9a:	81 e6       	ldi	r24, 0x61	; 97
    6b9c:	11 96       	adiw	r26, 0x01	; 1
    6b9e:	8c 93       	st	X, r24
    6ba0:	91 83       	std	Z+1, r25	; 0x01
    6ba2:	32 96       	adiw	r30, 0x02	; 2
    6ba4:	df 01       	movw	r26, r30
    6ba6:	83 2f       	mov	r24, r19
    6ba8:	90 e2       	ldi	r25, 0x20	; 32
    6baa:	02 c0       	rjmp	.+4      	; 0x6bb0 <dtoa_prf+0xca>
    6bac:	9d 93       	st	X+, r25
    6bae:	81 50       	subi	r24, 0x01	; 1
    6bb0:	88 23       	and	r24, r24
    6bb2:	e1 f7       	brne	.-8      	; 0x6bac <dtoa_prf+0xc6>
    6bb4:	e3 0f       	add	r30, r19
    6bb6:	f1 1d       	adc	r31, r1
    6bb8:	40 c0       	rjmp	.+128    	; 0x6c3a <dtoa_prf+0x154>
    6bba:	e2 fe       	sbrs	r14, 2
    6bbc:	42 c0       	rjmp	.+132    	; 0x6c42 <dtoa_prf+0x15c>
    6bbe:	aa 23       	and	r26, r26
    6bc0:	11 f4       	brne	.+4      	; 0x6bc6 <dtoa_prf+0xe0>
    6bc2:	23 e0       	ldi	r18, 0x03	; 3
    6bc4:	01 c0       	rjmp	.+2      	; 0x6bc8 <dtoa_prf+0xe2>
    6bc6:	24 e0       	ldi	r18, 0x04	; 4
    6bc8:	21 17       	cp	r18, r17
    6bca:	10 f0       	brcs	.+4      	; 0x6bd0 <dtoa_prf+0xea>
    6bcc:	20 e0       	ldi	r18, 0x00	; 0
    6bce:	02 c0       	rjmp	.+4      	; 0x6bd4 <dtoa_prf+0xee>
    6bd0:	12 1b       	sub	r17, r18
    6bd2:	21 2f       	mov	r18, r17
    6bd4:	eb 2c       	mov	r14, r11
    6bd6:	b4 fe       	sbrs	r11, 4
    6bd8:	02 c0       	rjmp	.+4      	; 0x6bde <dtoa_prf+0xf8>
    6bda:	92 2f       	mov	r25, r18
    6bdc:	0a c0       	rjmp	.+20     	; 0x6bf2 <dtoa_prf+0x10c>
    6bde:	f6 01       	movw	r30, r12
    6be0:	92 2f       	mov	r25, r18
    6be2:	80 e2       	ldi	r24, 0x20	; 32
    6be4:	02 c0       	rjmp	.+4      	; 0x6bea <dtoa_prf+0x104>
    6be6:	81 93       	st	Z+, r24
    6be8:	91 50       	subi	r25, 0x01	; 1
    6bea:	99 23       	and	r25, r25
    6bec:	e1 f7       	brne	.-8      	; 0x6be6 <dtoa_prf+0x100>
    6bee:	c2 0e       	add	r12, r18
    6bf0:	d1 1c       	adc	r13, r1
    6bf2:	aa 23       	and	r26, r26
    6bf4:	19 f0       	breq	.+6      	; 0x6bfc <dtoa_prf+0x116>
    6bf6:	f6 01       	movw	r30, r12
    6bf8:	a1 93       	st	Z+, r26
    6bfa:	6f 01       	movw	r12, r30
    6bfc:	f6 01       	movw	r30, r12
    6bfe:	31 96       	adiw	r30, 0x01	; 1
    6c00:	e2 fe       	sbrs	r14, 2
    6c02:	08 c0       	rjmp	.+16     	; 0x6c14 <dtoa_prf+0x12e>
    6c04:	89 e4       	ldi	r24, 0x49	; 73
    6c06:	d6 01       	movw	r26, r12
    6c08:	8c 93       	st	X, r24
    6c0a:	8e e4       	ldi	r24, 0x4E	; 78
    6c0c:	11 96       	adiw	r26, 0x01	; 1
    6c0e:	8c 93       	st	X, r24
    6c10:	86 e4       	ldi	r24, 0x46	; 70
    6c12:	07 c0       	rjmp	.+14     	; 0x6c22 <dtoa_prf+0x13c>
    6c14:	89 e6       	ldi	r24, 0x69	; 105
    6c16:	d6 01       	movw	r26, r12
    6c18:	8c 93       	st	X, r24
    6c1a:	8e e6       	ldi	r24, 0x6E	; 110
    6c1c:	11 96       	adiw	r26, 0x01	; 1
    6c1e:	8c 93       	st	X, r24
    6c20:	86 e6       	ldi	r24, 0x66	; 102
    6c22:	81 83       	std	Z+1, r24	; 0x01
    6c24:	32 96       	adiw	r30, 0x02	; 2
    6c26:	df 01       	movw	r26, r30
    6c28:	89 2f       	mov	r24, r25
    6c2a:	20 e2       	ldi	r18, 0x20	; 32
    6c2c:	02 c0       	rjmp	.+4      	; 0x6c32 <dtoa_prf+0x14c>
    6c2e:	2d 93       	st	X+, r18
    6c30:	81 50       	subi	r24, 0x01	; 1
    6c32:	88 23       	and	r24, r24
    6c34:	e1 f7       	brne	.-8      	; 0x6c2e <dtoa_prf+0x148>
    6c36:	e9 0f       	add	r30, r25
    6c38:	f1 1d       	adc	r31, r1
    6c3a:	10 82       	st	Z, r1
    6c3c:	2e ef       	ldi	r18, 0xFE	; 254
    6c3e:	3f ef       	ldi	r19, 0xFF	; 255
    6c40:	af c0       	rjmp	.+350    	; 0x6da0 <dtoa_prf+0x2ba>
    6c42:	16 16       	cp	r1, r22
    6c44:	17 06       	cpc	r1, r23
    6c46:	1c f0       	brlt	.+6      	; 0x6c4e <dtoa_prf+0x168>
    6c48:	41 e0       	ldi	r20, 0x01	; 1
    6c4a:	50 e0       	ldi	r21, 0x00	; 0
    6c4c:	03 c0       	rjmp	.+6      	; 0x6c54 <dtoa_prf+0x16e>
    6c4e:	ab 01       	movw	r20, r22
    6c50:	4f 5f       	subi	r20, 0xFF	; 255
    6c52:	5f 4f       	sbci	r21, 0xFF	; 255
    6c54:	aa 20       	and	r10, r10
    6c56:	19 f4       	brne	.+6      	; 0x6c5e <dtoa_prf+0x178>
    6c58:	80 e0       	ldi	r24, 0x00	; 0
    6c5a:	90 e0       	ldi	r25, 0x00	; 0
    6c5c:	03 c0       	rjmp	.+6      	; 0x6c64 <dtoa_prf+0x17e>
    6c5e:	8a 2d       	mov	r24, r10
    6c60:	90 e0       	ldi	r25, 0x00	; 0
    6c62:	01 96       	adiw	r24, 0x01	; 1
    6c64:	20 e0       	ldi	r18, 0x00	; 0
    6c66:	30 e0       	ldi	r19, 0x00	; 0
    6c68:	aa 23       	and	r26, r26
    6c6a:	11 f0       	breq	.+4      	; 0x6c70 <dtoa_prf+0x18a>
    6c6c:	21 e0       	ldi	r18, 0x01	; 1
    6c6e:	30 e0       	ldi	r19, 0x00	; 0
    6c70:	24 0f       	add	r18, r20
    6c72:	35 1f       	adc	r19, r21
    6c74:	28 0f       	add	r18, r24
    6c76:	39 1f       	adc	r19, r25
    6c78:	81 2f       	mov	r24, r17
    6c7a:	90 e0       	ldi	r25, 0x00	; 0
    6c7c:	28 17       	cp	r18, r24
    6c7e:	39 07       	cpc	r19, r25
    6c80:	14 f0       	brlt	.+4      	; 0x6c86 <dtoa_prf+0x1a0>
    6c82:	20 e0       	ldi	r18, 0x00	; 0
    6c84:	02 c0       	rjmp	.+4      	; 0x6c8a <dtoa_prf+0x1a4>
    6c86:	12 1b       	sub	r17, r18
    6c88:	21 2f       	mov	r18, r17
    6c8a:	4b 2d       	mov	r20, r11
    6c8c:	50 e0       	ldi	r21, 0x00	; 0
    6c8e:	ca 01       	movw	r24, r20
    6c90:	80 71       	andi	r24, 0x10	; 16
    6c92:	90 70       	andi	r25, 0x00	; 0
    6c94:	b4 fc       	sbrc	r11, 4
    6c96:	0d c0       	rjmp	.+26     	; 0x6cb2 <dtoa_prf+0x1cc>
    6c98:	b3 fc       	sbrc	r11, 3
    6c9a:	0b c0       	rjmp	.+22     	; 0x6cb2 <dtoa_prf+0x1cc>
    6c9c:	f6 01       	movw	r30, r12
    6c9e:	32 2f       	mov	r19, r18
    6ca0:	40 e2       	ldi	r20, 0x20	; 32
    6ca2:	02 c0       	rjmp	.+4      	; 0x6ca8 <dtoa_prf+0x1c2>
    6ca4:	41 93       	st	Z+, r20
    6ca6:	31 50       	subi	r19, 0x01	; 1
    6ca8:	33 23       	and	r19, r19
    6caa:	e1 f7       	brne	.-8      	; 0x6ca4 <dtoa_prf+0x1be>
    6cac:	c2 0e       	add	r12, r18
    6cae:	d1 1c       	adc	r13, r1
    6cb0:	01 c0       	rjmp	.+2      	; 0x6cb4 <dtoa_prf+0x1ce>
    6cb2:	32 2f       	mov	r19, r18
    6cb4:	aa 23       	and	r26, r26
    6cb6:	19 f0       	breq	.+6      	; 0x6cbe <dtoa_prf+0x1d8>
    6cb8:	f6 01       	movw	r30, r12
    6cba:	a1 93       	st	Z+, r26
    6cbc:	6f 01       	movw	r12, r30
    6cbe:	89 2b       	or	r24, r25
    6cc0:	11 f0       	breq	.+4      	; 0x6cc6 <dtoa_prf+0x1e0>
    6cc2:	13 2f       	mov	r17, r19
    6cc4:	0a c0       	rjmp	.+20     	; 0x6cda <dtoa_prf+0x1f4>
    6cc6:	f6 01       	movw	r30, r12
    6cc8:	13 2f       	mov	r17, r19
    6cca:	80 e3       	ldi	r24, 0x30	; 48
    6ccc:	02 c0       	rjmp	.+4      	; 0x6cd2 <dtoa_prf+0x1ec>
    6cce:	81 93       	st	Z+, r24
    6cd0:	11 50       	subi	r17, 0x01	; 1
    6cd2:	11 23       	and	r17, r17
    6cd4:	e1 f7       	brne	.-8      	; 0x6cce <dtoa_prf+0x1e8>
    6cd6:	c3 0e       	add	r12, r19
    6cd8:	d1 1c       	adc	r13, r1
    6cda:	09 2d       	mov	r16, r9
    6cdc:	06 0f       	add	r16, r22
    6cde:	ba 80       	ldd	r11, Y+2	; 0x02
    6ce0:	90 e1       	ldi	r25, 0x10	; 16
    6ce2:	89 2e       	mov	r8, r25
    6ce4:	91 2c       	mov	r9, r1
    6ce6:	8e 20       	and	r8, r14
    6ce8:	9f 20       	and	r9, r15
    6cea:	e4 fe       	sbrs	r14, 4
    6cec:	04 c0       	rjmp	.+8      	; 0x6cf6 <dtoa_prf+0x210>
    6cee:	f1 e3       	ldi	r31, 0x31	; 49
    6cf0:	bf 16       	cp	r11, r31
    6cf2:	09 f4       	brne	.+2      	; 0x6cf6 <dtoa_prf+0x210>
    6cf4:	01 50       	subi	r16, 0x01	; 1
    6cf6:	10 16       	cp	r1, r16
    6cf8:	14 f0       	brlt	.+4      	; 0x6cfe <dtoa_prf+0x218>
    6cfa:	01 e0       	ldi	r16, 0x01	; 1
    6cfc:	03 c0       	rjmp	.+6      	; 0x6d04 <dtoa_prf+0x21e>
    6cfe:	09 30       	cpi	r16, 0x09	; 9
    6d00:	08 f0       	brcs	.+2      	; 0x6d04 <dtoa_prf+0x21e>
    6d02:	08 e0       	ldi	r16, 0x08	; 8
    6d04:	9b 01       	movw	r18, r22
    6d06:	77 ff       	sbrs	r23, 7
    6d08:	02 c0       	rjmp	.+4      	; 0x6d0e <dtoa_prf+0x228>
    6d0a:	20 e0       	ldi	r18, 0x00	; 0
    6d0c:	30 e0       	ldi	r19, 0x00	; 0
    6d0e:	cb 01       	movw	r24, r22
    6d10:	01 96       	adiw	r24, 0x01	; 1
    6d12:	82 1b       	sub	r24, r18
    6d14:	93 0b       	sbc	r25, r19
    6d16:	fe 01       	movw	r30, r28
    6d18:	31 96       	adiw	r30, 0x01	; 1
    6d1a:	e8 0f       	add	r30, r24
    6d1c:	f9 1f       	adc	r31, r25
    6d1e:	8e e2       	ldi	r24, 0x2E	; 46
    6d20:	f8 2e       	mov	r15, r24
    6d22:	3b 01       	movw	r6, r22
    6d24:	60 1a       	sub	r6, r16
    6d26:	71 08       	sbc	r7, r1
    6d28:	8a 2d       	mov	r24, r10
    6d2a:	90 e0       	ldi	r25, 0x00	; 0
    6d2c:	44 27       	eor	r20, r20
    6d2e:	55 27       	eor	r21, r21
    6d30:	48 1b       	sub	r20, r24
    6d32:	59 0b       	sbc	r21, r25
    6d34:	8f ef       	ldi	r24, 0xFF	; 255
    6d36:	2f 3f       	cpi	r18, 0xFF	; 255
    6d38:	38 07       	cpc	r19, r24
    6d3a:	19 f4       	brne	.+6      	; 0x6d42 <dtoa_prf+0x25c>
    6d3c:	d6 01       	movw	r26, r12
    6d3e:	fd 92       	st	X+, r15
    6d40:	6d 01       	movw	r12, r26
    6d42:	62 17       	cp	r22, r18
    6d44:	73 07       	cpc	r23, r19
    6d46:	2c f0       	brlt	.+10     	; 0x6d52 <dtoa_prf+0x26c>
    6d48:	62 16       	cp	r6, r18
    6d4a:	73 06       	cpc	r7, r19
    6d4c:	14 f4       	brge	.+4      	; 0x6d52 <dtoa_prf+0x26c>
    6d4e:	80 81       	ld	r24, Z
    6d50:	01 c0       	rjmp	.+2      	; 0x6d54 <dtoa_prf+0x26e>
    6d52:	80 e3       	ldi	r24, 0x30	; 48
    6d54:	21 50       	subi	r18, 0x01	; 1
    6d56:	30 40       	sbci	r19, 0x00	; 0
    6d58:	31 96       	adiw	r30, 0x01	; 1
    6d5a:	24 17       	cp	r18, r20
    6d5c:	35 07       	cpc	r19, r21
    6d5e:	24 f0       	brlt	.+8      	; 0x6d68 <dtoa_prf+0x282>
    6d60:	d6 01       	movw	r26, r12
    6d62:	8d 93       	st	X+, r24
    6d64:	6d 01       	movw	r12, r26
    6d66:	e6 cf       	rjmp	.-52     	; 0x6d34 <dtoa_prf+0x24e>
    6d68:	26 17       	cp	r18, r22
    6d6a:	37 07       	cpc	r19, r23
    6d6c:	49 f4       	brne	.+18     	; 0x6d80 <dtoa_prf+0x29a>
    6d6e:	b5 e3       	ldi	r27, 0x35	; 53
    6d70:	bb 15       	cp	r27, r11
    6d72:	28 f0       	brcs	.+10     	; 0x6d7e <dtoa_prf+0x298>
    6d74:	bb 16       	cp	r11, r27
    6d76:	21 f4       	brne	.+8      	; 0x6d80 <dtoa_prf+0x29a>
    6d78:	81 14       	cp	r8, r1
    6d7a:	91 04       	cpc	r9, r1
    6d7c:	09 f4       	brne	.+2      	; 0x6d80 <dtoa_prf+0x29a>
    6d7e:	81 e3       	ldi	r24, 0x31	; 49
    6d80:	f6 01       	movw	r30, r12
    6d82:	81 93       	st	Z+, r24
    6d84:	d6 01       	movw	r26, r12
    6d86:	81 2f       	mov	r24, r17
    6d88:	90 e2       	ldi	r25, 0x20	; 32
    6d8a:	02 c0       	rjmp	.+4      	; 0x6d90 <dtoa_prf+0x2aa>
    6d8c:	9c 93       	st	X, r25
    6d8e:	81 50       	subi	r24, 0x01	; 1
    6d90:	11 96       	adiw	r26, 0x01	; 1
    6d92:	88 23       	and	r24, r24
    6d94:	d9 f7       	brne	.-10     	; 0x6d8c <dtoa_prf+0x2a6>
    6d96:	e1 0f       	add	r30, r17
    6d98:	f1 1d       	adc	r31, r1
    6d9a:	10 82       	st	Z, r1
    6d9c:	20 e0       	ldi	r18, 0x00	; 0
    6d9e:	30 e0       	ldi	r19, 0x00	; 0
    6da0:	c9 01       	movw	r24, r18
    6da2:	29 96       	adiw	r28, 0x09	; 9
    6da4:	ee e0       	ldi	r30, 0x0E	; 14
    6da6:	0c 94 1a 35 	jmp	0x6a34	; 0x6a34 <__epilogue_restores__+0x8>

00006daa <__ftoa_engine>:
    6daa:	28 30       	cpi	r18, 0x08	; 8
    6dac:	08 f0       	brcs	.+2      	; 0x6db0 <__ftoa_engine+0x6>
    6dae:	27 e0       	ldi	r18, 0x07	; 7
    6db0:	33 27       	eor	r19, r19
    6db2:	da 01       	movw	r26, r20
    6db4:	99 0f       	add	r25, r25
    6db6:	31 1d       	adc	r19, r1
    6db8:	87 fd       	sbrc	r24, 7
    6dba:	91 60       	ori	r25, 0x01	; 1
    6dbc:	00 96       	adiw	r24, 0x00	; 0
    6dbe:	61 05       	cpc	r22, r1
    6dc0:	71 05       	cpc	r23, r1
    6dc2:	39 f4       	brne	.+14     	; 0x6dd2 <__ftoa_engine+0x28>
    6dc4:	32 60       	ori	r19, 0x02	; 2
    6dc6:	2e 5f       	subi	r18, 0xFE	; 254
    6dc8:	3d 93       	st	X+, r19
    6dca:	30 e3       	ldi	r19, 0x30	; 48
    6dcc:	2a 95       	dec	r18
    6dce:	e1 f7       	brne	.-8      	; 0x6dc8 <__ftoa_engine+0x1e>
    6dd0:	08 95       	ret
    6dd2:	9f 3f       	cpi	r25, 0xFF	; 255
    6dd4:	30 f0       	brcs	.+12     	; 0x6de2 <__ftoa_engine+0x38>
    6dd6:	80 38       	cpi	r24, 0x80	; 128
    6dd8:	71 05       	cpc	r23, r1
    6dda:	61 05       	cpc	r22, r1
    6ddc:	09 f0       	breq	.+2      	; 0x6de0 <__ftoa_engine+0x36>
    6dde:	3c 5f       	subi	r19, 0xFC	; 252
    6de0:	3c 5f       	subi	r19, 0xFC	; 252
    6de2:	3d 93       	st	X+, r19
    6de4:	91 30       	cpi	r25, 0x01	; 1
    6de6:	08 f0       	brcs	.+2      	; 0x6dea <__ftoa_engine+0x40>
    6de8:	80 68       	ori	r24, 0x80	; 128
    6dea:	91 1d       	adc	r25, r1
    6dec:	df 93       	push	r29
    6dee:	cf 93       	push	r28
    6df0:	1f 93       	push	r17
    6df2:	0f 93       	push	r16
    6df4:	ff 92       	push	r15
    6df6:	ef 92       	push	r14
    6df8:	19 2f       	mov	r17, r25
    6dfa:	98 7f       	andi	r25, 0xF8	; 248
    6dfc:	96 95       	lsr	r25
    6dfe:	e9 2f       	mov	r30, r25
    6e00:	96 95       	lsr	r25
    6e02:	96 95       	lsr	r25
    6e04:	e9 0f       	add	r30, r25
    6e06:	ff 27       	eor	r31, r31
    6e08:	e2 55       	subi	r30, 0x52	; 82
    6e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e0c:	99 27       	eor	r25, r25
    6e0e:	33 27       	eor	r19, r19
    6e10:	ee 24       	eor	r14, r14
    6e12:	ff 24       	eor	r15, r15
    6e14:	a7 01       	movw	r20, r14
    6e16:	e7 01       	movw	r28, r14
    6e18:	05 90       	lpm	r0, Z+
    6e1a:	08 94       	sec
    6e1c:	07 94       	ror	r0
    6e1e:	28 f4       	brcc	.+10     	; 0x6e2a <__ftoa_engine+0x80>
    6e20:	36 0f       	add	r19, r22
    6e22:	e7 1e       	adc	r14, r23
    6e24:	f8 1e       	adc	r15, r24
    6e26:	49 1f       	adc	r20, r25
    6e28:	51 1d       	adc	r21, r1
    6e2a:	66 0f       	add	r22, r22
    6e2c:	77 1f       	adc	r23, r23
    6e2e:	88 1f       	adc	r24, r24
    6e30:	99 1f       	adc	r25, r25
    6e32:	06 94       	lsr	r0
    6e34:	a1 f7       	brne	.-24     	; 0x6e1e <__ftoa_engine+0x74>
    6e36:	05 90       	lpm	r0, Z+
    6e38:	07 94       	ror	r0
    6e3a:	28 f4       	brcc	.+10     	; 0x6e46 <__ftoa_engine+0x9c>
    6e3c:	e7 0e       	add	r14, r23
    6e3e:	f8 1e       	adc	r15, r24
    6e40:	49 1f       	adc	r20, r25
    6e42:	56 1f       	adc	r21, r22
    6e44:	c1 1d       	adc	r28, r1
    6e46:	77 0f       	add	r23, r23
    6e48:	88 1f       	adc	r24, r24
    6e4a:	99 1f       	adc	r25, r25
    6e4c:	66 1f       	adc	r22, r22
    6e4e:	06 94       	lsr	r0
    6e50:	a1 f7       	brne	.-24     	; 0x6e3a <__ftoa_engine+0x90>
    6e52:	05 90       	lpm	r0, Z+
    6e54:	07 94       	ror	r0
    6e56:	28 f4       	brcc	.+10     	; 0x6e62 <__ftoa_engine+0xb8>
    6e58:	f8 0e       	add	r15, r24
    6e5a:	49 1f       	adc	r20, r25
    6e5c:	56 1f       	adc	r21, r22
    6e5e:	c7 1f       	adc	r28, r23
    6e60:	d1 1d       	adc	r29, r1
    6e62:	88 0f       	add	r24, r24
    6e64:	99 1f       	adc	r25, r25
    6e66:	66 1f       	adc	r22, r22
    6e68:	77 1f       	adc	r23, r23
    6e6a:	06 94       	lsr	r0
    6e6c:	a1 f7       	brne	.-24     	; 0x6e56 <__ftoa_engine+0xac>
    6e6e:	05 90       	lpm	r0, Z+
    6e70:	07 94       	ror	r0
    6e72:	20 f4       	brcc	.+8      	; 0x6e7c <__ftoa_engine+0xd2>
    6e74:	49 0f       	add	r20, r25
    6e76:	56 1f       	adc	r21, r22
    6e78:	c7 1f       	adc	r28, r23
    6e7a:	d8 1f       	adc	r29, r24
    6e7c:	99 0f       	add	r25, r25
    6e7e:	66 1f       	adc	r22, r22
    6e80:	77 1f       	adc	r23, r23
    6e82:	88 1f       	adc	r24, r24
    6e84:	06 94       	lsr	r0
    6e86:	a9 f7       	brne	.-22     	; 0x6e72 <__ftoa_engine+0xc8>
    6e88:	84 91       	lpm	r24, Z+
    6e8a:	10 95       	com	r17
    6e8c:	17 70       	andi	r17, 0x07	; 7
    6e8e:	41 f0       	breq	.+16     	; 0x6ea0 <__ftoa_engine+0xf6>
    6e90:	d6 95       	lsr	r29
    6e92:	c7 95       	ror	r28
    6e94:	57 95       	ror	r21
    6e96:	47 95       	ror	r20
    6e98:	f7 94       	ror	r15
    6e9a:	e7 94       	ror	r14
    6e9c:	1a 95       	dec	r17
    6e9e:	c1 f7       	brne	.-16     	; 0x6e90 <__ftoa_engine+0xe6>
    6ea0:	e4 e5       	ldi	r30, 0x54	; 84
    6ea2:	f0 e0       	ldi	r31, 0x00	; 0
    6ea4:	68 94       	set
    6ea6:	15 90       	lpm	r1, Z+
    6ea8:	15 91       	lpm	r17, Z+
    6eaa:	35 91       	lpm	r19, Z+
    6eac:	65 91       	lpm	r22, Z+
    6eae:	95 91       	lpm	r25, Z+
    6eb0:	05 90       	lpm	r0, Z+
    6eb2:	7f e2       	ldi	r23, 0x2F	; 47
    6eb4:	73 95       	inc	r23
    6eb6:	e1 18       	sub	r14, r1
    6eb8:	f1 0a       	sbc	r15, r17
    6eba:	43 0b       	sbc	r20, r19
    6ebc:	56 0b       	sbc	r21, r22
    6ebe:	c9 0b       	sbc	r28, r25
    6ec0:	d0 09       	sbc	r29, r0
    6ec2:	c0 f7       	brcc	.-16     	; 0x6eb4 <__ftoa_engine+0x10a>
    6ec4:	e1 0c       	add	r14, r1
    6ec6:	f1 1e       	adc	r15, r17
    6ec8:	43 1f       	adc	r20, r19
    6eca:	56 1f       	adc	r21, r22
    6ecc:	c9 1f       	adc	r28, r25
    6ece:	d0 1d       	adc	r29, r0
    6ed0:	7e f4       	brtc	.+30     	; 0x6ef0 <__ftoa_engine+0x146>
    6ed2:	70 33       	cpi	r23, 0x30	; 48
    6ed4:	11 f4       	brne	.+4      	; 0x6eda <__ftoa_engine+0x130>
    6ed6:	8a 95       	dec	r24
    6ed8:	e6 cf       	rjmp	.-52     	; 0x6ea6 <__ftoa_engine+0xfc>
    6eda:	e8 94       	clt
    6edc:	01 50       	subi	r16, 0x01	; 1
    6ede:	30 f0       	brcs	.+12     	; 0x6eec <__ftoa_engine+0x142>
    6ee0:	08 0f       	add	r16, r24
    6ee2:	0a f4       	brpl	.+2      	; 0x6ee6 <__ftoa_engine+0x13c>
    6ee4:	00 27       	eor	r16, r16
    6ee6:	02 17       	cp	r16, r18
    6ee8:	08 f4       	brcc	.+2      	; 0x6eec <__ftoa_engine+0x142>
    6eea:	20 2f       	mov	r18, r16
    6eec:	23 95       	inc	r18
    6eee:	02 2f       	mov	r16, r18
    6ef0:	7a 33       	cpi	r23, 0x3A	; 58
    6ef2:	28 f0       	brcs	.+10     	; 0x6efe <__ftoa_engine+0x154>
    6ef4:	79 e3       	ldi	r23, 0x39	; 57
    6ef6:	7d 93       	st	X+, r23
    6ef8:	2a 95       	dec	r18
    6efa:	e9 f7       	brne	.-6      	; 0x6ef6 <__ftoa_engine+0x14c>
    6efc:	10 c0       	rjmp	.+32     	; 0x6f1e <__ftoa_engine+0x174>
    6efe:	7d 93       	st	X+, r23
    6f00:	2a 95       	dec	r18
    6f02:	89 f6       	brne	.-94     	; 0x6ea6 <__ftoa_engine+0xfc>
    6f04:	06 94       	lsr	r0
    6f06:	97 95       	ror	r25
    6f08:	67 95       	ror	r22
    6f0a:	37 95       	ror	r19
    6f0c:	17 95       	ror	r17
    6f0e:	17 94       	ror	r1
    6f10:	e1 18       	sub	r14, r1
    6f12:	f1 0a       	sbc	r15, r17
    6f14:	43 0b       	sbc	r20, r19
    6f16:	56 0b       	sbc	r21, r22
    6f18:	c9 0b       	sbc	r28, r25
    6f1a:	d0 09       	sbc	r29, r0
    6f1c:	98 f0       	brcs	.+38     	; 0x6f44 <__ftoa_engine+0x19a>
    6f1e:	23 95       	inc	r18
    6f20:	7e 91       	ld	r23, -X
    6f22:	73 95       	inc	r23
    6f24:	7a 33       	cpi	r23, 0x3A	; 58
    6f26:	08 f0       	brcs	.+2      	; 0x6f2a <__ftoa_engine+0x180>
    6f28:	70 e3       	ldi	r23, 0x30	; 48
    6f2a:	7c 93       	st	X, r23
    6f2c:	20 13       	cpse	r18, r16
    6f2e:	b8 f7       	brcc	.-18     	; 0x6f1e <__ftoa_engine+0x174>
    6f30:	7e 91       	ld	r23, -X
    6f32:	70 61       	ori	r23, 0x10	; 16
    6f34:	7d 93       	st	X+, r23
    6f36:	30 f0       	brcs	.+12     	; 0x6f44 <__ftoa_engine+0x19a>
    6f38:	83 95       	inc	r24
    6f3a:	71 e3       	ldi	r23, 0x31	; 49
    6f3c:	7d 93       	st	X+, r23
    6f3e:	70 e3       	ldi	r23, 0x30	; 48
    6f40:	2a 95       	dec	r18
    6f42:	e1 f7       	brne	.-8      	; 0x6f3c <__ftoa_engine+0x192>
    6f44:	11 24       	eor	r1, r1
    6f46:	ef 90       	pop	r14
    6f48:	ff 90       	pop	r15
    6f4a:	0f 91       	pop	r16
    6f4c:	1f 91       	pop	r17
    6f4e:	cf 91       	pop	r28
    6f50:	df 91       	pop	r29
    6f52:	99 27       	eor	r25, r25
    6f54:	87 fd       	sbrc	r24, 7
    6f56:	90 95       	com	r25
    6f58:	08 95       	ret

00006f5a <strrev>:
    6f5a:	dc 01       	movw	r26, r24
    6f5c:	fc 01       	movw	r30, r24
    6f5e:	67 2f       	mov	r22, r23
    6f60:	71 91       	ld	r23, Z+
    6f62:	77 23       	and	r23, r23
    6f64:	e1 f7       	brne	.-8      	; 0x6f5e <strrev+0x4>
    6f66:	32 97       	sbiw	r30, 0x02	; 2
    6f68:	04 c0       	rjmp	.+8      	; 0x6f72 <strrev+0x18>
    6f6a:	7c 91       	ld	r23, X
    6f6c:	6d 93       	st	X+, r22
    6f6e:	70 83       	st	Z, r23
    6f70:	62 91       	ld	r22, -Z
    6f72:	ae 17       	cp	r26, r30
    6f74:	bf 07       	cpc	r27, r31
    6f76:	c8 f3       	brcs	.-14     	; 0x6f6a <strrev+0x10>
    6f78:	08 95       	ret

00006f7a <__udivmodhi4>:
    6f7a:	aa 1b       	sub	r26, r26
    6f7c:	bb 1b       	sub	r27, r27
    6f7e:	51 e1       	ldi	r21, 0x11	; 17
    6f80:	07 c0       	rjmp	.+14     	; 0x6f90 <__udivmodhi4_ep>

00006f82 <__udivmodhi4_loop>:
    6f82:	aa 1f       	adc	r26, r26
    6f84:	bb 1f       	adc	r27, r27
    6f86:	a6 17       	cp	r26, r22
    6f88:	b7 07       	cpc	r27, r23
    6f8a:	10 f0       	brcs	.+4      	; 0x6f90 <__udivmodhi4_ep>
    6f8c:	a6 1b       	sub	r26, r22
    6f8e:	b7 0b       	sbc	r27, r23

00006f90 <__udivmodhi4_ep>:
    6f90:	88 1f       	adc	r24, r24
    6f92:	99 1f       	adc	r25, r25
    6f94:	5a 95       	dec	r21
    6f96:	a9 f7       	brne	.-22     	; 0x6f82 <__udivmodhi4_loop>
    6f98:	80 95       	com	r24
    6f9a:	90 95       	com	r25
    6f9c:	bc 01       	movw	r22, r24
    6f9e:	cd 01       	movw	r24, r26
    6fa0:	08 95       	ret

00006fa2 <_exit>:
    6fa2:	f8 94       	cli

00006fa4 <__stop_program>:
    6fa4:	ff cf       	rjmp	.-2      	; 0x6fa4 <__stop_program>
